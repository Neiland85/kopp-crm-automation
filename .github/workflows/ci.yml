name: CI - Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Permisos expl√≠citos para el workflow
permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for coverage reports

      - name: üü¢ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Run linter
        run: npm run lint:check

      - name: üß™ Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          HUBSPOT_API_KEY: ${{ secrets.HUBSPOT_API_KEY }}
          ZAPIER_WEBHOOK_URL: ${{ secrets.ZAPIER_WEBHOOK_URL }}

      - name: üìä Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: kopp-crm-automation
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: üìà Coverage Comment (PR only)
        if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
        uses: MishaKav/jest-coverage-comment@main
        with:
          coverage-summary-path: ./coverage/coverage-summary.json
          title: 'Jest Coverage Report'
          summary-title: 'Coverage Summary'

      - name: üì± Report test results to Slack
        if: always() && matrix.node-version == '20.x'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TEST_CHANNEL: ${{ secrets.SLACK_TEST_CHANNEL }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          NODE_ENV: test
        run: |
          if [ -f "scripts/slackTestReport.js" ]; then
            echo "üì± Sending test results to Slack..."
            node scripts/slackTestReport.js || echo "‚ö†Ô∏è Slack notification completed with warnings"
          else
            echo "‚ö†Ô∏è Slack test report script not found, skipping notification"
          fi

  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: üì¶ Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 7

      - name: üîç Check build size
        run: |
          echo "üìä Build Size Report:"
          if [ -d "dist" ]; then
            du -sh dist/
            find dist -name "*.js" -exec ls -lh {} \; | head -10
          else
            echo "‚ùå No dist directory found"
            exit 1
          fi

  quality-check:
    name: üîç Quality Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîí Security audit
        run: npm audit --audit-level=moderate || true

      - name: üìã TypeScript check
        run: npx tsc --noEmit

      - name: üéØ Run QA report
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_QA_CHANNEL: ${{ secrets.SLACK_QA_CHANNEL }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          NODE_ENV: test
        run: |
          if [ -f "scripts/qaReport.js" ]; then
            echo "üìä Running QA report..."
            node scripts/qaReport.js || echo "‚ö†Ô∏è QA report completed with warnings"
          else
            echo "‚ö†Ô∏è QA report script not found, skipping notification"
          fi

  coverage-badge:
    name: üèÜ Update Coverage Badge
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß™ Generate coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: üèÜ Generate coverage badge
        uses: tj-actions/coverage-badge-js@v2
        with:
          coverage-summary-path: './coverage/coverage-summary.json'
          output: './coverage-badge.svg'

      - name: üì§ Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage-badge.svg

      - name: üìä Coverage Summary
        run: |
          echo "üìä Coverage Summary:"
          if [ -f "coverage/coverage-summary.json" ]; then
            if command -v jq &> /dev/null; then
              cat coverage/coverage-summary.json | jq '.total'
            else
              echo "Coverage file found but jq not available for parsing"
              ls -la coverage/
            fi
          else
            echo "‚ùå No coverage summary found"
          fi

  slack-notification:
    name: üì± Slack Notification
    runs-on: ubuntu-latest
    needs: [test, build, quality-check]
    if: always()

    steps:
      - name: üì± Notify Success
        if: needs.test.result == 'success' && needs.build.result == 'success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "channel": "${{ secrets.SLACK_DEV_CHANNEL || '#equipo-dev' }}",
                "username": "GitHub CI Bot",
                "icon_emoji": ":white_check_mark:",
                "text": "‚úÖ CI Pipeline exitoso",
                "attachments": [{
                  "color": "#36a64f",
                  "title": "${{ github.repository }} - CI Success",
                  "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Event",
                      "value": "${{ github.event_name }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "All checks passed ‚úÖ",
                      "short": true
                    }
                  ],
                  "footer": "GitHub Actions",
                  "ts": '"$(date +%s)"'
                }]
              }' \
              "$SLACK_WEBHOOK_URL"
          else
            echo "‚ö†Ô∏è SLACK_WEBHOOK_URL not configured, skipping notification"
          fi

      - name: üì± Notify Failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "channel": "${{ secrets.SLACK_DEV_CHANNEL || '#equipo-dev' }}",
                "username": "GitHub CI Bot",
                "icon_emoji": ":x:",
                "text": "‚ùå CI Pipeline fall√≥",
                "attachments": [{
                  "color": "#ff0000",
                  "title": "${{ github.repository }} - CI Failure",
                  "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Test Result",
                      "value": "${{ needs.test.result }}",
                      "short": true
                    },
                    {
                      "title": "Build Result",
                      "value": "${{ needs.build.result }}",
                      "short": true
                    }
                  ],
                  "footer": "GitHub Actions",
                  "ts": '"$(date +%s)"'
                }]
              }' \
              "$SLACK_WEBHOOK_URL"
          else
            echo "‚ö†Ô∏è SLACK_WEBHOOK_URL not configured, skipping notification"
          fi
