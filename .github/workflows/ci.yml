name: CI - Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run linter
        run: npm run lint:check

      - name: 🧪 Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN || '' }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET || '' }}
          HUBSPOT_API_KEY: ${{ secrets.HUBSPOT_API_KEY || '' }}
          ZAPIER_WEBHOOK_URL: ${{ secrets.ZAPIER_WEBHOOK_URL || '' }}

      - name: 📊 Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: kopp-crm-automation
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: 📈 Coverage Comment (PR only)
        if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
        uses: MishaKav/jest-coverage-comment@main
        with:
          coverage-summary-path: ./coverage/coverage-summary.json
          title: 'Jest Coverage Report'
          summary-title: 'Coverage Summary'

  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📦 Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 7

  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Security audit
        run: npm audit --audit-level=moderate || true

      - name: 📋 TypeScript check
        run: npx tsc --noEmit

  slack-notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [test, build, quality-check]
    if: always()

    steps:
      - name: 📱 Notify Success
        if: needs.test.result == 'success' && needs.build.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ CI Pipeline exitoso para ${{ github.repository }}
            📊 Branch: ${{ github.ref_name }}
            🔗 Commit: ${{ github.sha }}
            🎯 Event: ${{ github.event_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📱 Notify Failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ CI Pipeline falló para ${{ github.repository }}
            📊 Branch: ${{ github.ref_name }}
            🔗 Commit: ${{ github.sha }}
            🧪 Tests: ${{ needs.test.result }}
            🏗️ Build: ${{ needs.build.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
