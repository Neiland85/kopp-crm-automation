{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/triggers/newGoogleSheetsLeadScoring.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/triggers/newGoogleSheetsLeadScoring.ts"],"sourcesContent":["import { ZapierTrigger, ZapierZ, ZapierBundle } from '../types';\nimport { withRetry, logZapAction } from '../utils/common';\n\n/**\n * Interface para una nueva fila de Google Sheets Lead Scoring\n */\ninterface GoogleSheetsLeadRow {\n  id: string;\n  email: string;\n  external_score: number;\n  timestamp: string;\n  name?: string;\n  company?: string;\n  source?: string;\n  raw_data: any;\n}\n\n/**\n * Obtiene nuevas filas de la hoja Lead Scoring en Google Sheets\n */\nconst getNewLeadScoringRows = async (\n  z: ZapierZ,\n  bundle: ZapierBundle\n): Promise<GoogleSheetsLeadRow[]> => {\n  const accessToken = bundle.authData.google_access_token;\n  const spreadsheetId =\n    bundle.authData.google_spreadsheet_id || bundle.inputData.spreadsheet_id;\n  const sheetName = 'Lead Scoring'; // Nombre específico de la hoja\n\n  if (!spreadsheetId) {\n    throw new Error('Google Spreadsheet ID is required');\n  }\n\n  // Calcular rango de tiempo para obtener solo filas recientes\n  const since = new Date();\n  since.setMinutes(since.getMinutes() - 15); // Últimos 15 minutos\n  const sinceTimestamp = since.getTime();\n\n  // URL del Google Sheets API para obtener valores\n  const range = `${sheetName}!A:Z`; // Obtener todas las columnas\n  const sheetsUrl = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${encodeURIComponent(range)}`;\n\n  const request = {\n    url: sheetsUrl,\n    method: 'GET' as const,\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n    },\n    params: {\n      valueRenderOption: 'UNFORMATTED_VALUE',\n      dateTimeRenderOption: 'FORMATTED_STRING',\n    },\n  };\n\n  try {\n    const response = await withRetry(() => z.request(request), 3);\n    const data = response.data;\n\n    if (!data.values || data.values.length === 0) {\n      await logZapAction(z, {\n        action: 'trigger_google_sheets_lead_scoring',\n        timestamp: new Date().toISOString(),\n        success: true,\n        data: {\n          spreadsheet_id: spreadsheetId,\n          sheet_name: sheetName,\n          rows_found: 0,\n          since_timestamp: sinceTimestamp,\n        },\n      });\n      return [];\n    }\n\n    const rows = data.values;\n    const headers = rows[0]; // Primera fila contiene los headers\n    const dataRows = rows.slice(1); // Resto son datos\n\n    // Encontrar índices de las columnas importantes\n    const emailIndex = headers.findIndex((h: string) =>\n      h.toLowerCase().includes('email')\n    );\n    const scoreIndex = headers.findIndex(\n      (h: string) =>\n        h.toLowerCase().includes('external_score') ||\n        h.toLowerCase().includes('score')\n    );\n    const timestampIndex = headers.findIndex(\n      (h: string) =>\n        h.toLowerCase().includes('timestamp') ||\n        h.toLowerCase().includes('date')\n    );\n    const nameIndex = headers.findIndex((h: string) =>\n      h.toLowerCase().includes('name')\n    );\n    const companyIndex = headers.findIndex((h: string) =>\n      h.toLowerCase().includes('company')\n    );\n    const sourceIndex = headers.findIndex((h: string) =>\n      h.toLowerCase().includes('source')\n    );\n\n    if (emailIndex === -1 || scoreIndex === -1) {\n      throw new Error(\n        'Required columns (email, external_score) not found in Lead Scoring sheet'\n      );\n    }\n\n    // Filtrar filas nuevas basado en timestamp\n    const newRows: GoogleSheetsLeadRow[] = [];\n\n    for (let i = 0; i < dataRows.length; i++) {\n      const row = dataRows[i];\n\n      // Verificar que la fila tiene datos\n      if (!row[emailIndex] || !row[scoreIndex]) {\n        continue;\n      }\n\n      // Verificar timestamp si está disponible\n      let isNew = true;\n      if (timestampIndex !== -1 && row[timestampIndex]) {\n        const rowTimestamp = new Date(row[timestampIndex]).getTime();\n        isNew = rowTimestamp > sinceTimestamp;\n      }\n\n      if (isNew) {\n        const leadRow: GoogleSheetsLeadRow = {\n          id: `sheet-row-${i + 2}`, // +2 porque empezamos desde fila 1 y saltamos header\n          email: row[emailIndex]?.toString() || '',\n          external_score: parseInt(row[scoreIndex]) || 0,\n          timestamp:\n            row[timestampIndex]?.toString() || new Date().toISOString(),\n          name: nameIndex !== -1 ? row[nameIndex]?.toString() : '',\n          company: companyIndex !== -1 ? row[companyIndex]?.toString() : '',\n          source: sourceIndex !== -1 ? row[sourceIndex]?.toString() : '',\n          raw_data: {\n            row_number: i + 2,\n            raw_values: row,\n            headers: headers,\n          },\n        };\n\n        newRows.push(leadRow);\n      }\n    }\n\n    // Log de la acción\n    await logZapAction(z, {\n      action: 'trigger_google_sheets_lead_scoring',\n      timestamp: new Date().toISOString(),\n      success: true,\n      data: {\n        spreadsheet_id: spreadsheetId,\n        sheet_name: sheetName,\n        total_rows: dataRows.length,\n        new_rows: newRows.length,\n        since_timestamp: sinceTimestamp,\n      },\n    });\n\n    return newRows;\n  } catch (error: any) {\n    // Log del error\n    await logZapAction(z, {\n      action: 'trigger_google_sheets_lead_scoring',\n      timestamp: new Date().toISOString(),\n      success: false,\n      error: error.message || 'Unknown error',\n      data: {\n        spreadsheet_id: spreadsheetId,\n        sheet_name: sheetName,\n        since_timestamp: sinceTimestamp,\n      },\n    });\n\n    z.console.error('Error fetching Google Sheets data:', error);\n    throw error;\n  }\n};\n\n/**\n * Configuración del trigger para nuevas filas en Google Sheets Lead Scoring\n */\nconst trigger: ZapierTrigger = {\n  key: 'new_google_sheets_lead_scoring',\n  noun: 'Google Sheets Lead Scoring Row',\n  display: {\n    label: 'New Lead Scoring Row in Google Sheets',\n    description:\n      'Triggers when a new row is added to the Lead Scoring sheet in Google Sheets',\n    important: true,\n  },\n  operation: {\n    type: 'polling',\n    perform: getNewLeadScoringRows,\n    sample: {\n      id: 'sheet-row-5',\n      email: 'john.doe@example.com',\n      external_score: 75,\n      timestamp: '2024-01-15T10:30:00Z',\n      name: 'John Doe',\n      company: 'Example Corp',\n      source: 'Website Form',\n    },\n    outputFields: [\n      { key: 'id', label: 'Row ID', type: 'string' },\n      { key: 'email', label: 'Email', type: 'string' },\n      { key: 'external_score', label: 'External Score', type: 'integer' },\n      { key: 'timestamp', label: 'Timestamp', type: 'datetime' },\n      { key: 'name', label: 'Name', type: 'string' },\n      { key: 'company', label: 'Company', type: 'string' },\n      { key: 'source', label: 'Source', type: 'string' },\n    ],\n  },\n};\n\nexport default trigger;\n"],"version":3}