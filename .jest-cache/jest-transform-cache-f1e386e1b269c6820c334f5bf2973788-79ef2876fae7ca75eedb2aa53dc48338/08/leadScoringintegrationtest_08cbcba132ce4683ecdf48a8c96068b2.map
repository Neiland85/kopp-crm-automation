{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/tests/leadScoring.integration.test.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/tests/leadScoring.integration.test.ts"],"sourcesContent":["import App from '../src/zapier/index';\nimport { withRetry } from '../src/zapier/utils/common';\n\n// Mock del logger\njest.mock('fs/promises');\n\n// Helper para crear mock bundle\nconst createMockBundle = (overrides = {}) => ({\n  authData: {\n    hubspot_api_key: 'test-hubspot-api-key',\n    slack_webhook_url: 'https://hooks.slack.com/services/test/webhook/url',\n  },\n  inputData: {},\n  cleanedRequest: {},\n  rawRequest: {},\n  ...overrides,\n});\n\n// Mock del objeto z (Zapier)\nconst createMockZ = () => ({\n  console: {\n    log: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n  },\n  errors: {\n    Error: Error,\n    RefreshAuthError: Error,\n    HaltedError: Error,\n  },\n  request: jest.fn(),\n  JSON: {\n    parse: JSON.parse,\n    stringify: JSON.stringify,\n  },\n  cursor: {\n    get: jest.fn().mockReturnValue(null),\n    store: jest.fn(),\n  },\n});\n\ndescribe('Lead Scoring Integration Tests', () => {\n  let mockZ: any;\n\n  beforeEach(() => {\n    mockZ = createMockZ();\n    jest.clearAllMocks();\n  });\n\n  describe('Updated Contact Property Trigger', () => {\n    test('should detect contacts with updated lead_score', async () => {\n      // Mock de respuesta de HubSpot API\n      const mockContactsResponse = {\n        status: 200,\n        data: {\n          results: [\n            {\n              id: 'contact-123',\n              properties: {\n                email: 'john.doe@example.com',\n                firstname: 'John',\n                lastname: 'Doe',\n                lead_score: '75',\n                last_score_update: '2024-01-15T09:00:00Z',\n                hs_lastmodifieddate: '2024-01-15T10:30:00Z',\n                company: 'Example Corp',\n                phone: '+1234567890',\n              },\n            },\n            {\n              id: 'contact-456',\n              properties: {\n                email: 'jane.smith@example.com',\n                firstname: 'Jane',\n                lastname: 'Smith',\n                lead_score: '45',\n                last_score_update: '2024-01-15T11:00:00Z',\n                hs_lastmodifieddate: '2024-01-15T10:30:00Z', // Older than last_score_update\n                company: 'Test Corp',\n              },\n            },\n          ],\n        },\n      };\n\n      mockZ.request.mockResolvedValue(mockContactsResponse);\n\n      const bundle = createMockBundle();\n      const trigger = App.triggers.updated_contact_property;\n\n      const results = await trigger.operation.perform(mockZ, bundle);\n\n      expect(results).toBeDefined();\n      expect(Array.isArray(results)).toBe(true);\n\n      // Solo debería retornar contact-123 porque su score fue actualizado después de last_score_update\n      expect(results.length).toBe(1);\n      expect(results[0]).toMatchObject({\n        id: 'contact-123',\n        email: 'john.doe@example.com',\n        lead_score: 75,\n        firstname: 'John',\n        lastname: 'Doe',\n      });\n\n      expect(mockZ.request).toHaveBeenCalledWith(\n        expect.objectContaining({\n          url: 'https://api.hubapi.com/crm/v3/objects/contacts/search',\n          method: 'POST',\n          headers: expect.objectContaining({\n            Authorization: 'Bearer test-hubspot-api-key',\n          }),\n        })\n      );\n    });\n\n    test('should handle empty results gracefully', async () => {\n      mockZ.request.mockResolvedValue({\n        status: 200,\n        data: { results: [] },\n      });\n\n      const bundle = createMockBundle();\n      const trigger = App.triggers.updated_contact_property;\n\n      const results = await trigger.operation.perform(mockZ, bundle);\n\n      expect(results).toEqual([]);\n    });\n\n    test('should retry on network failures', async () => {\n      mockZ.request\n        .mockRejectedValueOnce(new Error('Network timeout'))\n        .mockRejectedValueOnce(new Error('Connection refused'))\n        .mockResolvedValue({\n          status: 200,\n          data: { results: [] },\n        });\n\n      const bundle = createMockBundle();\n      const trigger = App.triggers.updated_contact_property;\n\n      const results = await trigger.operation.perform(mockZ, bundle);\n\n      expect(results).toEqual([]);\n      expect(mockZ.request).toHaveBeenCalledTimes(3); // 1 initial + 2 retries\n    });\n  });\n\n  describe('Update Score Timestamp Create Action', () => {\n    test('should update last_score_update timestamp', async () => {\n      const mockUpdateResponse = {\n        status: 200,\n        data: {\n          id: 'contact-123',\n          properties: {\n            email: 'john.doe@example.com',\n            lead_score: '75',\n            last_score_update: '2024-01-15T12:00:00Z',\n          },\n        },\n      };\n\n      mockZ.request.mockResolvedValue(mockUpdateResponse);\n\n      const bundle = createMockBundle({\n        inputData: {\n          contact_id: 'contact-123',\n          email: 'john.doe@example.com',\n          lead_score: 75,\n        },\n      });\n\n      const create = App.creates.update_score_timestamp;\n      const result = await create.operation.perform(mockZ, bundle);\n\n      expect(result).toMatchObject({\n        contact_id: 'contact-123',\n        email: 'john.doe@example.com',\n        lead_score: 75,\n        updated_properties: expect.arrayContaining([\n          'last_score_update',\n          'lead_score',\n        ]),\n      });\n\n      expect(mockZ.request).toHaveBeenCalledWith(\n        expect.objectContaining({\n          url: 'https://api.hubapi.com/crm/v3/objects/contacts/contact-123',\n          method: 'PATCH',\n          json: expect.objectContaining({\n            properties: expect.objectContaining({\n              last_score_update: expect.any(String),\n            }),\n          }),\n        })\n      );\n    });\n\n    test('should fail without contact_id', async () => {\n      const bundle = createMockBundle({\n        inputData: {\n          email: 'john.doe@example.com',\n          lead_score: 75,\n        },\n      });\n\n      const create = App.creates.update_score_timestamp;\n\n      await expect(create.operation.perform(mockZ, bundle)).rejects.toThrow(\n        'Contact ID is required'\n      );\n    });\n  });\n\n  describe('Send Scoring Notification Create Action', () => {\n    test('should send notification for score >= 50', async () => {\n      const mockSlackResponse = {\n        status: 200,\n        data: { ok: true },\n      };\n\n      mockZ.request.mockResolvedValue(mockSlackResponse);\n\n      const bundle = createMockBundle({\n        inputData: {\n          email: 'john.doe@example.com',\n          lead_score: 75,\n          firstname: 'John',\n          lastname: 'Doe',\n          company: 'Example Corp',\n          contact_id: 'contact-123',\n        },\n      });\n\n      const create = App.creates.send_scoring_notification;\n      const result = await create.operation.perform(mockZ, bundle);\n\n      expect(result.blocks).toBeDefined();\n      expect(result.blocks.length).toBeGreaterThan(0);\n      expect(result.channel).toBe('#scoring-leads');\n\n      // Verificar estructura del mensaje\n      expect(result.blocks[0]).toMatchObject({\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: '📈 *Lead Score Actualizado*',\n        },\n      });\n\n      expect(result.blocks[1].fields).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            text: expect.stringContaining('john.doe@example.com'),\n          }),\n          expect.objectContaining({\n            text: expect.stringContaining('75'),\n          }),\n        ])\n      );\n\n      expect(mockZ.request).toHaveBeenCalledWith(\n        expect.objectContaining({\n          url: 'https://hooks.slack.com/services/test/webhook/url',\n          method: 'POST',\n          json: expect.objectContaining({\n            blocks: expect.any(Array),\n            channel: '#scoring-leads',\n          }),\n        })\n      );\n    });\n\n    test('should skip notification for score < 50', async () => {\n      const bundle = createMockBundle({\n        inputData: {\n          email: 'john.doe@example.com',\n          lead_score: 35,\n          firstname: 'John',\n          lastname: 'Doe',\n        },\n      });\n\n      const create = App.creates.send_scoring_notification;\n      const result = (await create.operation.perform(mockZ, bundle)) as any;\n\n      expect(result.skipped).toBe(true);\n      expect(result.reason).toContain('below threshold');\n      expect(mockZ.request).not.toHaveBeenCalled();\n    });\n\n    test('should include score level for high scores', async () => {\n      const mockSlackResponse = {\n        status: 200,\n        data: { ok: true },\n      };\n\n      mockZ.request.mockResolvedValue(mockSlackResponse);\n\n      const bundle = createMockBundle({\n        inputData: {\n          email: 'hot.lead@example.com',\n          lead_score: 85,\n          firstname: 'Hot',\n          lastname: 'Lead',\n        },\n      });\n\n      const create = App.creates.send_scoring_notification;\n      const result = await create.operation.perform(mockZ, bundle);\n\n      // Buscar el bloque que contiene \"HOT LEAD\"\n      const scoreBlock = result.blocks.find((block: any) =>\n        block.text?.text?.includes('🔥 *HOT LEAD*')\n      );\n\n      expect(scoreBlock).toBeDefined();\n    });\n\n    test('should retry on Slack API failures', async () => {\n      mockZ.request\n        .mockRejectedValueOnce(new Error('Slack API timeout'))\n        .mockRejectedValueOnce(new Error('Service unavailable'))\n        .mockResolvedValue({\n          status: 200,\n          data: { ok: true },\n        });\n\n      const bundle = createMockBundle({\n        inputData: {\n          email: 'test@example.com',\n          lead_score: 60,\n        },\n      });\n\n      const create = App.creates.send_scoring_notification;\n      const result = await create.operation.perform(mockZ, bundle);\n\n      expect(result.blocks).toBeDefined();\n      expect(mockZ.request).toHaveBeenCalledTimes(3);\n    });\n  });\n\n  describe('Integration Workflow Tests', () => {\n    test('should complete full lead scoring workflow', async () => {\n      // Mock responses for the complete workflow\n      const mockSearchResponse = {\n        status: 200,\n        data: {\n          results: [\n            {\n              id: 'contact-123',\n              properties: {\n                email: 'workflow@example.com',\n                firstname: 'Workflow',\n                lastname: 'Test',\n                lead_score: '65',\n                last_score_update: '2024-01-15T09:00:00Z',\n                hs_lastmodifieddate: '2024-01-15T10:30:00Z',\n                company: 'Test Company',\n              },\n            },\n          ],\n        },\n      };\n\n      const mockUpdateResponse = {\n        status: 200,\n        data: {\n          id: 'contact-123',\n          properties: {\n            email: 'workflow@example.com',\n            lead_score: '65',\n            last_score_update: '2024-01-15T12:00:00Z',\n          },\n        },\n      };\n\n      const mockSlackResponse = {\n        status: 200,\n        data: { ok: true },\n      };\n\n      // Step 1: Trigger - Get updated contacts\n      mockZ.request.mockResolvedValueOnce(mockSearchResponse);\n\n      const bundle = createMockBundle();\n      const trigger = App.triggers.updated_contact_property;\n      const contacts = await trigger.operation.perform(mockZ, bundle);\n\n      expect(contacts.length).toBe(1);\n      const contact = contacts[0];\n\n      // Step 2: Update timestamp\n      mockZ.request.mockResolvedValueOnce(mockUpdateResponse);\n\n      const updateBundle = createMockBundle({\n        inputData: {\n          contact_id: contact.id,\n          email: contact.email,\n          lead_score: contact.lead_score,\n        },\n      });\n\n      const updateCreate = App.creates.update_score_timestamp;\n      const updateResult = await updateCreate.operation.perform(\n        mockZ,\n        updateBundle\n      );\n\n      expect(updateResult.contact_id).toBe('contact-123');\n\n      // Step 3: Send notification (score >= 50)\n      mockZ.request.mockResolvedValueOnce(mockSlackResponse);\n\n      const notificationBundle = createMockBundle({\n        inputData: {\n          email: contact.email,\n          lead_score: contact.lead_score,\n          firstname: contact.firstname,\n          lastname: contact.lastname,\n          company: contact.company,\n          contact_id: contact.id,\n        },\n      });\n\n      const notificationCreate = App.creates.send_scoring_notification;\n      const notificationResult = await notificationCreate.operation.perform(\n        mockZ,\n        notificationBundle\n      );\n\n      expect(notificationResult.blocks).toBeDefined();\n      expect(notificationResult.channel).toBe('#scoring-leads');\n\n      // Verify all API calls were made\n      expect(mockZ.request).toHaveBeenCalledTimes(3);\n    });\n  });\n\n  describe('Utility Function Tests', () => {\n    test('withRetry should handle exponential backoff', async () => {\n      const startTime = Date.now();\n      let attempts = 0;\n\n      const failingOperation = jest.fn(async () => {\n        attempts++;\n        if (attempts < 3) {\n          throw new Error('Network failure');\n        }\n        return 'success';\n      });\n\n      const result = await withRetry(failingOperation, 3, 50); // 50ms base delay\n\n      expect(result).toBe('success');\n      expect(attempts).toBe(3);\n      expect(failingOperation).toHaveBeenCalledTimes(3);\n\n      // Verify exponential backoff timing (approximate)\n      const totalTime = Date.now() - startTime;\n      expect(totalTime).toBeGreaterThan(100); // At least 50ms + 100ms delays\n    });\n\n    test('withRetry should fail after max retries', async () => {\n      const alwaysFailOperation = jest.fn(async () => {\n        throw new Error('Persistent failure');\n      });\n\n      await expect(withRetry(alwaysFailOperation, 2, 10)).rejects.toThrow(\n        'Persistent failure'\n      );\n\n      expect(alwaysFailOperation).toHaveBeenCalledTimes(3); // initial + 2 retries\n    });\n  });\n\n  describe('App Configuration Tests', () => {\n    test('should have correct trigger configuration', () => {\n      const trigger = App.triggers.updated_contact_property;\n\n      expect(trigger).toBeDefined();\n      expect(trigger.key).toBe('updated_contact_property');\n      expect(trigger.display.label).toBe(\n        'Updated Contact Property (Lead Score)'\n      );\n      expect(trigger.operation.type).toBe('polling');\n    });\n\n    test('should have correct create configurations', () => {\n      const updateCreate = App.creates.update_score_timestamp;\n      const notificationCreate = App.creates.send_scoring_notification;\n\n      expect(updateCreate.key).toBe('update_score_timestamp');\n      expect(notificationCreate.key).toBe('send_scoring_notification');\n\n      expect(updateCreate.display.label).toContain('Update Score Timestamp');\n      expect(notificationCreate.display.label).toContain(\n        'Lead Scoring Notification'\n      );\n    });\n\n    test('should have authentication configuration', () => {\n      expect(App.authentication).toBeDefined();\n      expect(App.authentication.type).toBe('custom');\n      expect(App.authentication.fields.length).toBeGreaterThan(0);\n\n      const apiKeyField = App.authentication.fields.find(\n        (f) => f.key === 'hubspot_api_key'\n      );\n      const webhookField = App.authentication.fields.find(\n        (f) => f.key === 'slack_webhook_url'\n      );\n\n      expect(apiKeyField).toBeDefined();\n      expect(webhookField).toBeDefined();\n      expect(apiKeyField?.required).toBe(true);\n      expect(webhookField?.required).toBe(true);\n    });\n  });\n});\n"],"version":3}