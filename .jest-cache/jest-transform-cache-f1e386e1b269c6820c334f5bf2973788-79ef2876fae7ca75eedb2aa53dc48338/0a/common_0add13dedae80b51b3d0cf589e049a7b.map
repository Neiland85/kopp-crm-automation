{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/utils/common.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/utils/common.ts"],"sourcesContent":["import fs from 'fs/promises';\nimport path from 'path';\n\n/**\n * Interface para los logs de acciones de Zap\n */\nexport interface ZapLogEntry {\n  action: string;\n  timestamp: string;\n  success: boolean;\n  error?: string;\n  data?: any;\n}\n\n/**\n * Función de reintento exponencial para operaciones HTTP\n */\nexport async function withRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error | null = null;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error as Error;\n\n      // Si es el último intento, lanzar el error\n      if (attempt === maxRetries) {\n        throw lastError;\n      }\n\n      // Calcular delay exponencial: baseDelay * 2^attempt\n      const delay = baseDelay * Math.pow(2, attempt);\n\n      // Esperar antes del siguiente intento\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n  }\n\n  throw lastError;\n}\n\n/**\n * Función para loguear acciones de Zap en formato JSON\n */\nexport async function logZapAction(\n  z: any,\n  logEntry: ZapLogEntry\n): Promise<void> {\n  try {\n    // Crear directorio de logs si no existe\n    const logsDir = path.join(process.cwd(), 'logs', 'zaps');\n    await fs.mkdir(logsDir, { recursive: true });\n\n    // Crear nombre de archivo con fecha\n    const date = new Date().toISOString().split('T')[0];\n    const logFile = path.join(logsDir, `${date}.json`);\n\n    // Leer logs existentes o crear array vacío\n    let existingLogs: ZapLogEntry[] = [];\n    try {\n      const existingContent = await fs.readFile(logFile, 'utf-8');\n      existingLogs = JSON.parse(existingContent);\n    } catch {\n      // Archivo no existe o está vacío, usar array vacío\n      existingLogs = [];\n    }\n\n    // Agregar nuevo log\n    existingLogs.push(logEntry);\n\n    // Escribir de vuelta al archivo\n    await fs.writeFile(logFile, JSON.stringify(existingLogs, null, 2));\n\n    // También loguear a la consola de Zapier para debugging\n    if (z && z.console) {\n      z.console.log('Zap Action Logged:', logEntry);\n    }\n  } catch (error) {\n    // Si falla el logging, no fallar la operación principal\n    console.error('Failed to log zap action:', error);\n    if (z && z.console) {\n      z.console.error('Failed to log zap action:', error);\n    }\n  }\n}\n\n/**\n * Función para validar email\n */\nexport function isValidEmail(email: string): boolean {\n  if (!email || typeof email !== 'string') {\n    return false;\n  }\n\n  // Regex para validar emails - más permisiva pero segura\n  const emailRegex =\n    /^[a-zA-Z0-9]([a-zA-Z0-9._+-]*[a-zA-Z0-9])?@[a-zA-Z0-9]([a-zA-Z0-9.-]*[a-zA-Z0-9])?\\.[a-zA-Z]{2,}$/;\n\n  // Verificar que no tenga dobles puntos consecutivos\n  if (email.includes('..')) {\n    return false;\n  }\n\n  // Verificar que no empiece o termine con punto antes del @\n  const parts = email.split('@');\n  if (parts.length !== 2) {\n    return false;\n  }\n\n  const localPart = parts[0];\n  if (localPart.startsWith('.') || localPart.endsWith('.')) {\n    return false;\n  }\n\n  return emailRegex.test(email);\n}\n\n/**\n * Función para limpiar y formatear nombres\n */\nexport function cleanName(name: string): string {\n  if (!name) return '';\n  return name.trim().replace(/\\s+/g, ' ');\n}\n\n/**\n * Función para formatear número de teléfono\n */\nexport function formatPhoneNumber(phone: string): string {\n  if (!phone) return '';\n  // Remover todos los caracteres no numéricos excepto +\n  return phone.replace(/[^\\d+]/g, '');\n}\n\n/**\n * Función para mapear campos de formulario a propiedades de HubSpot\n */\nexport function mapFormFieldsToHubSpot(formValues: any[]): Record<string, any> {\n  const mapping: Record<string, string> = {\n    email: 'email',\n    firstname: 'firstname',\n    first_name: 'firstname',\n    lastname: 'lastname',\n    last_name: 'lastname',\n    phone: 'phone',\n    company: 'company',\n    website: 'website',\n    jobtitle: 'jobtitle',\n    job_title: 'jobtitle',\n    city: 'city',\n    state: 'state',\n    country: 'country',\n    zip: 'zip',\n    postal_code: 'zip',\n  };\n\n  const properties: Record<string, any> = {};\n\n  formValues.forEach((field: any) => {\n    if (field.name && field.value) {\n      const hubspotProperty = mapping[field.name.toLowerCase()];\n      if (hubspotProperty) {\n        let value = field.value;\n\n        // Aplicar validaciones y formateo específico\n        if (hubspotProperty === 'email' && !isValidEmail(value)) {\n          return; // Skip invalid emails\n        }\n\n        if (hubspotProperty === 'firstname' || hubspotProperty === 'lastname') {\n          value = cleanName(value);\n        }\n\n        if (hubspotProperty === 'phone') {\n          value = formatPhoneNumber(value);\n        }\n\n        properties[hubspotProperty] = value;\n      }\n    }\n  });\n\n  return properties;\n}\n"],"version":3}