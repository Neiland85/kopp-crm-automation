{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/triggers/updatedContactProperty.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/triggers/updatedContactProperty.ts"],"sourcesContent":["import { HubSpotContact, ZapierTrigger, ZapierZ, ZapierBundle } from '../types';\nimport { withRetry, logZapAction } from '../utils/common';\n\n/**\n * Interface para el contacto con lead score actualizado\n */\ninterface ContactWithScore extends HubSpotContact {\n  id: string;\n  lead_score: number;\n  last_score_update?: string;\n  updated_at: string;\n}\n\n/**\n * Obtiene contactos con lead_score actualizado recientemente\n */\nconst getUpdatedContactProperty = async (\n  z: ZapierZ,\n  bundle: ZapierBundle\n): Promise<ContactWithScore[]> => {\n  const apiKey = bundle.authData.hubspot_api_key;\n\n  // Calcular timestamp para obtener solo actualizaciones recientes\n  const since = new Date();\n  since.setMinutes(since.getMinutes() - 15); // Últimos 15 minutos\n  const sinceTimestamp = since.getTime();\n\n  // Buscar contactos con lead_score actualizado recientemente\n  const searchUrl = 'https://api.hubapi.com/crm/v3/objects/contacts/search';\n\n  const searchRequest = {\n    url: searchUrl,\n    method: 'POST' as const,\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    },\n    json: {\n      filterGroups: [\n        {\n          filters: [\n            {\n              propertyName: 'lead_score',\n              operator: 'HAS_PROPERTY',\n            },\n            {\n              propertyName: 'hs_lastmodifieddate',\n              operator: 'GTE',\n              value: sinceTimestamp.toString(),\n            },\n          ],\n        },\n      ],\n      sorts: [\n        {\n          propertyName: 'hs_lastmodifieddate',\n          direction: 'DESCENDING',\n        },\n      ],\n      properties: [\n        'email',\n        'firstname',\n        'lastname',\n        'lead_score',\n        'last_score_update',\n        'hs_lastmodifieddate',\n        'company',\n        'phone',\n      ],\n      limit: 100,\n    },\n  };\n\n  try {\n    const response = await withRetry(() => z.request(searchRequest), 3);\n    const contacts = response.data?.results || [];\n\n    // Filtrar solo contactos donde lead_score fue actualizado recientemente\n    const updatedContacts = contacts.filter((contact: any) => {\n      const lastModified = new Date(contact.properties.hs_lastmodifieddate);\n      const scoreUpdateTime = contact.properties.last_score_update\n        ? new Date(contact.properties.last_score_update)\n        : new Date(0);\n\n      // Verificar si lead_score fue actualizado después de last_score_update\n      return lastModified > scoreUpdateTime;\n    });\n\n    // Log de la acción\n    await logZapAction(z, {\n      action: 'trigger_updated_contact_property',\n      timestamp: new Date().toISOString(),\n      success: true,\n      data: {\n        total_contacts: contacts.length,\n        updated_contacts: updatedContacts.length,\n        since_timestamp: sinceTimestamp,\n      },\n    });\n\n    // Transformar datos para Zapier\n    return updatedContacts.map((contact: any) => ({\n      id: contact.id,\n      email: contact.properties.email || '',\n      firstname: contact.properties.firstname || '',\n      lastname: contact.properties.lastname || '',\n      lead_score: parseInt(contact.properties.lead_score) || 0,\n      last_score_update: contact.properties.last_score_update || '',\n      company: contact.properties.company || '',\n      phone: contact.properties.phone || '',\n      updated_at: contact.properties.hs_lastmodifieddate,\n      raw_data: contact,\n    }));\n  } catch (error: any) {\n    // Log del error\n    await logZapAction(z, {\n      action: 'trigger_updated_contact_property',\n      timestamp: new Date().toISOString(),\n      success: false,\n      error: error.message || 'Unknown error',\n      data: {\n        since_timestamp: sinceTimestamp,\n      },\n    });\n\n    z.console.error('Error fetching updated contacts:', error);\n    throw error;\n  }\n};\n\n/**\n * Configuración del trigger para propiedades de contacto actualizadas\n */\nconst trigger: ZapierTrigger = {\n  key: 'updated_contact_property',\n  noun: 'Contact Property Update',\n  display: {\n    label: 'Updated Contact Property (Lead Score)',\n    description:\n      \"Triggers when a contact's lead_score property is updated in HubSpot\",\n    important: true,\n  },\n  operation: {\n    type: 'polling',\n    perform: getUpdatedContactProperty,\n    sample: {\n      id: 'contact-123456',\n      email: 'john.doe@example.com',\n      firstname: 'John',\n      lastname: 'Doe',\n      lead_score: 75,\n      last_score_update: '2024-01-15T09:00:00Z',\n      company: 'Example Corp',\n      phone: '+1234567890',\n      updated_at: '2024-01-15T10:30:00Z',\n    },\n    outputFields: [\n      { key: 'id', label: 'Contact ID', type: 'string' },\n      { key: 'email', label: 'Email', type: 'string' },\n      { key: 'firstname', label: 'First Name', type: 'string' },\n      { key: 'lastname', label: 'Last Name', type: 'string' },\n      { key: 'lead_score', label: 'Lead Score', type: 'integer' },\n      {\n        key: 'last_score_update',\n        label: 'Last Score Update',\n        type: 'datetime',\n      },\n      { key: 'company', label: 'Company', type: 'string' },\n      { key: 'phone', label: 'Phone', type: 'string' },\n      { key: 'updated_at', label: 'Updated At', type: 'datetime' },\n    ],\n  },\n};\n\nexport default trigger;\n"],"version":3}