e324d19d6a35cc34ea3e57d4148c5026
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('@slack/web-api');
globals_1.jest.mock('axios');
globals_1.jest.mock('../../utils/Logger');
const SlackHubspotService_1 = require("../../integrations/SlackHubspotService");
const ConfigManager_1 = require("../../config/ConfigManager");
const axios_1 = __importDefault(require("axios"));
const mockSlackClient = {
    conversations: {
        info: globals_1.jest.fn(),
    },
    users: {
        info: globals_1.jest.fn(),
    },
    chat: {
        postMessage: globals_1.jest.fn(),
    },
};
const mockConfig = new ConfigManager_1.ConfigManager();
// Set up environment variables
process.env.SLACK_BOT_TOKEN = 'test-slack-token';
process.env.HUBSPOT_API_KEY = 'test-hubspot-key';
(0, globals_1.describe)('SlackHubspotService', () => {
    let service;
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        // Mock WebClient constructor
        globals_1.jest
            .mocked(require('@slack/web-api').WebClient)
            .mockImplementation(() => mockSlackClient);
        service = new SlackHubspotService_1.SlackHubspotService(mockConfig);
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.resetAllMocks();
    });
    (0, globals_1.describe)('Constructor', () => {
        (0, globals_1.it)('should initialize successfully with valid configuration', () => {
            (0, globals_1.expect)(service).toBeInstanceOf(SlackHubspotService_1.SlackHubspotService);
        });
        (0, globals_1.it)('should throw error when SLACK_BOT_TOKEN is missing', () => {
            delete process.env.SLACK_BOT_TOKEN;
            (0, globals_1.expect)(() => {
                new SlackHubspotService_1.SlackHubspotService(mockConfig);
            }).toThrow('SLACK_BOT_TOKEN no encontrado en variables de entorno');
            // Restore for other tests
            process.env.SLACK_BOT_TOKEN = 'test-slack-token';
        });
        (0, globals_1.it)('should throw error when HUBSPOT_API_KEY is missing', () => {
            delete process.env.HUBSPOT_API_KEY;
            (0, globals_1.expect)(() => {
                new SlackHubspotService_1.SlackHubspotService(mockConfig);
            }).toThrow('HUBSPOT_API_KEY no encontrada en variables de entorno');
            // Restore for other tests
            process.env.HUBSPOT_API_KEY = 'test-hubspot-key';
        });
    });
    (0, globals_1.describe)('syncChannelMessagesToHubspot', () => {
        (0, globals_1.it)('should process messages from monitored channels', async () => {
            // Arrange
            const channelId = 'C1234567890';
            const message = {
                ts: '1634567890.123456',
                text: 'Test message from channel',
                user: 'U0987654321',
            };
            mockSlackClient.conversations.info.mockResolvedValue({
                channel: {
                    id: channelId,
                    name: 'growth-marketing',
                },
            });
            mockSlackClient.users.info.mockResolvedValue({
                user: {
                    id: 'U0987654321',
                    real_name: 'John Doe',
                    profile: {
                        email: 'john.doe@example.com',
                    },
                },
            });
            // Mock HubSpot search request
            globals_1.jest.mocked(axios_1.default.get).mockResolvedValue({
                data: {
                    results: [
                        {
                            id: '12345',
                            properties: {
                                email: 'john.doe@example.com',
                            },
                        },
                    ],
                },
            });
            // Mock HubSpot note creation
            globals_1.jest.mocked(axios_1.default.post).mockResolvedValue({
                data: { id: 'note_123' },
            });
            // Act
            await service.syncChannelMessagesToHubspot(channelId, message);
            // Assert
            (0, globals_1.expect)(mockSlackClient.conversations.info).toHaveBeenCalledWith({
                channel: channelId,
            });
            (0, globals_1.expect)(mockSlackClient.users.info).toHaveBeenCalledWith({
                user: message.user,
            });
            (0, globals_1.expect)(axios_1.default.get).toHaveBeenCalled();
            (0, globals_1.expect)(axios_1.default.post).toHaveBeenCalled();
        });
        (0, globals_1.it)('should ignore messages from non-monitored channels', async () => {
            // Arrange
            const channelId = 'C1234567890';
            const message = {
                ts: '1634567890.123456',
                text: 'Test message',
                user: 'U0987654321',
            };
            mockSlackClient.conversations.info.mockResolvedValue({
                channel: {
                    id: channelId,
                    name: 'random-channel', // Not monitored
                },
            });
            // Act
            await service.syncChannelMessagesToHubspot(channelId, message);
            // Assert
            (0, globals_1.expect)(mockSlackClient.conversations.info).toHaveBeenCalledWith({
                channel: channelId,
            });
            (0, globals_1.expect)(mockSlackClient.users.info).not.toHaveBeenCalled();
            (0, globals_1.expect)(axios_1.default.get).not.toHaveBeenCalled();
            (0, globals_1.expect)(axios_1.default.post).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should create new contact if not found in HubSpot', async () => {
            // Arrange
            const channelId = 'C1234567890';
            const message = {
                ts: '1634567890.123456',
                text: 'Test message from new user',
                user: 'U0987654321',
            };
            mockSlackClient.conversations.info.mockResolvedValue({
                channel: {
                    id: channelId,
                    name: 'soporte-y-clientes',
                },
            });
            mockSlackClient.users.info.mockResolvedValue({
                user: {
                    id: 'U0987654321',
                    real_name: 'Jane Smith',
                    profile: {
                        email: 'jane.smith@example.com',
                    },
                },
            });
            // Mock HubSpot search - no results
            globals_1.jest.mocked(axios_1.default.get).mockResolvedValue({
                data: {
                    results: [],
                },
            });
            // Mock HubSpot contact creation
            globals_1.jest.mocked(axios_1.default.post).mockResolvedValue({
                data: { id: 'contact_456' },
            });
            // Act
            await service.syncChannelMessagesToHubspot(channelId, message);
            // Assert
            (0, globals_1.expect)(axios_1.default.get).toHaveBeenCalled();
            (0, globals_1.expect)(axios_1.default.post).toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle user without email', async () => {
            // Arrange
            const channelId = 'C1234567890';
            const message = {
                ts: '1634567890.123456',
                text: 'Test message',
                user: 'U0987654321',
            };
            mockSlackClient.conversations.info.mockResolvedValue({
                channel: {
                    id: channelId,
                    name: 'growth-marketing',
                },
            });
            mockSlackClient.users.info.mockResolvedValue({
                user: {
                    id: 'U0987654321',
                    real_name: 'User Without Email',
                    profile: {
                    // No email field
                    },
                },
            });
            // Act
            await service.syncChannelMessagesToHubspot(channelId, message);
            // Assert
            (0, globals_1.expect)(mockSlackClient.users.info).toHaveBeenCalled();
            (0, globals_1.expect)(axios_1.default.get).not.toHaveBeenCalled();
            (0, globals_1.expect)(axios_1.default.post).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle Slack API errors gracefully', async () => {
            // Arrange
            const channelId = 'C1234567890';
            const message = {
                ts: '1634567890.123456',
                text: 'Test message',
                user: 'U0987654321',
            };
            mockSlackClient.conversations.info.mockRejectedValue(new Error('Slack API Error'));
            // Act & Assert
            await (0, globals_1.expect)(service.syncChannelMessagesToHubspot(channelId, message)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should handle HubSpot API errors gracefully', async () => {
            // Arrange
            const channelId = 'C1234567890';
            const message = {
                ts: '1634567890.123456',
                text: 'Test message',
                user: 'U0987654321',
            };
            mockSlackClient.conversations.info.mockResolvedValue({
                channel: {
                    id: channelId,
                    name: 'growth-marketing',
                },
            });
            mockSlackClient.users.info.mockResolvedValue({
                user: {
                    id: 'U0987654321',
                    real_name: 'John Doe',
                    profile: {
                        email: 'john.doe@example.com',
                    },
                },
            });
            globals_1.jest.mocked(axios_1.default.get).mockRejectedValue(new Error('HubSpot API Error'));
            // Act & Assert
            await (0, globals_1.expect)(service.syncChannelMessagesToHubspot(channelId, message)).resolves.not.toThrow();
        });
    });
    (0, globals_1.describe)('sendStageChangeNotification', () => {
        (0, globals_1.it)('should send notification when contact advances to new stage', async () => {
            // Arrange
            const contactData = {
                id: '12345',
                email: 'test@example.com',
                firstName: 'John',
                lastName: 'Doe',
                dealStage: 'negotiation',
                previousStage: 'qualification',
            };
            mockSlackClient.chat.postMessage.mockResolvedValue({
                ok: true,
                ts: '1634567890.123456',
            });
            // Act
            await service.sendStageChangeNotification(contactData);
            // Assert
            (0, globals_1.expect)(mockSlackClient.chat.postMessage).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                channel: globals_1.expect.any(String),
                blocks: globals_1.expect.any(Array),
            }));
        });
        (0, globals_1.it)('should handle Slack notification errors gracefully', async () => {
            // Arrange
            const contactData = {
                id: '12345',
                email: 'test@example.com',
                firstName: 'John',
                lastName: 'Doe',
                dealStage: 'closed-won',
                previousStage: 'negotiation',
            };
            mockSlackClient.chat.postMessage.mockRejectedValue(new Error('Slack API Error'));
            // Act & Assert
            await (0, globals_1.expect)(service.sendStageChangeNotification(contactData)).resolves.not.toThrow();
        });
    });
    (0, globals_1.describe)('testSlackConnection', () => {
        (0, globals_1.it)('should test Slack connection successfully', async () => {
            // Arrange
            mockSlackClient.conversations.info.mockResolvedValue({
                ok: true,
                channel: { id: 'C1234567890', name: 'general' },
            });
            // Act
            const result = await service.testSlackConnection();
            // Assert
            (0, globals_1.expect)(result).toHaveProperty('success', true);
            (0, globals_1.expect)(result).toHaveProperty('connected', true);
        });
        (0, globals_1.it)('should handle Slack connection failure', async () => {
            // Arrange
            mockSlackClient.conversations.info.mockRejectedValue(new Error('Connection failed'));
            // Act
            const result = await service.testSlackConnection();
            // Assert
            (0, globals_1.expect)(result).toHaveProperty('success', false);
            (0, globals_1.expect)(result).toHaveProperty('connected', false);
            (0, globals_1.expect)(result).toHaveProperty('error');
        });
    });
    (0, globals_1.describe)('testHubspotConnection', () => {
        (0, globals_1.it)('should test HubSpot connection successfully', async () => {
            // Arrange
            globals_1.jest.mocked(axios_1.default.get).mockResolvedValue({
                data: { portalId: 12345 },
            });
            // Act
            const result = await service.testHubspotConnection();
            // Assert
            (0, globals_1.expect)(result).toHaveProperty('success', true);
            (0, globals_1.expect)(result).toHaveProperty('connected', true);
        });
        (0, globals_1.it)('should handle HubSpot connection failure', async () => {
            // Arrange
            globals_1.jest.mocked(axios_1.default.get).mockRejectedValue(new Error('Unauthorized'));
            // Act
            const result = await service.testHubspotConnection();
            // Assert
            (0, globals_1.expect)(result).toHaveProperty('success', false);
            (0, globals_1.expect)(result).toHaveProperty('connected', false);
            (0, globals_1.expect)(result).toHaveProperty('error');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,