{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/__tests__/integrations/SlackHubspotService.test.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/__tests__/integrations/SlackHubspotService.test.ts"],"sourcesContent":["import { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { SlackHubspotService } from '../../integrations/SlackHubspotService';\nimport { ConfigManager } from '../../config/ConfigManager';\nimport axios from 'axios';\n\n// Mock dependencies\njest.mock('@slack/web-api');\njest.mock('axios');\njest.mock('../../utils/Logger');\n\nconst mockSlackClient = {\n  conversations: {\n    info: jest.fn() as jest.MockedFunction<any>,\n  },\n  users: {\n    info: jest.fn() as jest.MockedFunction<any>,\n  },\n  chat: {\n    postMessage: jest.fn() as jest.MockedFunction<any>,\n  },\n};\n\nconst mockConfig = new ConfigManager();\n\n// Set up environment variables\nprocess.env.SLACK_BOT_TOKEN = 'test-slack-token';\nprocess.env.HUBSPOT_API_KEY = 'test-hubspot-key';\n\ndescribe('SlackHubspotService', () => {\n  let service: SlackHubspotService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock WebClient constructor\n    jest\n      .mocked(require('@slack/web-api').WebClient)\n      .mockImplementation(() => mockSlackClient);\n\n    service = new SlackHubspotService(mockConfig);\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Constructor', () => {\n    it('should initialize successfully with valid configuration', () => {\n      expect(service).toBeInstanceOf(SlackHubspotService);\n    });\n\n    it('should throw error when SLACK_BOT_TOKEN is missing', () => {\n      delete process.env.SLACK_BOT_TOKEN;\n      \n      expect(() => {\n        new SlackHubspotService(mockConfig);\n      }).toThrow('SLACK_BOT_TOKEN no encontrado en variables de entorno');\n      \n      // Restore for other tests\n      process.env.SLACK_BOT_TOKEN = 'test-slack-token';\n    });\n\n    it('should throw error when HUBSPOT_API_KEY is missing', () => {\n      delete process.env.HUBSPOT_API_KEY;\n      \n      expect(() => {\n        new SlackHubspotService(mockConfig);\n      }).toThrow('HUBSPOT_API_KEY no encontrada en variables de entorno');\n      \n      // Restore for other tests\n      process.env.HUBSPOT_API_KEY = 'test-hubspot-key';\n    });\n  });\n\n  describe('syncChannelMessagesToHubspot', () => {\n    it('should process messages from monitored channels', async () => {\n      // Arrange\n      const channelId = 'C1234567890';\n      const message = {\n        ts: '1634567890.123456',\n        text: 'Test message from channel',\n        user: 'U0987654321',\n      };\n\n      mockSlackClient.conversations.info.mockResolvedValue({\n        channel: {\n          id: channelId,\n          name: 'growth-marketing',\n        },\n      });\n\n      mockSlackClient.users.info.mockResolvedValue({\n        user: {\n          id: 'U0987654321',\n          real_name: 'John Doe',\n          profile: {\n            email: 'john.doe@example.com',\n          },\n        },\n      });\n\n      // Mock HubSpot search request\n      jest.mocked(axios.get).mockResolvedValue({\n        data: {\n          results: [\n            {\n              id: '12345',\n              properties: {\n                email: 'john.doe@example.com',\n              },\n            },\n          ],\n        },\n      });\n\n      // Mock HubSpot note creation\n      jest.mocked(axios.post).mockResolvedValue({\n        data: { id: 'note_123' },\n      });\n\n      // Act\n      await service.syncChannelMessagesToHubspot(channelId, message);\n\n      // Assert\n      expect(mockSlackClient.conversations.info).toHaveBeenCalledWith({\n        channel: channelId,\n      });\n      expect(mockSlackClient.users.info).toHaveBeenCalledWith({\n        user: message.user,\n      });\n      expect(axios.get).toHaveBeenCalled();\n      expect(axios.post).toHaveBeenCalled();\n    });\n\n    it('should ignore messages from non-monitored channels', async () => {\n      // Arrange\n      const channelId = 'C1234567890';\n      const message = {\n        ts: '1634567890.123456',\n        text: 'Test message',\n        user: 'U0987654321',\n      };\n\n      mockSlackClient.conversations.info.mockResolvedValue({\n        channel: {\n          id: channelId,\n          name: 'random-channel', // Not monitored\n        },\n      });\n\n      // Act\n      await service.syncChannelMessagesToHubspot(channelId, message);\n\n      // Assert\n      expect(mockSlackClient.conversations.info).toHaveBeenCalledWith({\n        channel: channelId,\n      });\n      expect(mockSlackClient.users.info).not.toHaveBeenCalled();\n      expect(axios.get).not.toHaveBeenCalled();\n      expect(axios.post).not.toHaveBeenCalled();\n    });\n\n    it('should create new contact if not found in HubSpot', async () => {\n      // Arrange\n      const channelId = 'C1234567890';\n      const message = {\n        ts: '1634567890.123456',\n        text: 'Test message from new user',\n        user: 'U0987654321',\n      };\n\n      mockSlackClient.conversations.info.mockResolvedValue({\n        channel: {\n          id: channelId,\n          name: 'soporte-y-clientes',\n        },\n      });\n\n      mockSlackClient.users.info.mockResolvedValue({\n        user: {\n          id: 'U0987654321',\n          real_name: 'Jane Smith',\n          profile: {\n            email: 'jane.smith@example.com',\n          },\n        },\n      });\n\n      // Mock HubSpot search - no results\n      jest.mocked(axios.get).mockResolvedValue({\n        data: {\n          results: [],\n        },\n      });\n\n      // Mock HubSpot contact creation\n      jest.mocked(axios.post).mockResolvedValue({\n        data: { id: 'contact_456' },\n      });\n\n      // Act\n      await service.syncChannelMessagesToHubspot(channelId, message);\n\n      // Assert\n      expect(axios.get).toHaveBeenCalled();\n      expect(axios.post).toHaveBeenCalled();\n    });\n\n    it('should handle user without email', async () => {\n      // Arrange\n      const channelId = 'C1234567890';\n      const message = {\n        ts: '1634567890.123456',\n        text: 'Test message',\n        user: 'U0987654321',\n      };\n\n      mockSlackClient.conversations.info.mockResolvedValue({\n        channel: {\n          id: channelId,\n          name: 'growth-marketing',\n        },\n      });\n\n      mockSlackClient.users.info.mockResolvedValue({\n        user: {\n          id: 'U0987654321',\n          real_name: 'User Without Email',\n          profile: {\n            // No email field\n          },\n        },\n      });\n\n      // Act\n      await service.syncChannelMessagesToHubspot(channelId, message);\n\n      // Assert\n      expect(mockSlackClient.users.info).toHaveBeenCalled();\n      expect(axios.get).not.toHaveBeenCalled();\n      expect(axios.post).not.toHaveBeenCalled();\n    });\n\n    it('should handle Slack API errors gracefully', async () => {\n      // Arrange\n      const channelId = 'C1234567890';\n      const message = {\n        ts: '1634567890.123456',\n        text: 'Test message',\n        user: 'U0987654321',\n      };\n\n      mockSlackClient.conversations.info.mockRejectedValue(\n        new Error('Slack API Error')\n      );\n\n      // Act & Assert\n      await expect(\n        service.syncChannelMessagesToHubspot(channelId, message)\n      ).resolves.not.toThrow();\n    });\n\n    it('should handle HubSpot API errors gracefully', async () => {\n      // Arrange\n      const channelId = 'C1234567890';\n      const message = {\n        ts: '1634567890.123456',\n        text: 'Test message',\n        user: 'U0987654321',\n      };\n\n      mockSlackClient.conversations.info.mockResolvedValue({\n        channel: {\n          id: channelId,\n          name: 'growth-marketing',\n        },\n      });\n\n      mockSlackClient.users.info.mockResolvedValue({\n        user: {\n          id: 'U0987654321',\n          real_name: 'John Doe',\n          profile: {\n            email: 'john.doe@example.com',\n          },\n        },\n      });\n\n      jest.mocked(axios.get).mockRejectedValue(\n        new Error('HubSpot API Error')\n      );\n\n      // Act & Assert\n      await expect(\n        service.syncChannelMessagesToHubspot(channelId, message)\n      ).resolves.not.toThrow();\n    });\n  });\n\n  describe('sendStageChangeNotification', () => {\n    it('should send notification when contact advances to new stage', async () => {\n      // Arrange\n      const contactData = {\n        id: '12345',\n        email: 'test@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        dealStage: 'negotiation',\n        previousStage: 'qualification',\n      };\n\n      mockSlackClient.chat.postMessage.mockResolvedValue({\n        ok: true,\n        ts: '1634567890.123456',\n      });\n\n      // Act\n      await service.sendStageChangeNotification(contactData);\n\n      // Assert\n      expect(mockSlackClient.chat.postMessage).toHaveBeenCalledWith(\n        expect.objectContaining({\n          channel: expect.any(String),\n          blocks: expect.any(Array),\n        })\n      );\n    });\n\n    it('should handle Slack notification errors gracefully', async () => {\n      // Arrange\n      const contactData = {\n        id: '12345',\n        email: 'test@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        dealStage: 'closed-won',\n        previousStage: 'negotiation',\n      };\n\n      mockSlackClient.chat.postMessage.mockRejectedValue(\n        new Error('Slack API Error')\n      );\n\n      // Act & Assert\n      await expect(\n        service.sendStageChangeNotification(contactData)\n      ).resolves.not.toThrow();\n    });\n  });\n\n  describe('testSlackConnection', () => {\n    it('should test Slack connection successfully', async () => {\n      // Arrange\n      mockSlackClient.conversations.info.mockResolvedValue({\n        ok: true,\n        channel: { id: 'C1234567890', name: 'general' },\n      });\n\n      // Act\n      const result = await service.testSlackConnection();\n\n      // Assert\n      expect(result).toHaveProperty('success', true);\n      expect(result).toHaveProperty('connected', true);\n    });\n\n    it('should handle Slack connection failure', async () => {\n      // Arrange\n      mockSlackClient.conversations.info.mockRejectedValue(\n        new Error('Connection failed')\n      );\n\n      // Act\n      const result = await service.testSlackConnection();\n\n      // Assert\n      expect(result).toHaveProperty('success', false);\n      expect(result).toHaveProperty('connected', false);\n      expect(result).toHaveProperty('error');\n    });\n  });\n\n  describe('testHubspotConnection', () => {\n    it('should test HubSpot connection successfully', async () => {\n      // Arrange\n      jest.mocked(axios.get).mockResolvedValue({\n        data: { portalId: 12345 },\n      });\n\n      // Act\n      const result = await service.testHubspotConnection();\n\n      // Assert\n      expect(result).toHaveProperty('success', true);\n      expect(result).toHaveProperty('connected', true);\n    });\n\n    it('should handle HubSpot connection failure', async () => {\n      // Arrange\n      jest.mocked(axios.get).mockRejectedValue(\n        new Error('Unauthorized')\n      );\n\n      // Act\n      const result = await service.testHubspotConnection();\n\n      // Assert\n      expect(result).toHaveProperty('success', false);\n      expect(result).toHaveProperty('connected', false);\n      expect(result).toHaveProperty('error');\n    });\n  });\n});\n"],"version":3}