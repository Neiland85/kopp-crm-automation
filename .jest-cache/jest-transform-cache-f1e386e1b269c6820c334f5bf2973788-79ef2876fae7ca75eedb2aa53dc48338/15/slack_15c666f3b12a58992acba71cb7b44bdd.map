{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/routes/slack.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/routes/slack.ts"],"sourcesContent":["import express from 'express';\nimport { Request, Response } from 'express';\n\nconst router = express.Router();\n\n/**\n * @swagger\n * /slack/notify:\n *   post:\n *     tags: [Slack]\n *     summary: Enviar notificación a Slack\n *     description: |\n *       Envía una notificación personalizada a un canal de Slack específico.\n *\n *       **Características:**\n *       - 📢 Soporte para canales públicos y privados\n *       - 🎨 Formatting rico con Markdown\n *       - 📎 Attachments y botones interactivos\n *       - 🔔 Diferentes niveles de prioridad\n *       - 👥 Menciones a usuarios y grupos\n *\n *       **Niveles de prioridad:**\n *       - `low`: Notificación informativa\n *       - `medium`: Notificación estándar\n *       - `high`: Notificación importante (con ping)\n *       - `urgent`: Notificación crítica (con @channel)\n *     security:\n *       - slackAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/SlackMessage'\n *           examples:\n *             simple_message:\n *               summary: Mensaje simple\n *               value:\n *                 channel: \"#general\"\n *                 text: \"Nuevo lead generado desde el formulario web\"\n *                 priority: \"medium\"\n *             urgent_alert:\n *               summary: Alerta urgente\n *               value:\n *                 channel: \"#alerts\"\n *                 text: \"🚨 Lead de alta prioridad detectado - Score: 95/100\"\n *                 priority: \"urgent\"\n *                 attachments:\n *                   - color: \"danger\"\n *                     title: \"Lead Calificado\"\n *                     fields:\n *                       - title: \"Empresa\"\n *                         value: \"Acme Corp\"\n *                         short: true\n *                       - title: \"Score\"\n *                         value: \"95/100\"\n *                         short: true\n *             lead_notification:\n *               summary: Notificación de lead con datos\n *               value:\n *                 channel: \"#leads\"\n *                 text: \"🎯 Nuevo lead cualificado disponible\"\n *                 priority: \"high\"\n *                 attachments:\n *                   - color: \"good\"\n *                     title: \"Lead Información\"\n *                     fields:\n *                       - title: \"Nombre\"\n *                         value: \"Juan Pérez\"\n *                         short: true\n *                       - title: \"Email\"\n *                         value: \"juan.perez@acme.com\"\n *                         short: true\n *                       - title: \"Teléfono\"\n *                         value: \"+34 600 123 456\"\n *                         short: true\n *                       - title: \"Fuente\"\n *                         value: \"Formulario Web\"\n *                         short: true\n *                     actions:\n *                       - type: \"button\"\n *                         text: \"Ver en HubSpot\"\n *                         url: \"https://app.hubspot.com/contacts/...\"\n *                         style: \"primary\"\n *     responses:\n *       200:\n *         description: Notificación enviada exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 message:\n *                   type: string\n *                   example: \"Notificación enviada exitosamente\"\n *                 slack_response:\n *                   type: object\n *                   properties:\n *                     ok:\n *                       type: boolean\n *                     channel:\n *                       type: string\n *                     ts:\n *                       type: string\n *                     message:\n *                       type: object\n *             example:\n *               success: true\n *               message: \"Notificación enviada exitosamente\"\n *               slack_response:\n *                 ok: true\n *                 channel: \"C1234567890\"\n *                 ts: \"1234567890.123456\"\n *                 message:\n *                   text: \"Nuevo lead generado desde el formulario web\"\n *                   user: \"U1234567890\"\n *       400:\n *         $ref: '#/components/responses/BadRequest'\n *       401:\n *         $ref: '#/components/responses/Unauthorized'\n *       429:\n *         $ref: '#/components/responses/TooManyRequests'\n *       500:\n *         $ref: '#/components/responses/InternalError'\n */\nrouter.post('/notify', async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { channel, text, priority = 'medium', attachments = [] } = req.body;\n\n    // Validación básica\n    if (!channel || !text) {\n      res.status(400).json({\n        error: 'MISSING_REQUIRED_FIELDS',\n        message: 'Los campos channel y text son obligatorios',\n      });\n      return;\n    }\n\n    // Mock response - En producción aquí iría la integración real con Slack\n    const slackResponse = {\n      ok: true,\n      channel: 'C1234567890',\n      ts: `${Date.now() / 1000}.123456`,\n      message: {\n        text,\n        user: 'U1234567890',\n      },\n    };\n\n    res.json({\n      success: true,\n      message: 'Notificación enviada exitosamente',\n      slack_response: slackResponse,\n      priority,\n      attachments: attachments.length,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'SLACK_NOTIFICATION_FAILED',\n      message: error instanceof Error ? error.message : 'Error desconocido',\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n/**\n * @swagger\n * /slack/channels:\n *   get:\n *     tags: [Slack]\n *     summary: Listar canales de Slack disponibles\n *     description: |\n *       Obtiene la lista de canales de Slack disponibles para el bot.\n *\n *       **Incluye:**\n *       - 📢 Canales públicos accesibles\n *       - 🔒 Canales privados donde el bot está invitado\n *       - 👥 Información básica de cada canal\n *       - ✅ Estado de permisos del bot\n *\n *       > **Nota:** Solo se muestran canales donde el bot tiene permisos de escritura.\n *     security:\n *       - slackAuth: []\n *     parameters:\n *       - in: query\n *         name: types\n *         schema:\n *           type: string\n *           enum: [public_channel, private_channel, mpim, im]\n *         description: Tipo de canales a listar\n *         example: \"public_channel\"\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           minimum: 1\n *           maximum: 1000\n *           default: 100\n *         description: Número máximo de canales a retornar\n *     responses:\n *       200:\n *         description: Lista de canales obtenida exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 channels:\n *                   type: array\n *                   items:\n *                     type: object\n *                     properties:\n *                       id:\n *                         type: string\n *                         description: ID único del canal\n *                       name:\n *                         type: string\n *                         description: Nombre del canal\n *                       is_channel:\n *                         type: boolean\n *                         description: Si es un canal público\n *                       is_private:\n *                         type: boolean\n *                         description: Si es un canal privado\n *                       is_member:\n *                         type: boolean\n *                         description: Si el bot es miembro del canal\n *                       member_count:\n *                         type: integer\n *                         description: Número de miembros del canal\n *                       purpose:\n *                         type: string\n *                         description: Propósito del canal\n *                 total_count:\n *                   type: integer\n *                   description: Total de canales disponibles\n *             example:\n *               success: true\n *               channels:\n *                 - id: \"C1234567890\"\n *                   name: \"general\"\n *                   is_channel: true\n *                   is_private: false\n *                   is_member: true\n *                   member_count: 25\n *                   purpose: \"Canal general de la empresa\"\n *                 - id: \"C0987654321\"\n *                   name: \"leads\"\n *                   is_channel: true\n *                   is_private: false\n *                   is_member: true\n *                   member_count: 8\n *                   purpose: \"Notificaciones de leads\"\n *               total_count: 2\n *       401:\n *         $ref: '#/components/responses/Unauthorized'\n *       500:\n *         $ref: '#/components/responses/InternalError'\n */\nrouter.get('/channels', async (req: Request, res: Response) => {\n  try {\n    const { types = 'public_channel', limit = 100 } = req.query;\n\n    // Mock response - En producción aquí iría la integración real con Slack\n    const channels = [\n      {\n        id: 'C1234567890',\n        name: 'general',\n        is_channel: true,\n        is_private: false,\n        is_member: true,\n        member_count: 25,\n        purpose: 'Canal general de la empresa',\n      },\n      {\n        id: 'C0987654321',\n        name: 'leads',\n        is_channel: true,\n        is_private: false,\n        is_member: true,\n        member_count: 8,\n        purpose: 'Notificaciones de leads',\n      },\n      {\n        id: 'C1122334455',\n        name: 'alerts',\n        is_channel: true,\n        is_private: false,\n        is_member: true,\n        member_count: 12,\n        purpose: 'Alertas del sistema',\n      },\n    ];\n\n    res.json({\n      success: true,\n      channels,\n      total_count: channels.length,\n      filters: { types, limit },\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'SLACK_CHANNELS_FAILED',\n      message: error instanceof Error ? error.message : 'Error desconocido',\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n/**\n * @swagger\n * /slack/webhook:\n *   post:\n *     tags: [Slack]\n *     summary: Webhook para recibir eventos de Slack\n *     description: |\n *       Endpoint para recibir webhooks de Slack, incluyendo:\n *\n *       **Tipos de eventos soportados:**\n *       - 📝 `app_mention` - Menciones al bot\n *       - 📩 `message` - Mensajes en canales\n *       - 👥 `member_joined_channel` - Nuevos miembros\n *       - 🔔 `reaction_added` - Reacciones a mensajes\n *       - ⚙️ `app_home_opened` - Apertura del home del bot\n *\n *       **Verificación de seguridad:**\n *       - ✅ Validación de signature de Slack\n *       - 🕒 Verificación de timestamp\n *       - 🔒 Validación de token de aplicación\n *\n *       > **Nota:** Este endpoint debe configurarse en la aplicación de Slack como Event Subscription URL.\n *     security:\n *       - slackAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               token:\n *                 type: string\n *                 description: Token de verificación de Slack\n *               challenge:\n *                 type: string\n *                 description: Challenge para verificación de URL (solo en setup inicial)\n *               type:\n *                 type: string\n *                 enum: [url_verification, event_callback]\n *                 description: Tipo de webhook\n *               event:\n *                 type: object\n *                 description: Datos del evento (si type es event_callback)\n *                 properties:\n *                   type:\n *                     type: string\n *                     description: Tipo específico del evento\n *                   user:\n *                     type: string\n *                     description: ID del usuario que generó el evento\n *                   channel:\n *                     type: string\n *                     description: ID del canal donde ocurrió el evento\n *                   text:\n *                     type: string\n *                     description: Texto del mensaje (si aplica)\n *                   ts:\n *                     type: string\n *                     description: Timestamp del evento\n *           examples:\n *             url_verification:\n *               summary: Verificación inicial de URL\n *               value:\n *                 token: \"verification_token_here\"\n *                 challenge: \"challenge_string_here\"\n *                 type: \"url_verification\"\n *             app_mention:\n *               summary: Mención al bot\n *               value:\n *                 token: \"verification_token_here\"\n *                 type: \"event_callback\"\n *                 event:\n *                   type: \"app_mention\"\n *                   user: \"U1234567890\"\n *                   channel: \"C1234567890\"\n *                   text: \"<@U0987654321> help\"\n *                   ts: \"1234567890.123456\"\n *     responses:\n *       200:\n *         description: Webhook procesado exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 challenge:\n *                   type: string\n *                   description: Challenge devuelto para verificación (solo en url_verification)\n *                 success:\n *                   type: boolean\n *                   description: Si el evento fue procesado exitosamente\n *                 message:\n *                   type: string\n *                   description: Mensaje de confirmación\n *           examples:\n *             url_verification_response:\n *               summary: Respuesta a verificación de URL\n *               value:\n *                 challenge: \"challenge_string_here\"\n *             event_processed:\n *               summary: Evento procesado\n *               value:\n *                 success: true\n *                 message: \"Evento procesado exitosamente\"\n *       400:\n *         $ref: '#/components/responses/BadRequest'\n *       401:\n *         $ref: '#/components/responses/Unauthorized'\n *       500:\n *         $ref: '#/components/responses/InternalError'\n */\nrouter.post('/webhook', async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { token, challenge, type, event } = req.body;\n\n    // Verificación inicial de URL\n    if (type === 'url_verification') {\n      res.json({ challenge });\n      return;\n    }\n\n    // Validación de token (en producción se haría verificación de signature)\n    if (!token) {\n      res.status(401).json({\n        error: 'MISSING_TOKEN',\n        message: 'Token de verificación requerido',\n      });\n      return;\n    }\n\n    // Procesar evento de callback\n    if (type === 'event_callback' && event) {\n      console.log(`Received Slack event: ${event.type}`);\n\n      // Aquí iría la lógica específica para cada tipo de evento\n      switch (event.type) {\n        case 'app_mention':\n          console.log(\n            `Bot mentioned in channel ${event.channel} by user ${event.user}`\n          );\n          break;\n        case 'message':\n          console.log(`Message received in channel ${event.channel}`);\n          break;\n        default:\n          console.log(`Unhandled event type: ${event.type}`);\n      }\n\n      res.json({\n        success: true,\n        message: 'Evento procesado exitosamente',\n        event_type: event.type,\n      });\n      return;\n    }\n\n    res.status(400).json({\n      error: 'INVALID_WEBHOOK_TYPE',\n      message: 'Tipo de webhook no soportado',\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'WEBHOOK_PROCESSING_FAILED',\n      message: error instanceof Error ? error.message : 'Error desconocido',\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n/**\n * @swagger\n * /slack/message:\n *   post:\n *     tags: [Slack]\n *     summary: Enviar mensaje a Slack\n *     description: Envía un mensaje a un canal específico de Slack\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               channel:\n *                 type: string\n *                 description: Canal de destino\n *               text:\n *                 type: string\n *                 description: Texto del mensaje\n *               blocks:\n *                 type: array\n *                 description: Bloques de mensaje\n *     responses:\n *       200:\n *         description: Mensaje enviado exitosamente\n *       400:\n *         description: Datos inválidos\n *       500:\n *         description: Error interno\n */\nrouter.post('/message', async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { channel, text } = req.body;\n\n    // Validación básica\n    if (!channel || !text) {\n      res.status(400).json({\n        error: 'MISSING_REQUIRED_FIELDS',\n        message: 'Los campos channel y text son obligatorios',\n      });\n      return;\n    }\n\n    // Mock response - En producción aquí iría la integración real con Slack\n    const slackResponse = {\n      ok: true,\n      channel: 'C1234567890',\n      ts: `${Date.now() / 1000}.123456`,\n      message: {\n        text,\n        user: 'U1234567890',\n        ts: `${Date.now() / 1000}.123456`,\n      },\n    };\n\n    res.status(200).json({\n      success: true,\n      message: 'Mensaje enviado exitosamente',\n      data: slackResponse,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'SLACK_MESSAGE_FAILED',\n      message: error instanceof Error ? error.message : 'Error desconocido',\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n/**\n * @swagger\n * /slack/message/{ts}:\n *   put:\n *     tags: [Slack]\n *     summary: Actualizar mensaje de Slack\n *     description: Actualiza un mensaje existente en Slack\n *     parameters:\n *       - name: ts\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: Timestamp del mensaje\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               channel:\n *                 type: string\n *                 description: Canal del mensaje\n *               text:\n *                 type: string\n *                 description: Nuevo texto del mensaje\n *               blocks:\n *                 type: array\n *                 description: Nuevos bloques del mensaje\n *     responses:\n *       200:\n *         description: Mensaje actualizado exitosamente\n *       400:\n *         description: Datos inválidos\n *       404:\n *         description: Mensaje no encontrado\n *       500:\n *         description: Error interno\n */\nrouter.put('/message/:ts', async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { ts } = req.params;\n    const { channel, text } = req.body;\n\n    // Validación básica\n    if (!channel || !text) {\n      res.status(400).json({\n        error: 'MISSING_REQUIRED_FIELDS',\n        message: 'Los campos channel y text son obligatorios',\n      });\n      return;\n    }\n\n    // Mock response - En producción aquí iría la integración real con Slack\n    const slackResponse = {\n      ok: true,\n      channel: 'C1234567890',\n      ts: ts,\n      message: {\n        text,\n        user: 'U1234567890',\n        ts: ts,\n      },\n    };\n\n    res.status(200).json({\n      success: true,\n      message: 'Mensaje actualizado exitosamente',\n      data: slackResponse,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'SLACK_UPDATE_FAILED',\n      message: error instanceof Error ? error.message : 'Error desconocido',\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n/**\n * @swagger\n * /slack/message/{ts}:\n *   delete:\n *     tags: [Slack]\n *     summary: Eliminar mensaje de Slack\n *     description: Elimina un mensaje existente en Slack\n *     parameters:\n *       - name: ts\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: Timestamp del mensaje\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               channel:\n *                 type: string\n *                 description: Canal del mensaje\n *     responses:\n *       200:\n *         description: Mensaje eliminado exitosamente\n *       400:\n *         description: Datos inválidos\n *       404:\n *         description: Mensaje no encontrado\n *       500:\n *         description: Error interno\n */\nrouter.delete('/message/:ts', async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { ts } = req.params;\n    const { channel } = req.body;\n\n    // Validación básica\n    if (!channel) {\n      res.status(400).json({\n        error: 'MISSING_REQUIRED_FIELDS',\n        message: 'El campo channel es obligatorio',\n      });\n      return;\n    }\n\n    // Mock response - En producción aquí iría la integración real con Slack\n    const slackResponse = {\n      ok: true,\n      channel: 'C1234567890',\n      ts: ts,\n    };\n\n    res.status(200).json({\n      success: true,\n      message: 'Mensaje eliminado exitosamente',\n      data: slackResponse,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'SLACK_DELETE_FAILED',\n      message: error instanceof Error ? error.message : 'Error desconocido',\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n/**\n * @swagger  \n * /slack/users:\n *   get:\n *     tags: [Slack]\n *     summary: Obtener lista de usuarios de Slack\n *     description: Retorna la lista de usuarios del workspace de Slack\n *     parameters:\n *       - name: limit\n *         in: query\n *         schema:\n *           type: integer\n *           default: 100\n *         description: Número máximo de usuarios a retornar\n *       - name: include_deleted\n *         in: query\n *         schema:\n *           type: boolean\n *           default: false\n *         description: Incluir usuarios eliminados\n *     responses:\n *       200:\n *         description: Lista de usuarios obtenida exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 users:\n *                   type: array\n *                   items:\n *                     type: object\n *                     properties:\n *                       id:\n *                         type: string\n *                         example: \"U1234567890\"\n *                       name:\n *                         type: string\n *                         example: \"juan.perez\"\n *                       real_name:\n *                         type: string\n *                         example: \"Juan Pérez\"\n *                       email:\n *                         type: string\n *                         example: \"juan.perez@empresa.com\"\n *                       is_bot:\n *                         type: boolean\n *                         example: false\n *                       is_deleted:\n *                         type: boolean\n *                         example: false\n *                 total_count:\n *                   type: integer\n *                   example: 25\n *       500:\n *         description: Error interno del servidor\n */\nrouter.get('/users', async (req: Request, res: Response) => {\n  try {\n    const { limit = 100, include_deleted = false } = req.query;\n\n    // Mock response - En producción aquí iría la integración real con Slack\n    const users = [\n      {\n        id: 'U1234567890',\n        name: 'juan.perez',\n        real_name: 'Juan Pérez',\n        profile: {\n          email: 'juan.perez@empresa.com',\n          phone: '+34 600 123 456',\n          title: 'Marketing Manager',\n        },\n        is_bot: false,\n        is_deleted: false,\n        is_admin: false,\n        is_owner: false,\n      },\n      {\n        id: 'U0987654321',\n        name: 'maria.garcia',\n        real_name: 'María García',\n        profile: {\n          email: 'maria.garcia@empresa.com',\n          phone: '+34 600 789 012',\n          title: 'Sales Representative',\n        },\n        is_bot: false,\n        is_deleted: false,\n        is_admin: true,\n        is_owner: false,\n      },\n      {\n        id: 'U1122334455',\n        name: 'bot.assistant',\n        real_name: 'Assistant Bot',\n        profile: {\n          email: 'bot@empresa.com',\n          title: 'Automation Bot',\n        },\n        is_bot: true,\n        is_deleted: false,\n        is_admin: false,\n        is_owner: false,\n      },\n    ];\n\n    // Filtrar usuarios eliminados si no se requieren\n    const filteredUsers = include_deleted \n      ? users \n      : users.filter(user => !user.is_deleted);\n\n    res.json({\n      success: true,\n      users: filteredUsers.slice(0, Number(limit)),\n      total_count: filteredUsers.length,\n      filters: { limit, include_deleted },\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'SLACK_USERS_FAILED',\n      message: error instanceof Error ? error.message : 'Error desconocido',\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\nexport default router;\n"],"version":3}