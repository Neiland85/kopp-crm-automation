1f8e9cbfe65ad6e3dc4b3a4853d7f18c
"use strict";
/**
 * Sistema de logging para Kopp CRM Automation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class Logger {
    constructor(context, logLevel = 'info') {
        this.context = context;
        this.logLevel = logLevel;
        this.logDir = path.join(process.cwd(), 'logs');
        this.ensureLogDir();
    }
    ensureLogDir() {
        if (!fs.existsSync(this.logDir)) {
            fs.mkdirSync(this.logDir, { recursive: true });
        }
    }
    shouldLog(level) {
        const levels = ['debug', 'info', 'warn', 'error'];
        const currentLevelIndex = levels.indexOf(this.logLevel);
        const messageLevelIndex = levels.indexOf(level);
        return messageLevelIndex >= currentLevelIndex;
    }
    formatMessage(level, message, data) {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [${level.toUpperCase()}] [${this.context}] ${message}`;
        if (data) {
            return `${logMessage} ${JSON.stringify(data, null, 2)}`;
        }
        return logMessage;
    }
    writeToFile(message) {
        try {
            // Escribir a archivos específicos basado en el contexto
            const logFileName = this.getLogFileName();
            const logFile = path.join(this.logDir, logFileName);
            fs.appendFileSync(logFile, message + '\n');
        }
        catch (error) {
            console.error('Error writing to log file:', error);
        }
    }
    getLogFileName() {
        if (this.context.includes('reputometro')) {
            return 'reputometro.log';
        }
        else if (this.context.includes('hot-leads')) {
            return 'hot_leads.log';
        }
        else if (this.context.includes('recompensas-escasez') || this.context.includes('dropout')) {
            return 'recompensas.log';
        }
        else if (this.context.includes('integration')) {
            return 'integrations.log';
        }
        else {
            return 'general.log';
        }
    }
    info(message, data) {
        if (!this.shouldLog('info'))
            return;
        const formattedMessage = this.formatMessage('info', message, data);
        console.log(formattedMessage);
        this.writeToFile(formattedMessage);
    }
    error(message, data) {
        if (!this.shouldLog('error'))
            return;
        const formattedMessage = this.formatMessage('error', message, data);
        console.error(formattedMessage);
        this.writeToFile(formattedMessage);
    }
    warn(message, data) {
        if (!this.shouldLog('warn'))
            return;
        const formattedMessage = this.formatMessage('warn', message, data);
        console.warn(formattedMessage);
        this.writeToFile(formattedMessage);
    }
    debug(message, data) {
        if (!this.shouldLog('debug'))
            return;
        const formattedMessage = this.formatMessage('debug', message, data);
        console.debug(formattedMessage);
        this.writeToFile(formattedMessage);
    }
    // Método auxiliar para crear logger con contexto específico
    static create(context, logLevel) {
        return new Logger(context, logLevel);
    }
    // Método para logging de performance
    time(label) {
        console.time(`[${this.context}] ${label}`);
    }
    timeEnd(label) {
        console.timeEnd(`[${this.context}] ${label}`);
    }
}
exports.Logger = Logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,