{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/integrations/ZapierSlackService.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/integrations/ZapierSlackService.ts"],"sourcesContent":["import { WebClient } from '@slack/web-api';\nimport { Logger } from '../utils/Logger';\nimport { ConfigManager } from '../config/ConfigManager';\n\n/**\n * Servicio de integraci√≥n Zapier ‚Üí Slack\n * Maneja notificaciones desde Hubspot v√≠a Zapier hacia canales espec√≠ficos de Slack\n */\nexport class ZapierSlackService {\n  private slackClient: WebClient;\n  private logger: Logger;\n  private config: ConfigManager;\n  private zapierWebhookUrl: string;\n\n  constructor(config: ConfigManager) {\n    this.config = config;\n    this.logger = new Logger('ZapierSlackService');\n\n    const slackToken = process.env.SLACK_BOT_TOKEN;\n    if (!slackToken) {\n      throw new Error('SLACK_BOT_TOKEN no encontrado en variables de entorno');\n    }\n\n    this.slackClient = new WebClient(slackToken);\n    this.zapierWebhookUrl = process.env.ZAPIER_WEBHOOK_URL || '';\n\n    if (!this.zapierWebhookUrl) {\n      this.logger.error('ZAPIER_WEBHOOK_URL no configurada');\n    }\n  }\n\n  /**\n   * Env√≠a mensaje a canal #rituales-silenciosos cuando ritual_silencioso=true\n   */\n  async notifyRitualSilencioso(contactData: {\n    name: string;\n    email: string;\n    ritual_silencioso: boolean;\n    hubspot_contact_id: string;\n  }): Promise<void> {\n    try {\n      if (!contactData.ritual_silencioso) {\n        return;\n      }\n\n      const message = {\n        channel: '#rituales-silenciosos',\n        text: `üßò Nuevo ritual silencioso detectado`,\n        blocks: [\n          {\n            type: 'section',\n            text: {\n              type: 'mrkdwn',\n              text:\n                `*üßò Ritual Silencioso Activado*\\n\\n` +\n                `*Contacto:* ${contactData.name}\\n` +\n                `*Email:* ${contactData.email}\\n` +\n                `*ID Hubspot:* ${contactData.hubspot_contact_id}\\n\\n` +\n                `El contacto ha activado el modo ritual silencioso. ` +\n                `Se recomienda contacto m√≠nimo y espaciado.`,\n            },\n          },\n          {\n            type: 'actions',\n            elements: [\n              {\n                type: 'button',\n                text: {\n                  type: 'plain_text',\n                  text: 'Ver en Hubspot',\n                },\n                url: `https://app.hubspot.com/contacts/${process.env.HUBSPOT_PORTAL_ID}/contact/${contactData.hubspot_contact_id}`,\n                style: 'primary',\n              },\n            ],\n          },\n        ],\n      };\n\n      await this.slackClient.chat.postMessage(message);\n      this.logger.info('Notificaci√≥n de ritual silencioso enviada', {\n        contactId: contactData.hubspot_contact_id,\n      });\n    } catch (error) {\n      this.logger.error(\n        'Error enviando notificaci√≥n de ritual silencioso:',\n        { error }\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Notifica retornos imposibles cuando usuario_imposible=true\n   */\n  async notifyRetornoImposible(contactData: {\n    name: string;\n    email: string;\n    usuario_imposible: boolean;\n    hubspot_contact_id: string;\n    reason?: string;\n  }): Promise<void> {\n    try {\n      if (!contactData.usuario_imposible) {\n        return;\n      }\n\n      const message = {\n        channel: '#privado-retornos',\n        text: `‚ö†Ô∏è Usuario marcado como retorno imposible`,\n        blocks: [\n          {\n            type: 'section',\n            text: {\n              type: 'mrkdwn',\n              text:\n                `*‚ö†Ô∏è Retorno Imposible*\\n\\n` +\n                `*Contacto:* ${contactData.name}\\n` +\n                `*Email:* ${contactData.email}\\n` +\n                `*ID Hubspot:* ${contactData.hubspot_contact_id}\\n` +\n                (contactData.reason ? `*Raz√≥n:* ${contactData.reason}\\n` : '') +\n                `\\n‚ùå Este usuario ha sido marcado como retorno imposible. ` +\n                `No continuar esfuerzos de reactivaci√≥n.`,\n            },\n          },\n          {\n            type: 'actions',\n            elements: [\n              {\n                type: 'button',\n                text: {\n                  type: 'plain_text',\n                  text: 'Ver en Hubspot',\n                },\n                url: `https://app.hubspot.com/contacts/${process.env.HUBSPOT_PORTAL_ID}/contact/${contactData.hubspot_contact_id}`,\n                style: 'danger',\n              },\n              {\n                type: 'button',\n                text: {\n                  type: 'plain_text',\n                  text: 'Actualizar Estado',\n                },\n                action_id: 'update_impossible_user',\n              },\n            ],\n          },\n        ],\n      };\n\n      await this.slackClient.chat.postMessage(message);\n      this.logger.info('Notificaci√≥n de retorno imposible enviada', {\n        contactId: contactData.hubspot_contact_id,\n      });\n    } catch (error) {\n      this.logger.error(\n        'Error enviando notificaci√≥n de retorno imposible:',\n        { error }\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Webhook endpoint para recibir datos desde Zapier\n   */\n  async handleZapierWebhook(webhookData: any): Promise<void> {\n    try {\n      this.logger.info('Webhook recibido desde Zapier', webhookData);\n\n      // Procesar diferentes tipos de eventos\n      switch (webhookData.event_type) {\n        case 'ritual_silencioso':\n          await this.notifyRitualSilencioso(webhookData.contact);\n          break;\n\n        case 'usuario_imposible':\n          await this.notifyRetornoImposible(webhookData.contact);\n          break;\n\n        default:\n          this.logger.warn(\n            'Tipo de evento desconocido desde Zapier:',\n            webhookData.event_type\n          );\n      }\n    } catch (error) {\n      this.logger.error('Error procesando webhook de Zapier:', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Configurar webhooks en Slack si es necesario\n   */\n  async setupSlackWebhooks(): Promise<void> {\n    try {\n      // Verificar permisos del bot\n      const authTest = await this.slackClient.auth.test();\n      this.logger.info('Bot de Slack autenticado:', {\n        team: authTest.team,\n        user: authTest.user,\n        bot_id: authTest.bot_id,\n      });\n\n      // Verificar canales requeridos\n      const channels = ['rituales-silenciosos', 'privado-retornos'];\n      for (const channelName of channels) {\n        try {\n          const channel = await this.slackClient.conversations.list({\n            types: 'public_channel,private_channel',\n          });\n\n          const foundChannel = channel.channels?.find(\n            (c) => c.name === channelName\n          );\n          if (!foundChannel) {\n            this.logger.warn(\n              `Canal #${channelName} no encontrado. Debe ser creado manualmente.`\n            );\n          } else {\n            this.logger.info(`Canal #${channelName} encontrado`, {\n              id: foundChannel.id,\n            });\n          }\n        } catch (error) {\n          this.logger.error(`Error verificando canal #${channelName}:`, { error });\n        }\n      }\n    } catch (error) {\n      this.logger.error('Error configurando webhooks de Slack:', { error });\n      throw error;\n    }\n  }\n}\n"],"version":3}