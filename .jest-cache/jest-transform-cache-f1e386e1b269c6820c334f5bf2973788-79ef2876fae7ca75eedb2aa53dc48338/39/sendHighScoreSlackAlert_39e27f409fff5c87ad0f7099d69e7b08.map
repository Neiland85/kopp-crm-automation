{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/creates/sendHighScoreSlackAlert.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/creates/sendHighScoreSlackAlert.ts"],"sourcesContent":["import {\n  ZapierCreate,\n  ZapierZ,\n  ZapierBundle,\n  SlackMessage,\n  SlackBlock,\n} from '../types';\nimport { withRetry, logZapAction } from '../utils/common';\n\n/**\n * Interface para la respuesta de Slack\n */\ninterface SlackResponse {\n  ok: boolean;\n  channel: string;\n  ts: string;\n  message: {\n    text: string;\n    ts: string;\n  };\n}\n\n/**\n * Envía alerta a Slack cuando external_score > 50\n */\nconst sendHighScoreSlackAlert = async (\n  z: ZapierZ,\n  bundle: ZapierBundle\n): Promise<SlackResponse> => {\n  const { email, external_score, name, company, source } = bundle.inputData;\n\n  if (!email) {\n    throw new Error('Email is required to send Slack alert');\n  }\n\n  if (external_score === undefined || external_score === null) {\n    throw new Error('External score is required');\n  }\n\n  const scoreValue = parseInt(external_score.toString());\n\n  // Solo enviar alerta si el score es mayor a 50\n  if (scoreValue <= 50) {\n    z.console.log(\n      `External score ${scoreValue} is not greater than 50, skipping Slack alert`\n    );\n    return {\n      ok: true,\n      channel: '#scoring-leads',\n      ts: new Date().getTime().toString(),\n      message: {\n        text: 'Alert skipped - score not greater than 50',\n        ts: new Date().getTime().toString(),\n      },\n    };\n  }\n\n  const webhookUrl = bundle.authData.slack_webhook_url;\n\n  // Construir el mensaje con Block Kit\n  const blocks: SlackBlock[] = [\n    {\n      type: 'header',\n      text: {\n        type: 'plain_text',\n        text: '🚨 High Lead Score Alert',\n      },\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `A new lead with a high external score has been detected!`,\n      },\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*Email:*\\n${email}`,\n        },\n        {\n          type: 'mrkdwn',\n          text: `*External Score:*\\n${scoreValue}`,\n        },\n      ],\n    },\n  ];\n\n  // Agregar campos adicionales si están disponibles\n  if (name || company || source) {\n    const additionalFields: Array<{ type: string; text: string }> = [];\n\n    if (name) {\n      additionalFields.push({\n        type: 'mrkdwn',\n        text: `*Name:*\\n${name}`,\n      });\n    }\n\n    if (company) {\n      additionalFields.push({\n        type: 'mrkdwn',\n        text: `*Company:*\\n${company}`,\n      });\n    }\n\n    if (source) {\n      additionalFields.push({\n        type: 'mrkdwn',\n        text: `*Source:*\\n${source}`,\n      });\n    }\n\n    if (additionalFields.length > 0) {\n      blocks.push({\n        type: 'section',\n        fields: additionalFields,\n      });\n    }\n  }\n\n  // Agregar contexto con timestamp\n  blocks.push({\n    type: 'context',\n    elements: [\n      {\n        type: 'mrkdwn',\n        text: {\n          type: 'mrkdwn',\n          text: `🕐 Detected at ${new Date().toLocaleString()}`,\n        },\n      },\n    ],\n  });\n\n  // Agregar botones de acción\n  blocks.push({\n    type: 'actions',\n    elements: [\n      {\n        type: 'button',\n        text: {\n          type: 'plain_text',\n          text: 'View in HubSpot',\n          emoji: true,\n        },\n        style: 'primary',\n        url: `https://app.hubspot.com/contacts/search?query=${encodeURIComponent(email)}`,\n      },\n    ],\n  });\n\n  const slackMessage: SlackMessage = {\n    blocks: blocks,\n    username: 'Lead Scoring Bot',\n    icon_emoji: ':chart_with_upwards_trend:',\n    channel: '#scoring-leads',\n  };\n\n  const request = {\n    url: webhookUrl,\n    method: 'POST' as const,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    json: slackMessage,\n  };\n\n  try {\n    const response = await withRetry(() => z.request(request), 3);\n\n    // Slack webhook devuelve texto plano 'ok' en caso de éxito\n    const isSuccess = response.content === 'ok' || response.status === 200;\n\n    if (!isSuccess) {\n      throw new Error(\n        `Slack webhook returned: ${response.content || 'Unknown error'}`\n      );\n    }\n\n    const result: SlackResponse = {\n      ok: true,\n      channel: '#scoring-leads',\n      ts: new Date().getTime().toString(),\n      message: {\n        text: `High score alert sent for ${email}`,\n        ts: new Date().getTime().toString(),\n      },\n    };\n\n    // Log de la acción exitosa\n    await logZapAction(z, {\n      action: 'send_high_score_slack_alert',\n      timestamp: new Date().toISOString(),\n      success: true,\n      data: {\n        email: email,\n        external_score: scoreValue,\n        name: name || '',\n        company: company || '',\n        source: source || '',\n        channel: '#scoring-leads',\n      },\n    });\n\n    z.console.log(\n      `Successfully sent high score alert to Slack for ${email} (score: ${scoreValue})`\n    );\n    return result;\n  } catch (error: any) {\n    // Log del error\n    await logZapAction(z, {\n      action: 'send_high_score_slack_alert',\n      timestamp: new Date().toISOString(),\n      success: false,\n      error: error.message || 'Unknown error',\n      data: {\n        email: email,\n        external_score: scoreValue,\n        channel: '#scoring-leads',\n      },\n    });\n\n    z.console.error('Error sending high score Slack alert:', error);\n    throw error;\n  }\n};\n\n/**\n * Configuración del create para enviar alertas de Slack para scores altos\n */\nconst create: ZapierCreate = {\n  key: 'send_high_score_slack_alert',\n  noun: 'High Score Slack Alert',\n  display: {\n    label: 'Send High Score Alert to Slack',\n    description:\n      'Sends an alert to #scoring-leads Slack channel when external_score > 50',\n    important: true,\n  },\n  operation: {\n    perform: sendHighScoreSlackAlert,\n    inputFields: [\n      {\n        key: 'email',\n        label: 'Contact Email',\n        type: 'string',\n        required: true,\n        helpText: 'The email address of the contact',\n      },\n      {\n        key: 'external_score',\n        label: 'External Score',\n        type: 'integer',\n        required: true,\n        helpText: 'The external score value (alert sent only if > 50)',\n      },\n      {\n        key: 'name',\n        label: 'Contact Name',\n        type: 'string',\n        required: false,\n        helpText: 'The name of the contact (optional)',\n      },\n      {\n        key: 'company',\n        label: 'Company',\n        type: 'string',\n        required: false,\n        helpText: 'The company of the contact (optional)',\n      },\n      {\n        key: 'source',\n        label: 'Source',\n        type: 'string',\n        required: false,\n        helpText: 'The source of the lead (optional)',\n      },\n    ],\n    sample: {\n      ok: true,\n      channel: '#scoring-leads',\n      ts: '1642248600000',\n      message: {\n        text: 'High score alert sent for john.doe@example.com',\n        ts: '1642248600000',\n      },\n    },\n    outputFields: [\n      { key: 'ok', label: 'Success', type: 'boolean' },\n      { key: 'channel', label: 'Channel', type: 'string' },\n      { key: 'ts', label: 'Timestamp', type: 'string' },\n      { key: 'message.text', label: 'Message Text', type: 'string' },\n      { key: 'message.ts', label: 'Message Timestamp', type: 'string' },\n    ],\n  },\n};\n\nexport default create;\n"],"version":3}