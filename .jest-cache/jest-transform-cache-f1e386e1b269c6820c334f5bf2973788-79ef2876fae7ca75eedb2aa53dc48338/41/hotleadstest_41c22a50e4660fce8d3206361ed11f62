f428e5ca55f75190a5763bc9ac85d447
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock de dependencias
globals_1.jest.mock('@hubspot/api-client');
globals_1.jest.mock('@slack/web-api');
globals_1.jest.mock('../../../src/utils/Logger');
const handler_1 = require("../../../src/zaps/hot-leads/handler");
const Logger_1 = require("../../../src/utils/Logger");
/**
 * ðŸ§ª Tests de Hot Leads Detection
 *
 * Cobertura:
 * 1. Handler principal con datos mock
 * 2. ActualizaciÃ³n de lead_status en HubSpot
 * 3. EnvÃ­o de alertas a Slack
 * 4. Manejo de errores
 * 5. Retry con backoff exponencial
 * 6. ValidaciÃ³n de threshold
 */
const mockHubSpotClient = {
    crm: {
        contacts: {
            basicApi: {
                update: globals_1.jest.fn(),
            },
        },
    },
};
const mockSlackClient = {
    chat: {
        postMessage: globals_1.jest.fn(),
    },
};
const mockConfig = {
    hubspotApiKey: 'test-hubspot-key',
    slackBotToken: 'test-slack-token',
    slackSigningSecret: 'test-slack-secret',
    slackChannel: '#test-hot-leads',
    hotLeadThreshold: 40,
    isEnabled: true,
};
const mockTriggerData = {
    contactId: '12345',
    email: 'test@example.com',
    leadInfluenceScore: 45,
    previousScore: 30,
    timestamp: '2025-06-29T20:46:15.123Z',
    hubspotPortalId: 'portal123',
};
// Configurar mocks
(0, globals_1.beforeEach)(() => {
    globals_1.jest.clearAllMocks();
    // Mock HubSpot Client constructor
    globals_1.jest
        .mocked(require('@hubspot/api-client').Client)
        .mockImplementation(() => mockHubSpotClient);
    // Mock Slack WebClient constructor
    globals_1.jest
        .mocked(require('@slack/web-api').WebClient)
        .mockImplementation(() => mockSlackClient);
    // Mock Logger
    const mockLogger = {
        info: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
        debug: globals_1.jest.fn(),
    };
    globals_1.jest.mocked(Logger_1.Logger).mockImplementation(() => mockLogger);
});
(0, globals_1.afterEach)(() => {
    globals_1.jest.resetAllMocks();
});
(0, globals_1.describe)('Hot Leads Handler', () => {
    (0, globals_1.describe)('Procesamiento exitoso', () => {
        (0, globals_1.it)('should process hot lead successfully', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({
                ok: true,
                ts: '123456789',
            });
            // Act
            const result = await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            // Assert
            (0, globals_1.expect)(result).toMatchObject({
                contactId: '12345',
                email: 'test@example.com',
                previousScore: 30,
                newScore: 45,
                statusUpdated: true,
                slackMessageSent: true,
            });
            (0, globals_1.expect)(result.executionTimeMs).toBeGreaterThan(0);
            (0, globals_1.expect)(result.id).toMatch(/^hot-lead-/);
        });
        (0, globals_1.it)('should update HubSpot contact properties correctly', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            // Assert
            (0, globals_1.expect)(mockHubSpotClient.crm.contacts.basicApi.update).toHaveBeenCalledWith('12345', {
                properties: {
                    lead_status: 'Hot Lead',
                    last_hot_lead_detection: globals_1.expect.any(String),
                    hot_lead_trigger_score: '40+',
                },
            });
        });
        (0, globals_1.it)('should send correct Slack message format', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            // Assert
            const slackCall = mockSlackClient.chat.postMessage.mock.calls[0][0];
            (0, globals_1.expect)(slackCall.channel).toBe('#test-hot-leads');
            (0, globals_1.expect)(slackCall.text).toContain('ðŸš¨ Hot Lead Detectado');
            (0, globals_1.expect)(slackCall.text).toContain('test@example.com');
            (0, globals_1.expect)(slackCall.text).toContain('45');
            (0, globals_1.expect)(slackCall.blocks).toBeDefined();
            (0, globals_1.expect)(slackCall.blocks.length).toBeGreaterThan(0);
        });
    });
    (0, globals_1.describe)('Manejo de errores', () => {
        (0, globals_1.it)('should handle HubSpot API errors gracefully', async () => {
            // Arrange
            const hubspotError = new Error('HubSpot API error');
            mockHubSpotClient.crm.contacts.basicApi.update.mockRejectedValue(hubspotError);
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const result = await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            // Assert
            (0, globals_1.expect)(result.statusUpdated).toBe(false);
            (0, globals_1.expect)(result.slackMessageSent).toBe(true);
        });
        (0, globals_1.it)('should handle Slack API errors gracefully', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockRejectedValue(new Error('Slack API error'));
            // Act
            const result = await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            // Assert
            (0, globals_1.expect)(result.statusUpdated).toBe(true);
            (0, globals_1.expect)(result.slackMessageSent).toBe(false);
        });
        (0, globals_1.it)('should handle gracefully when both HubSpot and Slack fail', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.basicApi.update.mockRejectedValue(new Error('HubSpot error'));
            mockSlackClient.chat.postMessage.mockRejectedValue(new Error('Slack error'));
            // Act
            const result = await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            // Assert
            (0, globals_1.expect)(result.statusUpdated).toBe(false);
            (0, globals_1.expect)(result.slackMessageSent).toBe(false);
            (0, globals_1.expect)(result.contactId).toBe(mockTriggerData.contactId);
            (0, globals_1.expect)(result.email).toBe(mockTriggerData.email);
        });
    });
    (0, globals_1.describe)('Retry Logic', () => {
        (0, globals_1.it)('should retry HubSpot operations with exponential backoff', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.basicApi.update
                .mockRejectedValueOnce(new Error('Temporary failure'))
                .mockRejectedValueOnce(new Error('Temporary failure'))
                .mockResolvedValueOnce({ id: 'updated' });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const result = await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            // Assert
            (0, globals_1.expect)(mockHubSpotClient.crm.contacts.basicApi.update).toHaveBeenCalledTimes(3);
            (0, globals_1.expect)(result.statusUpdated).toBe(true);
        });
        (0, globals_1.it)('should fail after maximum retry attempts', async () => {
            // Arrange
            const persistentError = new Error('Persistent failure');
            mockHubSpotClient.crm.contacts.basicApi.update.mockRejectedValue(persistentError);
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const result = await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            // Assert
            (0, globals_1.expect)(mockHubSpotClient.crm.contacts.basicApi.update).toHaveBeenCalledTimes(3); // Default max retries
            (0, globals_1.expect)(result.statusUpdated).toBe(false);
            (0, globals_1.expect)(result.contactId).toBe(mockTriggerData.contactId);
            (0, globals_1.expect)(result.email).toBe(mockTriggerData.email);
        });
    });
    (0, globals_1.describe)('Slack Message Content', () => {
        (0, globals_1.it)('should include all required fields in Slack message', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            // Assert
            const slackCall = mockSlackClient.chat.postMessage.mock
                .calls[0][0];
            const messageText = JSON.stringify(slackCall.blocks);
            (0, globals_1.expect)(messageText).toContain('ðŸš¨ *Hot Lead Detectado*');
            (0, globals_1.expect)(messageText).toContain('test@example.com');
            (0, globals_1.expect)(messageText).toContain('30 â†’ 45');
            (0, globals_1.expect)(messageText).toContain('Seguimiento inmediato');
            (0, globals_1.expect)(messageText).toContain('Ver en HubSpot');
            (0, globals_1.expect)(messageText).toContain('Contactar Ahora');
        });
        (0, globals_1.it)('should handle cases without previous score', async () => {
            // Arrange
            const triggerDataWithoutPreviousScore = {
                ...mockTriggerData,
                previousScore: undefined,
            };
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            await (0, handler_1.hotLeadsHandler)(mockConfig, triggerDataWithoutPreviousScore);
            // Assert
            const slackCall = mockSlackClient.chat.postMessage.mock
                .calls[0][0];
            const messageText = JSON.stringify(slackCall.blocks);
            (0, globals_1.expect)(messageText).toContain('45');
            (0, globals_1.expect)(messageText).not.toContain('â†’');
        });
    });
    (0, globals_1.describe)('Performance', () => {
        (0, globals_1.it)('should complete execution within reasonable time', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const startTime = Date.now();
            const result = await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
            const actualExecutionTime = Date.now() - startTime;
            // Assert
            (0, globals_1.expect)(result.executionTimeMs).toBeLessThan(actualExecutionTime + 100);
            (0, globals_1.expect)(result.executionTimeMs).toBeGreaterThanOrEqual(0);
        });
    });
    (0, globals_1.describe)('Data Validation', () => {
        (0, globals_1.it)('should handle missing or invalid trigger data', async () => {
            // Arrange
            const invalidTriggerData = {
                contactId: '',
                email: '',
                leadInfluenceScore: NaN,
                previousScore: undefined,
                timestamp: '',
                hubspotPortalId: '',
            };
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const result = await (0, handler_1.hotLeadsHandler)(mockConfig, invalidTriggerData);
            // Assert
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.contactId).toBe('');
            (0, globals_1.expect)(result.email).toBe('');
        });
        (0, globals_1.it)('should handle edge case scores', async () => {
            // Arrange
            const edgeCaseTriggerData = {
                ...mockTriggerData,
                leadInfluenceScore: 999,
                previousScore: 0,
            };
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const result = await (0, handler_1.hotLeadsHandler)(mockConfig, edgeCaseTriggerData);
            // Assert
            (0, globals_1.expect)(result.newScore).toBe(999);
            (0, globals_1.expect)(result.previousScore).toBe(0);
        });
    });
});
(0, globals_1.describe)('Hot Leads Integration', () => {
    (0, globals_1.it)('should properly integrate with HubSpot and Slack APIs', async () => {
        // Arrange
        mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
            id: '12345',
            properties: {
                lead_status: 'Hot Lead',
                last_hot_lead_detection: globals_1.expect.any(String),
            },
        });
        mockSlackClient.chat.postMessage.mockResolvedValue({
            ok: true,
            ts: '123456789',
            channel: '#test-hot-leads',
        });
        // Act
        const result = await (0, handler_1.hotLeadsHandler)(mockConfig, mockTriggerData);
        // Assert
        (0, globals_1.expect)(result.statusUpdated).toBe(true);
        (0, globals_1.expect)(result.slackMessageSent).toBe(true);
        (0, globals_1.expect)(mockHubSpotClient.crm.contacts.basicApi.update).toHaveBeenCalledTimes(1);
        (0, globals_1.expect)(mockSlackClient.chat.postMessage).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,