a00164ffb0e8f79b6a53c90cde4ef3de
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock del logger
jest.mock('fs/promises');
const index_1 = __importDefault(require("../src/zapier/index"));
const common_1 = require("../src/zapier/utils/common");
describe('Form Submission Trigger', () => {
    test('should have correct trigger configuration', () => {
        const trigger = index_1.default.triggers.new_form_submission;
        expect(trigger).toBeDefined();
        expect(trigger.key).toBe('new_form_submission');
        expect(trigger.noun).toBe('Form Submission');
        expect(trigger.display.label).toBe('New Form Submission');
        expect(trigger.operation.type).toBe('polling');
        expect(typeof trigger.operation.perform).toBe('function');
    });
    test('should have correct output fields', () => {
        const trigger = index_1.default.triggers.new_form_submission;
        const outputFields = trigger.operation.outputFields;
        expect(outputFields).toBeDefined();
        expect(Array.isArray(outputFields)).toBe(true);
        const fieldKeys = outputFields?.map((field) => field.key) || [];
        expect(fieldKeys).toContain('id');
        expect(fieldKeys).toContain('contact_email');
        expect(fieldKeys).toContain('submitted_at');
        expect(fieldKeys).toContain('form_id');
    });
    test('should have sample data', () => {
        const trigger = index_1.default.triggers.new_form_submission;
        expect(trigger.operation.sample).toBeDefined();
        expect(trigger.operation.sample).toHaveProperty('id');
        expect(trigger.operation.sample).toHaveProperty('contact_email');
        expect(trigger.operation.sample).toHaveProperty('submitted_at');
    });
});
describe('Page View Trigger', () => {
    test('should have correct trigger configuration', () => {
        const trigger = index_1.default.triggers.new_page_view;
        expect(trigger).toBeDefined();
        expect(trigger.key).toBe('new_page_view');
        expect(trigger.noun).toBe('Page View');
        expect(trigger.display.label).toBe('New Page View');
        expect(trigger.operation.type).toBe('polling');
        expect(typeof trigger.operation.perform).toBe('function');
    });
    test('should have correct output fields', () => {
        const trigger = index_1.default.triggers.new_page_view;
        const outputFields = trigger.operation.outputFields;
        expect(outputFields).toBeDefined();
        expect(Array.isArray(outputFields)).toBe(true);
        const fieldKeys = outputFields?.map((field) => field.key) || [];
        expect(fieldKeys).toContain('id');
        expect(fieldKeys).toContain('page_url');
        expect(fieldKeys).toContain('timestamp');
    });
});
describe('HubSpot Contact Create Action', () => {
    test('should have correct create configuration', () => {
        const create = index_1.default.creates.hubspot_contact;
        expect(create).toBeDefined();
        expect(create.key).toBe('hubspot_contact');
        expect(create.noun).toBe('Contact');
        expect(create.display.label).toBe('Create or Update HubSpot Contact');
        expect(typeof create.operation.perform).toBe('function');
    });
    test('should have required input fields', () => {
        const create = index_1.default.creates.hubspot_contact;
        const inputFields = create.operation.inputFields;
        expect(inputFields).toBeDefined();
        expect(Array.isArray(inputFields)).toBe(true);
        const emailField = inputFields.find((field) => field.key === 'email');
        expect(emailField).toBeDefined();
        expect(emailField?.required).toBe(true);
        const fieldKeys = inputFields.map((field) => field.key);
        expect(fieldKeys).toContain('email');
        expect(fieldKeys).toContain('firstname');
        expect(fieldKeys).toContain('lastname');
        expect(fieldKeys).toContain('form_name');
        expect(fieldKeys).toContain('submitted_at');
    });
    test('should have sample output', () => {
        const create = index_1.default.creates.hubspot_contact;
        expect(create.operation.sample).toBeDefined();
        expect(create.operation.sample).toHaveProperty('email');
        expect(create.operation.sample).toHaveProperty('firstname');
        expect(create.operation.sample).toHaveProperty('lastname');
    });
});
describe('Slack Notification Create Action', () => {
    test('should have correct create configuration', () => {
        const create = index_1.default.creates.slack_notification;
        expect(create).toBeDefined();
        expect(create.key).toBe('slack_notification');
        expect(create.noun).toBe('Slack Message');
        expect(create.display.label).toBe('Send Slack Notification');
        expect(typeof create.operation.perform).toBe('function');
    });
    test('should have required input fields', () => {
        const create = index_1.default.creates.slack_notification;
        const inputFields = create.operation.inputFields;
        expect(inputFields).toBeDefined();
        expect(Array.isArray(inputFields)).toBe(true);
        const emailField = inputFields.find((field) => field.key === 'email');
        expect(emailField).toBeDefined();
        expect(emailField?.required).toBe(true);
        const fieldKeys = inputFields.map((field) => field.key);
        expect(fieldKeys).toContain('email');
        expect(fieldKeys).toContain('form_name');
        expect(fieldKeys).toContain('submitted_at');
    });
    test('should have sample output with Block Kit format', () => {
        const create = index_1.default.creates.slack_notification;
        expect(create.operation.sample).toBeDefined();
        expect(create.operation.sample).toHaveProperty('blocks');
        expect(Array.isArray(create.operation.sample.blocks)).toBe(true);
        const firstBlock = create.operation.sample.blocks[0];
        expect(firstBlock).toHaveProperty('type', 'section');
        expect(firstBlock).toHaveProperty('text');
        expect(firstBlock.text).toHaveProperty('type', 'mrkdwn');
        expect(firstBlock.text.text).toContain('ðŸ“© *Nuevo Form Submission*');
    });
});
describe('App Authentication', () => {
    test('should have custom authentication configuration', () => {
        expect(index_1.default.authentication).toBeDefined();
        expect(index_1.default.authentication.type).toBe('custom');
        expect(index_1.default.authentication.fields).toBeDefined();
        expect(Array.isArray(index_1.default.authentication.fields)).toBe(true);
        const fieldKeys = index_1.default.authentication.fields.map((field) => field.key);
        expect(fieldKeys).toContain('hubspot_api_key');
        expect(fieldKeys).toContain('slack_webhook_url');
    });
    test('should have authentication test endpoint', () => {
        expect(index_1.default.authentication.test).toBeDefined();
        expect(index_1.default.authentication.test.url).toContain('hubapi.com');
        expect(index_1.default.authentication.test.method).toBe('GET');
    });
});
describe('App Middleware', () => {
    test('should have beforeRequest middleware', () => {
        expect(index_1.default.beforeRequest).toBeDefined();
        expect(Array.isArray(index_1.default.beforeRequest)).toBe(true);
        expect(index_1.default.beforeRequest.length).toBeGreaterThan(0);
        expect(typeof index_1.default.beforeRequest[0]).toBe('function');
    });
    test('should have afterResponse middleware', () => {
        expect(index_1.default.afterResponse).toBeDefined();
        expect(Array.isArray(index_1.default.afterResponse)).toBe(true);
        expect(index_1.default.afterResponse.length).toBeGreaterThan(0);
        expect(typeof index_1.default.afterResponse[0]).toBe('function');
    });
});
describe('Utility Functions', () => {
    test('withRetry should handle failures and retries', async () => {
        let attempts = 0;
        const flakyOperation = jest.fn(async () => {
            attempts++;
            if (attempts < 3) {
                throw new Error('Temporary failure');
            }
            return 'success';
        });
        const result = await (0, common_1.withRetry)(flakyOperation, 3, 10);
        expect(result).toBe('success');
        expect(attempts).toBe(3);
        expect(flakyOperation).toHaveBeenCalledTimes(3);
    });
    test('withRetry should fail after max retries', async () => {
        const alwaysFailOperation = jest.fn(async () => {
            throw new Error('Always fails');
        });
        await expect((0, common_1.withRetry)(alwaysFailOperation, 2, 10)).rejects.toThrow('Always fails');
        expect(alwaysFailOperation).toHaveBeenCalledTimes(3); // initial + 2 retries
    });
    test('mapFormFieldsToHubSpot should map form fields correctly', () => {
        const formValues = [
            { name: 'email', value: 'test@example.com' },
            { name: 'first_name', value: 'John' },
            { name: 'last_name', value: 'Doe' },
            { name: 'phone', value: '+1-234-567-8900' },
            { name: 'company', value: 'Test Corp' },
        ];
        const mapped = (0, common_1.mapFormFieldsToHubSpot)(formValues);
        expect(mapped).toHaveProperty('email', 'test@example.com');
        expect(mapped).toHaveProperty('firstname', 'John');
        expect(mapped).toHaveProperty('lastname', 'Doe');
        expect(mapped).toHaveProperty('phone', '+12345678900');
        expect(mapped).toHaveProperty('company', 'Test Corp');
    });
    test('mapFormFieldsToHubSpot should skip invalid emails', () => {
        const formValues = [
            { name: 'email', value: 'invalid-email' },
            { name: 'firstname', value: 'John' },
        ];
        const mapped = (0, common_1.mapFormFieldsToHubSpot)(formValues);
        expect(mapped).not.toHaveProperty('email');
        expect(mapped).toHaveProperty('firstname', 'John');
    });
    test('isValidEmail should validate email addresses correctly', () => {
        expect((0, common_1.isValidEmail)('test@example.com')).toBe(true);
        expect((0, common_1.isValidEmail)('user.name+tag@example.co.uk')).toBe(true);
        expect((0, common_1.isValidEmail)('invalid-email')).toBe(false);
        expect((0, common_1.isValidEmail)('')).toBe(false);
        expect((0, common_1.isValidEmail)('test@')).toBe(false);
        expect((0, common_1.isValidEmail)('@example.com')).toBe(false);
        expect((0, common_1.isValidEmail)('test..test@example.com')).toBe(false);
    });
    test('logZapAction should handle logging gracefully', async () => {
        const mockZ = {
            console: {
                log: jest.fn(),
                error: jest.fn(),
            },
        };
        // Should not throw even if logging fails
        await expect((0, common_1.logZapAction)(mockZ, {
            action: 'test_action',
            timestamp: new Date().toISOString(),
            success: true,
            data: { test: 'data' },
        })).resolves.not.toThrow();
        expect(mockZ.console.log).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,