{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/creates/slackNotification.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/creates/slackNotification.ts"],"sourcesContent":["import { SlackMessage, ZapierCreate, ZapierZ, ZapierBundle } from '../types';\nimport { withRetry, logZapAction } from '../utils/common';\n\n/**\n * Envía una notificación a Slack usando Block Kit\n */\nconst sendSlackNotification = async (\n  z: ZapierZ,\n  bundle: ZapierBundle\n): Promise<SlackMessage> => {\n  const webhookUrl = bundle.authData.slack_webhook_url;\n  const input = bundle.inputData;\n\n  // Crear el mensaje con Block Kit según el formato especificado\n  const slackMessage: SlackMessage = {\n    blocks: [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: '📩 *Nuevo Form Submission*',\n        },\n      },\n      {\n        type: 'section',\n        fields: [\n          {\n            type: 'mrkdwn',\n            text: `*Usuario:* ${input.email || 'No especificado'}`,\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Formulario:* ${input.form_name || input.form_id || 'No especificado'}`,\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Fecha:* ${input.submitted_at || new Date().toISOString()}`,\n          },\n        ],\n      },\n    ],\n    username: 'Zapier Integration',\n    icon_emoji: ':zap:',\n    channel: '#automations-alerts',\n  };\n\n  // Agregar campos adicionales si están disponibles\n  if (input.firstname || input.lastname) {\n    const fullName = [input.firstname, input.lastname]\n      .filter(Boolean)\n      .join(' ');\n    if (fullName) {\n      slackMessage.blocks[1].fields?.push({\n        type: 'mrkdwn',\n        text: `*Nombre Completo:* ${fullName}`,\n      });\n    }\n  }\n\n  if (input.company) {\n    slackMessage.blocks[1].fields?.push({\n      type: 'mrkdwn',\n      text: `*Empresa:* ${input.company}`,\n    });\n  }\n\n  if (input.phone) {\n    slackMessage.blocks[1].fields?.push({\n      type: 'mrkdwn',\n      text: `*Teléfono:* ${input.phone}`,\n    });\n  }\n\n  if (input.page_url) {\n    slackMessage.blocks[1].fields?.push({\n      type: 'mrkdwn',\n      text: `*Página:* <${input.page_url}|${input.page_title || 'Ver página'}>`,\n    });\n  }\n\n  // Si hay muchos campos, agregar un bloque adicional\n  if (\n    slackMessage.blocks[1].fields &&\n    slackMessage.blocks[1].fields.length > 6\n  ) {\n    const extraFields = slackMessage.blocks[1].fields.splice(6);\n    slackMessage.blocks.push({\n      type: 'section',\n      fields: extraFields,\n    });\n  }\n\n  // Agregar un divisor y un botón de acción si hay información del contacto\n  if (input.email) {\n    slackMessage.blocks.push({\n      type: 'divider',\n    } as any);\n\n    slackMessage.blocks.push({\n      type: 'actions',\n      elements: [\n        {\n          type: 'button',\n          text: {\n            type: 'plain_text',\n            text: 'Ver en HubSpot',\n            emoji: true,\n          },\n          style: 'primary',\n          url: `https://app.hubspot.com/contacts/search?term=${encodeURIComponent(input.email)}`,\n        },\n      ],\n    } as any);\n  }\n\n  const request = {\n    url: webhookUrl,\n    method: 'POST' as const,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    json: slackMessage,\n  };\n\n  try {\n    const response = await withRetry(() => z.request(request), 3);\n\n    // Log de la acción exitosa\n    await logZapAction(z, {\n      action: 'send_slack_notification',\n      timestamp: new Date().toISOString(),\n      success: true,\n      data: {\n        email: input.email,\n        form_name: input.form_name,\n        channel: '#automations-alerts',\n        blocks_count: slackMessage.blocks.length,\n      },\n    });\n\n    // Verificar que el mensaje se envió correctamente\n    if (response.status >= 200 && response.status < 300) {\n      return slackMessage;\n    } else {\n      throw new Error(\n        `Slack API returned status ${response.status}: ${response.content}`\n      );\n    }\n  } catch (error: any) {\n    // Log del error\n    await logZapAction(z, {\n      action: 'send_slack_notification',\n      timestamp: new Date().toISOString(),\n      success: false,\n      error: error.message || 'Unknown error',\n      data: {\n        email: input.email,\n        form_name: input.form_name,\n        webhook_url: webhookUrl.replace(/\\/[^/]*$/, '/***'), // Ocultar token del webhook\n      },\n    });\n\n    z.console.error('Error sending Slack notification:', error);\n    throw error;\n  }\n};\n\n/**\n * Configuración del create action para notificaciones de Slack\n */\nconst create: ZapierCreate = {\n  key: 'slack_notification',\n  noun: 'Slack Message',\n  display: {\n    label: 'Send Slack Notification',\n    description: 'Sends a formatted notification to Slack using Block Kit',\n    important: true,\n  },\n  operation: {\n    perform: sendSlackNotification,\n    inputFields: [\n      {\n        key: 'email',\n        label: 'Email',\n        type: 'string',\n        required: true,\n        helpText: 'The email address from the form submission',\n      },\n      {\n        key: 'form_name',\n        label: 'Form Name',\n        type: 'string',\n        required: false,\n        helpText: 'The name of the form that was submitted',\n      },\n      {\n        key: 'form_id',\n        label: 'Form ID',\n        type: 'string',\n        required: false,\n        helpText:\n          'The ID of the form that was submitted (fallback if no form_name)',\n      },\n      {\n        key: 'submitted_at',\n        label: 'Submitted At',\n        type: 'datetime',\n        required: false,\n        helpText: 'When the form was submitted',\n      },\n      {\n        key: 'firstname',\n        label: 'First Name',\n        type: 'string',\n        required: false,\n        helpText: 'The first name of the contact',\n      },\n      {\n        key: 'lastname',\n        label: 'Last Name',\n        type: 'string',\n        required: false,\n        helpText: 'The last name of the contact',\n      },\n      {\n        key: 'company',\n        label: 'Company',\n        type: 'string',\n        required: false,\n        helpText: 'The company name of the contact',\n      },\n      {\n        key: 'phone',\n        label: 'Phone',\n        type: 'string',\n        required: false,\n        helpText: 'The phone number of the contact',\n      },\n      {\n        key: 'page_url',\n        label: 'Page URL',\n        type: 'string',\n        required: false,\n        helpText: 'The URL of the page where the form was submitted',\n      },\n      {\n        key: 'page_title',\n        label: 'Page Title',\n        type: 'string',\n        required: false,\n        helpText: 'The title of the page where the form was submitted',\n      },\n    ],\n    sample: {\n      blocks: [\n        {\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: '📩 *Nuevo Form Submission*',\n          },\n        },\n        {\n          type: 'section',\n          fields: [\n            {\n              type: 'mrkdwn',\n              text: '*Usuario:* john.doe@example.com',\n            },\n            {\n              type: 'mrkdwn',\n              text: '*Formulario:* Contact Form',\n            },\n            {\n              type: 'mrkdwn',\n              text: '*Fecha:* 2024-01-15T10:30:00Z',\n            },\n          ],\n        },\n      ],\n      username: 'Zapier Integration',\n      icon_emoji: ':zap:',\n      channel: '#automations-alerts',\n    },\n    outputFields: [\n      { key: 'blocks', label: 'Slack Blocks', type: 'text' },\n      { key: 'username', label: 'Username', type: 'string' },\n      { key: 'icon_emoji', label: 'Icon Emoji', type: 'string' },\n      { key: 'channel', label: 'Channel', type: 'string' },\n    ],\n  },\n};\n\nexport default create;\n"],"version":3}