25aa81ff3b63d822a9eff202ee72e871
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock para las utilidades comunes
globals_1.jest.mock('../src/zapier/utils/common', () => ({
    withRetry: globals_1.jest.fn(),
    logZapAction: globals_1.jest.fn().mockImplementation(() => Promise.resolve()),
}));
// Importar las funciones de Zapier
const newGoogleSheetsLeadScoring_1 = __importDefault(require("../src/zapier/triggers/newGoogleSheetsLeadScoring"));
const updateHubSpotExternalScore_1 = __importDefault(require("../src/zapier/creates/updateHubSpotExternalScore"));
const sendHighScoreSlackAlert_1 = __importDefault(require("../src/zapier/creates/sendHighScoreSlackAlert"));
// Mock para request
const mockRequest = globals_1.jest.fn();
// Importar los mocks después de la configuración
const common_1 = require("../src/zapier/utils/common");
const mockWithRetry = common_1.withRetry;
const mockLogZapAction = common_1.logZapAction;
/**
 * Test suite para la integración completa de Google Sheets Lead Scoring
 */
(0, globals_1.describe)('Google Sheets Lead Scoring Integration', () => {
    const mockZapierZ = {
        console: {
            log: globals_1.jest.fn(),
            error: globals_1.jest.fn(),
            warn: globals_1.jest.fn(),
        },
        errors: {
            Error: Error,
            RefreshAuthError: Error,
            HaltedError: Error,
        },
        request: mockRequest,
        JSON: {
            parse: JSON.parse,
            stringify: JSON.stringify,
        },
        cursor: {
            get: globals_1.jest.fn().mockReturnValue(null),
            store: globals_1.jest.fn(),
        },
        dehydrate: globals_1.jest.fn(),
        stashFile: globals_1.jest.fn(),
    };
    const mockBundle = {
        authData: {
            hubspot_api_key: 'test-hubspot-key',
            slack_webhook_url: 'https://hooks.slack.com/test',
            google_access_token: 'test-google-token',
            google_spreadsheet_id: 'test-spreadsheet-id',
        },
        inputData: {},
        cleanedRequest: {},
        rawRequest: {},
        targetUrl: 'https://test.com',
    };
    (0, globals_1.beforeAll)(() => {
        process.env.NODE_ENV = 'test';
    });
    beforeEach(() => {
        globals_1.jest.clearAllMocks();
        // Configurar el mock por defecto de withRetry para que ejecute la función pasada
        mockWithRetry.mockImplementation(async (fn) => {
            // Llamar a la función original (que es z.request en la mayoría de casos)
            return await fn();
        });
    });
    (0, globals_1.describe)('Google Sheets Trigger', () => {
        (0, globals_1.it)('should fetch new lead scoring rows from Google Sheets', async () => {
            // Usar timestamp actual para que las filas sean consideradas "nuevas"
            const currentTime = new Date();
            const recentTime = new Date(currentTime.getTime() - 5 * 60 * 1000); // 5 minutos atrás
            // Mock de respuesta de Google Sheets API
            const mockSheetsResponse = {
                status: 200,
                data: {
                    values: [
                        [
                            'Email',
                            'External Score',
                            'Timestamp',
                            'Name',
                            'Company',
                            'Source',
                        ],
                        [
                            'john.doe@example.com',
                            '75',
                            recentTime.toISOString(),
                            'John Doe',
                            'Example Corp',
                            'Website',
                        ],
                        [
                            'jane.smith@example.com',
                            '45',
                            currentTime.toISOString(),
                            'Jane Smith',
                            'Test Inc',
                            'Referral',
                        ],
                    ],
                },
            };
            mockRequest.mockResolvedValueOnce(mockSheetsResponse);
            const result = await newGoogleSheetsLeadScoring_1.default.operation.perform(mockZapierZ, mockBundle);
            (0, globals_1.expect)(result).toHaveLength(2);
            (0, globals_1.expect)(result[0]).toMatchObject({
                email: 'john.doe@example.com',
                external_score: 75,
                name: 'John Doe',
                company: 'Example Corp',
            });
            (0, globals_1.expect)(mockRequest).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                url: globals_1.expect.stringContaining('sheets.googleapis.com'),
                method: 'GET',
                headers: globals_1.expect.objectContaining({
                    Authorization: 'Bearer test-google-token',
                }),
            }));
        });
        (0, globals_1.it)('should handle empty Google Sheets response', async () => {
            const mockEmptyResponse = {
                status: 200,
                data: { values: [] },
            };
            mockRequest.mockResolvedValueOnce(mockEmptyResponse);
            const result = await newGoogleSheetsLeadScoring_1.default.operation.perform(mockZapierZ, mockBundle);
            (0, globals_1.expect)(result).toHaveLength(0);
        });
        (0, globals_1.it)('should handle Google Sheets API errors', async () => {
            mockRequest.mockRejectedValueOnce(new Error('API Error'));
            await (0, globals_1.expect)(newGoogleSheetsLeadScoring_1.default.operation.perform(mockZapierZ, mockBundle)).rejects.toThrow('API Error');
        });
    });
    (0, globals_1.describe)('HubSpot External Score Update', () => {
        (0, globals_1.it)('should update external_score for existing contact', async () => {
            const inputData = {
                email: 'john.doe@example.com',
                external_score: 75,
            };
            // Mock search response
            const mockSearchResponse = {
                status: 200,
                data: {
                    results: [
                        {
                            id: '12345',
                            properties: {
                                email: 'john.doe@example.com',
                                external_score: '50',
                            },
                        },
                    ],
                },
            };
            // Mock update response
            const mockUpdateResponse = {
                status: 200,
                data: {
                    id: '12345',
                    updatedAt: '2024-01-15T10:30:00Z',
                    properties: {
                        external_score: '75',
                    },
                },
            };
            mockRequest
                .mockResolvedValueOnce(mockSearchResponse)
                .mockResolvedValueOnce(mockUpdateResponse);
            const bundleWithInput = { ...mockBundle, inputData };
            const result = await updateHubSpotExternalScore_1.default.operation.perform(mockZapierZ, bundleWithInput);
            (0, globals_1.expect)(result).toMatchObject({
                id: '12345',
                properties: {
                    email: 'john.doe@example.com',
                    external_score: '75',
                },
            });
            (0, globals_1.expect)(mockRequest).toHaveBeenCalledTimes(2);
            (0, globals_1.expect)(mockRequest).toHaveBeenNthCalledWith(1, globals_1.expect.objectContaining({
                url: 'https://api.hubapi.com/crm/v3/objects/contacts/search',
                method: 'POST',
            }));
            (0, globals_1.expect)(mockRequest).toHaveBeenNthCalledWith(2, globals_1.expect.objectContaining({
                url: 'https://api.hubapi.com/crm/v3/objects/contacts/12345',
                method: 'PATCH',
            }));
        });
        (0, globals_1.it)('should handle contact not found error', async () => {
            const inputData = {
                email: 'nonexistent@example.com',
                external_score: 75,
            };
            const mockSearchResponse = {
                status: 200,
                data: { results: [] },
            };
            mockRequest.mockResolvedValueOnce(mockSearchResponse);
            const bundleWithInput = { ...mockBundle, inputData };
            await (0, globals_1.expect)(updateHubSpotExternalScore_1.default.operation.perform(mockZapierZ, bundleWithInput)).rejects.toThrow('Contact with email nonexistent@example.com not found in HubSpot');
        });
        (0, globals_1.it)('should validate required input fields', async () => {
            const bundleWithInput = { ...mockBundle, inputData: {} };
            await (0, globals_1.expect)(updateHubSpotExternalScore_1.default.operation.perform(mockZapierZ, bundleWithInput)).rejects.toThrow('Email is required');
        });
    });
    (0, globals_1.describe)('Slack High Score Alert', () => {
        (0, globals_1.it)('should send alert for high scores (> 50)', async () => {
            const inputData = {
                email: 'john.doe@example.com',
                external_score: 75,
                name: 'John Doe',
                company: 'Example Corp',
            };
            const mockSlackResponse = {
                status: 200,
                content: 'ok',
            };
            mockRequest.mockResolvedValueOnce(mockSlackResponse);
            const bundleWithInput = { ...mockBundle, inputData };
            const result = await sendHighScoreSlackAlert_1.default.operation.perform(mockZapierZ, bundleWithInput);
            (0, globals_1.expect)(result).toMatchObject({
                ok: true,
                channel: '#scoring-leads',
            });
            (0, globals_1.expect)(mockRequest).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                url: 'https://hooks.slack.com/test',
                method: 'POST',
                json: globals_1.expect.objectContaining({
                    blocks: globals_1.expect.arrayContaining([
                        globals_1.expect.objectContaining({
                            type: 'header',
                            text: globals_1.expect.objectContaining({
                                text: '🚨 High Lead Score Alert',
                            }),
                        }),
                    ]),
                }),
            }));
        });
        (0, globals_1.it)('should skip alert for low scores (<= 50)', async () => {
            const inputData = {
                email: 'jane.smith@example.com',
                external_score: 30,
            };
            const bundleWithInput = { ...mockBundle, inputData };
            const result = await sendHighScoreSlackAlert_1.default.operation.perform(mockZapierZ, bundleWithInput);
            (0, globals_1.expect)(result).toMatchObject({
                ok: true,
                message: {
                    text: 'Alert skipped - score not greater than 50',
                },
            });
            (0, globals_1.expect)(mockRequest).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle Slack webhook errors', async () => {
            const inputData = {
                email: 'john.doe@example.com',
                external_score: 75,
            };
            mockRequest.mockResolvedValueOnce({
                status: 400,
                content: 'Invalid request',
            });
            const bundleWithInput = { ...mockBundle, inputData };
            await (0, globals_1.expect)(sendHighScoreSlackAlert_1.default.operation.perform(mockZapierZ, bundleWithInput)).rejects.toThrow('Slack webhook returned: Invalid request');
        });
    });
    (0, globals_1.describe)('End-to-End Integration Flow', () => {
        (0, globals_1.it)('should complete full workflow: Google Sheets → HubSpot → Slack', async () => {
            // Usar timestamp actual para que las filas sean consideradas "nuevas"
            const currentTime = new Date();
            // 1. Simular trigger de Google Sheets
            const mockSheetsResponse = {
                status: 200,
                data: {
                    values: [
                        ['Email', 'External Score', 'Timestamp', 'Name', 'Company'],
                        [
                            'john.doe@example.com',
                            '85',
                            currentTime.toISOString(),
                            'John Doe',
                            'Example Corp',
                        ],
                    ],
                },
            };
            // 2. Mock respuestas de HubSpot
            const mockSearchResponse = {
                status: 200,
                data: {
                    results: [
                        {
                            id: '12345',
                            properties: {
                                email: 'john.doe@example.com',
                                external_score: '60',
                            },
                        },
                    ],
                },
            };
            const mockUpdateResponse = {
                status: 200,
                data: {
                    id: '12345',
                    updatedAt: '2024-01-15T10:30:00Z',
                    properties: { external_score: '85' },
                },
            };
            // 3. Mock respuesta de Slack
            const mockSlackResponse = {
                status: 200,
                content: 'ok',
            };
            mockRequest
                .mockResolvedValueOnce(mockSheetsResponse) // Google Sheets
                .mockResolvedValueOnce(mockSearchResponse) // HubSpot search
                .mockResolvedValueOnce(mockUpdateResponse) // HubSpot update
                .mockResolvedValueOnce(mockSlackResponse); // Slack webhook
            // Ejecutar el flujo completo
            // 1. Trigger de Google Sheets
            const triggerResult = await newGoogleSheetsLeadScoring_1.default.operation.perform(mockZapierZ, mockBundle);
            (0, globals_1.expect)(triggerResult).toHaveLength(1);
            const leadData = triggerResult[0];
            (0, globals_1.expect)(leadData.external_score).toBe(85);
            (0, globals_1.expect)(leadData.email).toBe('john.doe@example.com');
            // 2. Actualizar HubSpot
            const hubspotBundle = { ...mockBundle, inputData: leadData };
            const hubspotResult = await updateHubSpotExternalScore_1.default.operation.perform(mockZapierZ, hubspotBundle);
            (0, globals_1.expect)(hubspotResult.properties.external_score).toBe('85');
            // 3. Enviar alerta de Slack (score > 50)
            const slackBundle = { ...mockBundle, inputData: leadData };
            const slackResult = await sendHighScoreSlackAlert_1.default.operation.perform(mockZapierZ, slackBundle);
            (0, globals_1.expect)(slackResult.ok).toBe(true);
            // Verificar que se realizaron todas las llamadas
            (0, globals_1.expect)(mockRequest).toHaveBeenCalledTimes(4);
        });
        (0, globals_1.it)('should handle partial failures gracefully', async () => {
            // Simular fallo en HubSpot pero éxito en Google Sheets
            const mockSheetsResponse = {
                status: 200,
                data: {
                    values: [
                        ['Email', 'External Score'],
                        ['test@example.com', '90'],
                    ],
                },
            };
            mockRequest
                .mockResolvedValueOnce(mockSheetsResponse) // Google Sheets success
                .mockRejectedValueOnce(new Error('HubSpot API Error')); // HubSpot failure
            // 1. Google Sheets debería funcionar
            const triggerResult = await newGoogleSheetsLeadScoring_1.default.operation.perform(mockZapierZ, mockBundle);
            (0, globals_1.expect)(triggerResult).toHaveLength(1);
            // 2. HubSpot debería fallar
            const hubspotBundle = { ...mockBundle, inputData: triggerResult[0] };
            await (0, globals_1.expect)(updateHubSpotExternalScore_1.default.operation.perform(mockZapierZ, hubspotBundle)).rejects.toThrow('HubSpot API Error');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,