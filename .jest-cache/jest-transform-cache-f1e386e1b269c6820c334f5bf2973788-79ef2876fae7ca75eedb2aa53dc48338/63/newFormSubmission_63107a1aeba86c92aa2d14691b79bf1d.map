{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/triggers/newFormSubmission.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/triggers/newFormSubmission.ts"],"sourcesContent":["import {\n  HubSpotFormSubmission,\n  ZapierTrigger,\n  ZapierZ,\n  ZapierBundle,\n} from '../types';\nimport { withRetry, logZapAction } from '../utils/common';\n\n/**\n * Obtiene las nuevas entregas de formularios de HubSpot\n */\nconst getNewFormSubmissions = async (\n  z: ZapierZ,\n  bundle: ZapierBundle\n): Promise<HubSpotFormSubmission[]> => {\n  const apiKey = bundle.authData.hubspot_api_key;\n\n  // Calcular timestamp para obtener solo entregas recientes\n  const since = new Date();\n  since.setMinutes(since.getMinutes() - 15); // Últimos 15 minutos\n  const sinceTimestamp = since.getTime();\n\n  const url = `https://api.hubapi.com/form-integrations/v1/submissions/forms`;\n\n  const request = {\n    url,\n    method: 'GET' as const,\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    },\n    params: {\n      limit: 100,\n      after: sinceTimestamp.toString(),\n    },\n  };\n\n  try {\n    const response = await withRetry(() => z.request(request), 3);\n    const submissions = response.data?.results || [];\n\n    // Log de la acción\n    await logZapAction(z, {\n      action: 'trigger_new_form_submission',\n      timestamp: new Date().toISOString(),\n      success: true,\n      data: {\n        submissions_count: submissions.length,\n        since_timestamp: sinceTimestamp,\n      },\n    });\n\n    // Transformar datos para Zapier\n    return submissions.map((submission: any) => ({\n      id: submission.submissionId || submission.id,\n      form_id: submission.formId,\n      portal_id: submission.portalId,\n      submitted_at: submission.submittedAt,\n      page_url: submission.pageUrl,\n      page_title: submission.pageTitle,\n      values: submission.values || [],\n      contact_email:\n        submission.values?.find((v: any) => v.name === 'email')?.value || '',\n      contact_firstname:\n        submission.values?.find((v: any) => v.name === 'firstname')?.value ||\n        '',\n      contact_lastname:\n        submission.values?.find((v: any) => v.name === 'lastname')?.value || '',\n      contact_phone:\n        submission.values?.find((v: any) => v.name === 'phone')?.value || '',\n      contact_company:\n        submission.values?.find((v: any) => v.name === 'company')?.value || '',\n      raw_data: submission,\n    }));\n  } catch (error: any) {\n    // Log del error\n    await logZapAction(z, {\n      action: 'trigger_new_form_submission',\n      timestamp: new Date().toISOString(),\n      success: false,\n      error: error.message || 'Unknown error',\n      data: {\n        since_timestamp: sinceTimestamp,\n      },\n    });\n\n    z.console.error('Error fetching form submissions:', error);\n    throw error;\n  }\n};\n\n/**\n * Configuración del trigger para nuevas entregas de formulario\n */\nconst trigger: ZapierTrigger = {\n  key: 'new_form_submission',\n  noun: 'Form Submission',\n  display: {\n    label: 'New Form Submission',\n    description: 'Triggers when a new form is submitted in HubSpot',\n    important: true,\n  },\n  operation: {\n    type: 'polling',\n    perform: getNewFormSubmissions,\n    sample: {\n      id: 'sample-submission-123',\n      form_id: 'sample-form-456',\n      portal_id: '12345678',\n      submitted_at: '2024-01-15T10:30:00Z',\n      page_url: 'https://example.com/contact',\n      page_title: 'Contact Us - Example Company',\n      values: [\n        { name: 'email', value: 'john.doe@example.com' },\n        { name: 'firstname', value: 'John' },\n        { name: 'lastname', value: 'Doe' },\n      ],\n      contact_email: 'john.doe@example.com',\n      contact_firstname: 'John',\n      contact_lastname: 'Doe',\n      contact_phone: '+1234567890',\n      contact_company: 'Example Corp',\n    },\n    outputFields: [\n      { key: 'id', label: 'Submission ID', type: 'string' },\n      { key: 'form_id', label: 'Form ID', type: 'string' },\n      { key: 'portal_id', label: 'Portal ID', type: 'string' },\n      { key: 'submitted_at', label: 'Submitted At', type: 'datetime' },\n      { key: 'page_url', label: 'Page URL', type: 'string' },\n      { key: 'page_title', label: 'Page Title', type: 'string' },\n      { key: 'contact_email', label: 'Contact Email', type: 'string' },\n      { key: 'contact_firstname', label: 'Contact First Name', type: 'string' },\n      { key: 'contact_lastname', label: 'Contact Last Name', type: 'string' },\n      { key: 'contact_phone', label: 'Contact Phone', type: 'string' },\n      { key: 'contact_company', label: 'Contact Company', type: 'string' },\n    ],\n  },\n};\n\nexport default trigger;\n"],"version":3}