{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/utils/Logger.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/utils/Logger.ts"],"sourcesContent":["/**\n * Sistema de logging para Kopp CRM Automation\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\nexport interface LogData {\n  [key: string]: any;\n}\n\nexport interface LogContext {\n  component?: string;\n  operation?: string;\n  userId?: string;\n  requestId?: string;\n  [key: string]: any;\n}\n\nexport class Logger {\n  private context: string;\n  private logDir: string;\n  private logLevel: LogLevel;\n\n  constructor(context: string, logLevel: LogLevel = 'info') {\n    this.context = context;\n    this.logLevel = logLevel;\n    this.logDir = path.join(process.cwd(), 'logs');\n    this.ensureLogDir();\n  }\n\n  private ensureLogDir(): void {\n    if (!fs.existsSync(this.logDir)) {\n      fs.mkdirSync(this.logDir, { recursive: true });\n    }\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    const levels: LogLevel[] = ['debug', 'info', 'warn', 'error'];\n    const currentLevelIndex = levels.indexOf(this.logLevel);\n    const messageLevelIndex = levels.indexOf(level);\n    return messageLevelIndex >= currentLevelIndex;\n  }\n\n  private formatMessage(level: LogLevel, message: string, data?: LogData | LogContext): string {\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] [${level.toUpperCase()}] [${this.context}] ${message}`;\n\n    if (data) {\n      return `${logMessage} ${JSON.stringify(data, null, 2)}`;\n    }\n\n    return logMessage;\n  }\n\n  private writeToFile(message: string): void {\n    try {\n      // Escribir a archivos específicos basado en el contexto\n      const logFileName = this.getLogFileName();\n      const logFile = path.join(this.logDir, logFileName);\n      fs.appendFileSync(logFile, message + '\\n');\n    } catch (error) {\n      console.error('Error writing to log file:', error);\n    }\n  }\n\n  private getLogFileName(): string {\n    if (this.context.includes('reputometro')) {\n      return 'reputometro.log';\n    } else if (this.context.includes('hot-leads')) {\n      return 'hot_leads.log';\n    } else if (this.context.includes('recompensas-escasez') || this.context.includes('dropout')) {\n      return 'recompensas.log';\n    } else if (this.context.includes('integration')) {\n      return 'integrations.log';\n    } else {\n      return 'general.log';\n    }\n  }\n\n  info(message: string, data?: LogData | LogContext): void {\n    if (!this.shouldLog('info')) return;\n    const formattedMessage = this.formatMessage('info', message, data);\n    console.log(formattedMessage);\n    this.writeToFile(formattedMessage);\n  }\n\n  error(message: string, data?: LogData | LogContext): void {\n    if (!this.shouldLog('error')) return;\n    const formattedMessage = this.formatMessage('error', message, data);\n    console.error(formattedMessage);\n    this.writeToFile(formattedMessage);\n  }\n\n  warn(message: string, data?: LogData | LogContext): void {\n    if (!this.shouldLog('warn')) return;\n    const formattedMessage = this.formatMessage('warn', message, data);\n    console.warn(formattedMessage);\n    this.writeToFile(formattedMessage);\n  }\n\n  debug(message: string, data?: LogData | LogContext): void {\n    if (!this.shouldLog('debug')) return;\n    const formattedMessage = this.formatMessage('debug', message, data);\n    console.debug(formattedMessage);\n    this.writeToFile(formattedMessage);\n  }\n\n  // Método auxiliar para crear logger con contexto específico\n  static create(context: string, logLevel?: LogLevel): Logger {\n    return new Logger(context, logLevel);\n  }\n\n  // Método para logging de performance\n  time(label: string): void {\n    console.time(`[${this.context}] ${label}`);\n  }\n\n  timeEnd(label: string): void {\n    console.timeEnd(`[${this.context}] ${label}`);\n  }\n}\n"],"version":3}