{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/creates/hubspotContact.ts","mappings":";;AACA,4CAIyB;AAEzB;;GAEG;AACH,MAAM,4BAA4B,GAAG,KAAK,EACxC,CAAU,EACV,MAAoB,EACK,EAAE;IAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC;IAC/C,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC;IAE/B,oDAAoD;IACpD,MAAM,UAAU,GAAwB;QACtC,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,SAAS,EAAE,KAAK,CAAC,SAAS,IAAI,EAAE;QAChC,QAAQ,EAAE,KAAK,CAAC,QAAQ,IAAI,EAAE;KAC/B,CAAC;IAEF,gDAAgD;IAChD,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;QACpB,UAAU,CAAC,mBAAmB,GAAG,KAAK,CAAC,SAAS,CAAC;IACnD,CAAC;IAED,IAAI,KAAK,CAAC,YAAY,EAAE,CAAC;QACvB,UAAU,CAAC,oBAAoB,GAAG,KAAK,CAAC,YAAY,CAAC;IACvD,CAAC;IAED,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;QAChB,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IACjC,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;IACrC,CAAC;IAED,kDAAkD;IAClD,IAAI,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC;QAC1D,MAAM,YAAY,GAAG,IAAA,+BAAsB,EAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC/D,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,CAAC;QACH,qCAAqC;QACrC,MAAM,SAAS,GAAG,gDAAgD,CAAC;QACnE,MAAM,aAAa,GAAG;YACpB,GAAG,EAAE,SAAS;YACd,MAAM,EAAE,MAAe;YACvB,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,MAAM,EAAE;gBACjC,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE;gBACJ,UAAU;aACX;SACF,CAAC;QAEF,IAAI,QAAQ,CAAC;QACb,IAAI,QAAQ,GAAG,KAAK,CAAC;QAErB,IAAI,CAAC;YACH,QAAQ,GAAG,MAAM,IAAA,kBAAS,EAAC,GAAG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC;QAAC,OAAO,WAAgB,EAAE,CAAC;YAC1B,8DAA8D;YAC9D,IACE,WAAW,CAAC,MAAM,KAAK,GAAG;gBAC1B,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,gBAAgB,CAAC,EAC/C,CAAC;gBACD,QAAQ,GAAG,IAAI,CAAC;gBAEhB,+BAA+B;gBAC/B,MAAM,SAAS,GAAG,uDAAuD,CAAC;gBAC1E,MAAM,aAAa,GAAG;oBACpB,GAAG,EAAE,SAAS;oBACd,MAAM,EAAE,MAAe;oBACvB,OAAO,EAAE;wBACP,aAAa,EAAE,UAAU,MAAM,EAAE;wBACjC,cAAc,EAAE,kBAAkB;qBACnC;oBACD,IAAI,EAAE;wBACJ,YAAY,EAAE;4BACZ;gCACE,OAAO,EAAE;oCACP;wCACE,YAAY,EAAE,OAAO;wCACrB,QAAQ,EAAE,IAAI;wCACd,KAAK,EAAE,KAAK,CAAC,KAAK;qCACnB;iCACF;6BACF;yBACF;wBACD,UAAU,EAAE;4BACV,OAAO;4BACP,WAAW;4BACX,UAAU;4BACV,OAAO;4BACP,SAAS;4BACT,qBAAqB;4BACrB,sBAAsB;yBACvB;qBACF;iBACF,CAAC;gBAEF,MAAM,cAAc,GAAG,MAAM,IAAA,kBAAS,EACpC,GAAG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,EAC9B,CAAC,CACF,CAAC;gBACF,MAAM,eAAe,GAAG,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;gBAE1D,IAAI,eAAe,EAAE,CAAC;oBACpB,mCAAmC;oBACnC,MAAM,SAAS,GAAG,kDAAkD,eAAe,CAAC,EAAE,EAAE,CAAC;oBACzF,MAAM,aAAa,GAAG;wBACpB,GAAG,EAAE,SAAS;wBACd,MAAM,EAAE,OAAgB;wBACxB,OAAO,EAAE;4BACP,aAAa,EAAE,UAAU,MAAM,EAAE;4BACjC,cAAc,EAAE,kBAAkB;yBACnC;wBACD,IAAI,EAAE;4BACJ,UAAU;yBACX;qBACF,CAAC;oBAEF,QAAQ,GAAG,MAAM,IAAA,kBAAS,EAAC,GAAG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChE,CAAC;qBAAM,CAAC;oBACN,MAAM,WAAW,CAAC,CAAC,mEAAmE;gBACxF,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,MAAM,WAAW,CAAC,CAAC,0BAA0B;YAC/C,CAAC;QACH,CAAC;QAED,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC9B,MAAM,WAAW,GAAmB;YAClC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,KAAK;YAC/B,SAAS,EAAE,OAAO,CAAC,UAAU,CAAC,SAAS;YACvC,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC,QAAQ;YACrC,mBAAmB,EAAE,OAAO,CAAC,UAAU,CAAC,mBAAmB;YAC3D,oBAAoB,EAAE,OAAO,CAAC,UAAU,CAAC,oBAAoB;YAC7D,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,KAAK;YAC/B,OAAO,EAAE,OAAO,CAAC,UAAU,CAAC,OAAO;SACpC,CAAC;QAEF,2BAA2B;QAC3B,MAAM,IAAA,qBAAY,EAAC,CAAC,EAAE;YACpB,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,wBAAwB;YACtE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,OAAO,EAAE,IAAI;YACb,IAAI,EAAE;gBACJ,UAAU,EAAE,OAAO,CAAC,EAAE;gBACtB,KAAK,EAAE,WAAW,CAAC,KAAK;gBACxB,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ;aAC1C;SACF,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACrB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,gBAAgB;QAChB,MAAM,IAAA,qBAAY,EAAC,CAAC,EAAE;YACpB,MAAM,EAAE,kCAAkC;YAC1C,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,eAAe;YACvC,IAAI,EAAE;gBACJ,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,UAAU;aACX;SACF,CAAC,CAAC;QAEH,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;QACnE,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,GAAiB;IAC3B,GAAG,EAAE,iBAAiB;IACtB,IAAI,EAAE,SAAS;IACf,OAAO,EAAE;QACP,KAAK,EAAE,kCAAkC;QACzC,WAAW,EAAE,6DAA6D;QAC1E,SAAS,EAAE,IAAI;KAChB;IACD,SAAS,EAAE;QACT,OAAO,EAAE,4BAA4B;QACrC,WAAW,EAAE;YACX;gBACE,GAAG,EAAE,OAAO;gBACZ,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,kCAAkC;aAC7C;YACD;gBACE,GAAG,EAAE,WAAW;gBAChB,KAAK,EAAE,YAAY;gBACnB,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,+BAA+B;aAC1C;YACD;gBACE,GAAG,EAAE,UAAU;gBACf,KAAK,EAAE,WAAW;gBAClB,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,8BAA8B;aACzC;YACD;gBACE,GAAG,EAAE,OAAO;gBACZ,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,iCAAiC;aAC5C;YACD;gBACE,GAAG,EAAE,SAAS;gBACd,KAAK,EAAE,SAAS;gBAChB,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,iCAAiC;aAC5C;YACD;gBACE,GAAG,EAAE,WAAW;gBAChB,KAAK,EAAE,WAAW;gBAClB,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,KAAK;gBACf,QAAQ,EACN,wEAAwE;aAC3E;YACD;gBACE,GAAG,EAAE,cAAc;gBACnB,KAAK,EAAE,cAAc;gBACrB,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EACN,sEAAsE;aACzE;YACD;gBACE,GAAG,EAAE,aAAa;gBAClB,KAAK,EAAE,aAAa;gBACpB,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,iDAAiD;aAC5D;SACF;QACD,MAAM,EAAE;YACN,KAAK,EAAE,sBAAsB;YAC7B,SAAS,EAAE,MAAM;YACjB,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE,aAAa;YACpB,OAAO,EAAE,cAAc;YACvB,mBAAmB,EAAE,cAAc;YACnC,oBAAoB,EAAE,sBAAsB;SAC7C;QACD,YAAY,EAAE;YACZ,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE;YAChD,EAAE,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAE;YACzD,EAAE,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE;YACvD,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE;YAChD,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;YACpD;gBACE,GAAG,EAAE,qBAAqB;gBAC1B,KAAK,EAAE,qBAAqB;gBAC5B,IAAI,EAAE,QAAQ;aACf;YACD;gBACE,GAAG,EAAE,sBAAsB;gBAC3B,KAAK,EAAE,sBAAsB;gBAC7B,IAAI,EAAE,UAAU;aACjB;SACF;KACF;CACF,CAAC;AAEF,kBAAe,MAAM,CAAC","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/creates/hubspotContact.ts"],"sourcesContent":["import { HubSpotContact, ZapierCreate, ZapierZ, ZapierBundle } from '../types';\nimport {\n  withRetry,\n  logZapAction,\n  mapFormFieldsToHubSpot,\n} from '../utils/common';\n\n/**\n * Crea o actualiza un contacto en HubSpot\n */\nconst createOrUpdateHubSpotContact = async (\n  z: ZapierZ,\n  bundle: ZapierBundle\n): Promise<HubSpotContact> => {\n  const apiKey = bundle.authData.hubspot_api_key;\n  const input = bundle.inputData;\n\n  // Mapear campos de entrada a propiedades de HubSpot\n  const properties: Record<string, any> = {\n    email: input.email,\n    firstname: input.firstname || '',\n    lastname: input.lastname || '',\n  };\n\n  // Agregar campos adicionales si están presentes\n  if (input.form_name) {\n    properties.last_form_submitted = input.form_name;\n  }\n\n  if (input.submitted_at) {\n    properties.last_submission_date = input.submitted_at;\n  }\n\n  if (input.phone) {\n    properties.phone = input.phone;\n  }\n\n  if (input.company) {\n    properties.company = input.company;\n  }\n\n  // Si hay valores de formulario, mapearlos también\n  if (input.form_values && Array.isArray(input.form_values)) {\n    const mappedFields = mapFormFieldsToHubSpot(input.form_values);\n    Object.assign(properties, mappedFields);\n  }\n\n  try {\n    // Intentar crear el contacto primero\n    const createUrl = 'https://api.hubapi.com/crm/v3/objects/contacts';\n    const createRequest = {\n      url: createUrl,\n      method: 'POST' as const,\n      headers: {\n        Authorization: `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      json: {\n        properties,\n      },\n    };\n\n    let response;\n    let isUpdate = false;\n\n    try {\n      response = await withRetry(() => z.request(createRequest), 3);\n    } catch (createError: any) {\n      // Si el contacto ya existe (error 409), intentar actualizarlo\n      if (\n        createError.status === 409 ||\n        createError.message?.includes('CONTACT_EXISTS')\n      ) {\n        isUpdate = true;\n\n        // Buscar el contacto por email\n        const searchUrl = `https://api.hubapi.com/crm/v3/objects/contacts/search`;\n        const searchRequest = {\n          url: searchUrl,\n          method: 'POST' as const,\n          headers: {\n            Authorization: `Bearer ${apiKey}`,\n            'Content-Type': 'application/json',\n          },\n          json: {\n            filterGroups: [\n              {\n                filters: [\n                  {\n                    propertyName: 'email',\n                    operator: 'EQ',\n                    value: input.email,\n                  },\n                ],\n              },\n            ],\n            properties: [\n              'email',\n              'firstname',\n              'lastname',\n              'phone',\n              'company',\n              'last_form_submitted',\n              'last_submission_date',\n            ],\n          },\n        };\n\n        const searchResponse = await withRetry(\n          () => z.request(searchRequest),\n          3\n        );\n        const existingContact = searchResponse.data?.results?.[0];\n\n        if (existingContact) {\n          // Actualizar el contacto existente\n          const updateUrl = `https://api.hubapi.com/crm/v3/objects/contacts/${existingContact.id}`;\n          const updateRequest = {\n            url: updateUrl,\n            method: 'PATCH' as const,\n            headers: {\n              Authorization: `Bearer ${apiKey}`,\n              'Content-Type': 'application/json',\n            },\n            json: {\n              properties,\n            },\n          };\n\n          response = await withRetry(() => z.request(updateRequest), 3);\n        } else {\n          throw createError; // Re-lanzar el error original si no se puede encontrar el contacto\n        }\n      } else {\n        throw createError; // Re-lanzar otros errores\n      }\n    }\n\n    const contact = response.data;\n    const contactData: HubSpotContact = {\n      email: contact.properties.email,\n      firstname: contact.properties.firstname,\n      lastname: contact.properties.lastname,\n      last_form_submitted: contact.properties.last_form_submitted,\n      last_submission_date: contact.properties.last_submission_date,\n      phone: contact.properties.phone,\n      company: contact.properties.company,\n    };\n\n    // Log de la acción exitosa\n    await logZapAction(z, {\n      action: isUpdate ? 'update_hubspot_contact' : 'create_hubspot_contact',\n      timestamp: new Date().toISOString(),\n      success: true,\n      data: {\n        contact_id: contact.id,\n        email: contactData.email,\n        operation: isUpdate ? 'update' : 'create',\n      },\n    });\n\n    return contactData;\n  } catch (error: any) {\n    // Log del error\n    await logZapAction(z, {\n      action: 'create_or_update_hubspot_contact',\n      timestamp: new Date().toISOString(),\n      success: false,\n      error: error.message || 'Unknown error',\n      data: {\n        email: input.email,\n        properties,\n      },\n    });\n\n    z.console.error('Error creating/updating HubSpot contact:', error);\n    throw error;\n  }\n};\n\n/**\n * Configuración del create action para contactos de HubSpot\n */\nconst create: ZapierCreate = {\n  key: 'hubspot_contact',\n  noun: 'Contact',\n  display: {\n    label: 'Create or Update HubSpot Contact',\n    description: 'Creates a new contact in HubSpot or updates an existing one',\n    important: true,\n  },\n  operation: {\n    perform: createOrUpdateHubSpotContact,\n    inputFields: [\n      {\n        key: 'email',\n        label: 'Email',\n        type: 'string',\n        required: true,\n        helpText: 'The email address of the contact',\n      },\n      {\n        key: 'firstname',\n        label: 'First Name',\n        type: 'string',\n        required: false,\n        helpText: 'The first name of the contact',\n      },\n      {\n        key: 'lastname',\n        label: 'Last Name',\n        type: 'string',\n        required: false,\n        helpText: 'The last name of the contact',\n      },\n      {\n        key: 'phone',\n        label: 'Phone',\n        type: 'string',\n        required: false,\n        helpText: 'The phone number of the contact',\n      },\n      {\n        key: 'company',\n        label: 'Company',\n        type: 'string',\n        required: false,\n        helpText: 'The company name of the contact',\n      },\n      {\n        key: 'form_name',\n        label: 'Form Name',\n        type: 'string',\n        required: false,\n        helpText:\n          'The name of the form submitted (will be mapped to last_form_submitted)',\n      },\n      {\n        key: 'submitted_at',\n        label: 'Submitted At',\n        type: 'datetime',\n        required: false,\n        helpText:\n          'When the form was submitted (will be mapped to last_submission_date)',\n      },\n      {\n        key: 'form_values',\n        label: 'Form Values',\n        type: 'text',\n        required: false,\n        helpText: 'Additional form values as JSON array (optional)',\n      },\n    ],\n    sample: {\n      email: 'john.doe@example.com',\n      firstname: 'John',\n      lastname: 'Doe',\n      phone: '+1234567890',\n      company: 'Example Corp',\n      last_form_submitted: 'Contact Form',\n      last_submission_date: '2024-01-15T10:30:00Z',\n    },\n    outputFields: [\n      { key: 'email', label: 'Email', type: 'string' },\n      { key: 'firstname', label: 'First Name', type: 'string' },\n      { key: 'lastname', label: 'Last Name', type: 'string' },\n      { key: 'phone', label: 'Phone', type: 'string' },\n      { key: 'company', label: 'Company', type: 'string' },\n      {\n        key: 'last_form_submitted',\n        label: 'Last Form Submitted',\n        type: 'string',\n      },\n      {\n        key: 'last_submission_date',\n        label: 'Last Submission Date',\n        type: 'datetime',\n      },\n    ],\n  },\n};\n\nexport default create;\n"],"version":3}