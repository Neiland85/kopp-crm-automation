92bd8ee38ff1cb3347b79bb0ed59a2b1
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zapier_platform_core_1 = require("zapier-platform-core");
const package_json_1 = require("../../package.json");
// Importar triggers y creates
const newFormSubmission_1 = __importDefault(require("./triggers/newFormSubmission"));
const pageView_1 = __importDefault(require("./triggers/pageView"));
const updatedContactProperty_1 = __importDefault(require("./triggers/updatedContactProperty"));
const newGoogleSheetsLeadScoring_1 = __importDefault(require("./triggers/newGoogleSheetsLeadScoring"));
const hubspotContact_1 = __importDefault(require("./creates/hubspotContact"));
const slackNotification_1 = __importDefault(require("./creates/slackNotification"));
const updateScoreTimestamp_1 = __importDefault(require("./creates/updateScoreTimestamp"));
const sendScoringNotification_1 = __importDefault(require("./creates/sendScoringNotification"));
const updateHubSpotExternalScore_1 = __importDefault(require("./creates/updateHubSpotExternalScore"));
const sendHighScoreSlackAlert_1 = __importDefault(require("./creates/sendHighScoreSlackAlert"));
// Configuración principal de la app Zapier
const App = {
    // Versión de la plataforma Zapier
    version: package_json_1.version,
    platformVersion: zapier_platform_core_1.version,
    // Configuración de autenticación
    authentication: {
        type: 'custom',
        fields: [
            {
                computed: false,
                key: 'hubspot_api_key',
                required: true,
                label: 'HubSpot API Key',
                type: 'string',
                helpText: 'Your HubSpot private app access token',
            },
            {
                computed: false,
                key: 'slack_webhook_url',
                required: true,
                label: 'Slack Webhook URL',
                type: 'string',
                helpText: 'Your Slack incoming webhook URL for #automations-alerts',
            },
            {
                computed: false,
                key: 'google_access_token',
                required: false,
                label: 'Google Sheets Access Token',
                type: 'string',
                helpText: 'Your Google OAuth2 access token for Google Sheets API',
            },
            {
                computed: false,
                key: 'google_spreadsheet_id',
                required: false,
                label: 'Google Spreadsheet ID',
                type: 'string',
                helpText: 'The ID of your Google Spreadsheet containing the Lead Scoring sheet',
            },
        ],
        test: {
            url: 'https://api.hubapi.com/crm/v3/objects/contacts?limit=1',
            method: 'GET',
            headers: {
                Authorization: 'Bearer {{bundle.authData.hubspot_api_key}}',
            },
        },
    },
    // Triggers disponibles
    triggers: {
        [newFormSubmission_1.default.key]: newFormSubmission_1.default,
        [pageView_1.default.key]: pageView_1.default,
        [updatedContactProperty_1.default.key]: updatedContactProperty_1.default,
        [newGoogleSheetsLeadScoring_1.default.key]: newGoogleSheetsLeadScoring_1.default,
    },
    // Creates (acciones) disponibles
    creates: {
        [hubspotContact_1.default.key]: hubspotContact_1.default,
        [slackNotification_1.default.key]: slackNotification_1.default,
        [updateScoreTimestamp_1.default.key]: updateScoreTimestamp_1.default,
        [sendScoringNotification_1.default.key]: sendScoringNotification_1.default,
        [updateHubSpotExternalScore_1.default.key]: updateHubSpotExternalScore_1.default,
        [sendHighScoreSlackAlert_1.default.key]: sendHighScoreSlackAlert_1.default,
    },
    // Configuración de la app
    beforeRequest: [
        // Middleware para agregar headers comunes
        (request, z, bundle) => {
            if (request.url.includes('hubapi.com')) {
                request.headers = request.headers || {};
                request.headers['Authorization'] =
                    `Bearer ${bundle.authData.hubspot_api_key}`;
                request.headers['Content-Type'] = 'application/json';
            }
            return request;
        },
    ],
    afterResponse: [
        // Middleware para manejar errores HTTP
        (response, z) => {
            if (response.status >= 400) {
                const error = {
                    status: response.status,
                    message: response.content || 'Unknown error',
                    url: response.request.url,
                };
                // Log del error
                z.console.error('HTTP Error:', error);
                // Reintentos para errores 5xx
                if (response.status >= 500) {
                    throw new z.errors.RefreshAuthError('Server error, will retry');
                }
                throw new z.errors.Error(`HTTP ${response.status}: ${error.message}`);
            }
            return response;
        },
    ],
};
exports.default = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,