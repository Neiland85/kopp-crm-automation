{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/tests/zaps/reputometro.test.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/tests/zaps/reputometro.test.ts"],"sourcesContent":["import {\n  jest,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  afterEach,\n} from '@jest/globals';\n\n// Mock dependencies BEFORE any imports\njest.mock('@hubspot/api-client');\njest.mock('@slack/web-api');\njest.mock('../../src/utils/Logger');\n\nimport { reputometroHandler } from '../../src/zaps/reputometro/handler';\nimport { Logger } from '../../src/utils/Logger';\n\n/**\n * 🧪 Tests del Reputómetro Invisible\n *\n * Cobertura:\n * 1. Handler principal con datos mock\n * 2. Cálculo de scores\n * 3. Integración HubSpot (mocked)\n * 4. Integración Slack (mocked)\n * 5. Manejo de errores\n * 6. Retry con backoff exponencial\n */\n\nconst mockHubSpotClient = {\n  crm: {\n    contacts: {\n      searchApi: {\n        doSearch: jest.fn() as jest.MockedFunction<any>,\n      },\n      basicApi: {\n        update: jest.fn() as jest.MockedFunction<any>,\n      },\n    },\n  },\n};\n\nconst mockSlackClient = {\n  chat: {\n    postMessage: jest.fn() as jest.MockedFunction<any>,\n  },\n};\n\nconst mockConfig = {\n  hubspotApiKey: 'test-hubspot-key',\n  slackBotToken: 'test-slack-token',\n  slackSigningSecret: 'test-slack-secret',\n  slackChannel: '#test-scoring-leads',\n  isEnabled: true,\n};\n\nconst mockLeadsData = {\n  results: [\n    {\n      id: '1001',\n      properties: {\n        email: 'lead1@empresa.com',\n        page_views: '10',\n        form_submissions: '2',\n        last_submission_date: new Date(\n          Date.now() - 30 * 60 * 1000\n        ).toISOString(), // 30 min ago\n        lead_influence_score: '3.0',\n      },\n    },\n    {\n      id: '1002',\n      properties: {\n        email: 'lead2@startup.com',\n        page_views: '15',\n        form_submissions: '3',\n        last_submission_date: new Date(\n          Date.now() - 45 * 60 * 1000\n        ).toISOString(), // 45 min ago\n        lead_influence_score: '5.5',\n      },\n    },\n    {\n      id: '1003',\n      properties: {\n        email: 'lead3@acme.com',\n        page_views: '8',\n        form_submissions: '1',\n        last_submission_date: new Date(\n          Date.now() - 20 * 60 * 1000\n        ).toISOString(), // 20 min ago\n        lead_influence_score: '2.0',\n      },\n    },\n  ],\n};\n\ndescribe('Reputómetro Invisible', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock HubSpot Client constructor\n    jest\n      .mocked(require('@hubspot/api-client').Client)\n      .mockImplementation(() => mockHubSpotClient);\n\n    // Mock Slack WebClient constructor\n    jest\n      .mocked(require('@slack/web-api').WebClient)\n      .mockImplementation(() => mockSlackClient);\n\n    // Mock Logger\n    const mockLogger = {\n      info: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n      debug: jest.fn(),\n    };\n    jest.mocked(Logger).mockImplementation(() => mockLogger as any);\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Handler Principal', () => {\n    it('should process leads successfully with valid data', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(\n        mockLeadsData\n      );\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({\n        ok: true,\n        ts: '123456789',\n      });\n\n      // Act\n      const result = await reputometroHandler(mockConfig);\n\n      // Assert\n      expect(result).toEqual({\n        id: expect.stringMatching(/^reputometro_\\d+$/),\n        timestamp: expect.any(String),\n        totalLeads: 3,\n        avgScore: expect.any(Number),\n        topLeads: expect.arrayContaining([\n          expect.objectContaining({\n            email: expect.any(String),\n            score: expect.any(Number),\n          }),\n        ]),\n        slackMessageSent: true,\n        hubspotUpdates: expect.any(Number),\n        executionTimeMs: expect.any(Number),\n      });\n\n      expect(\n        mockHubSpotClient.crm.contacts.searchApi.doSearch\n      ).toHaveBeenCalledWith(\n        expect.objectContaining({\n          filterGroups: expect.arrayContaining([\n            expect.objectContaining({\n              filters: expect.arrayContaining([\n                expect.objectContaining({\n                  propertyName: 'last_submission_date',\n                  operator: 'GTE',\n                }),\n              ]),\n            }),\n          ]),\n        })\n      );\n\n      expect(mockSlackClient.chat.postMessage).toHaveBeenCalledWith(\n        expect.objectContaining({\n          channel: '#test-scoring-leads',\n          blocks: expect.any(Array),\n          text: expect.stringContaining('leads procesados'),\n        })\n      );\n    });\n\n    it('should handle empty leads gracefully', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue({\n        results: [],\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({\n        ok: true,\n        ts: '123456789',\n      });\n\n      // Act\n      const result = await reputometroHandler(mockConfig);\n\n      // Assert\n      expect(result).toEqual({\n        id: expect.stringMatching(/^reputometro_\\d+$/),\n        timestamp: expect.any(String),\n        totalLeads: 0,\n        avgScore: 0,\n        topLeads: [],\n        slackMessageSent: true,\n        hubspotUpdates: 0,\n        executionTimeMs: expect.any(Number),\n      });\n\n      expect(mockSlackClient.chat.postMessage).toHaveBeenCalledWith(\n        expect.objectContaining({\n          channel: '#test-scoring-leads',\n          text: expect.stringContaining('0 leads procesados'),\n        })\n      );\n    });\n\n    it('should calculate lead influence scores correctly', async () => {\n      // Arrange\n      const testLead = {\n        results: [\n          {\n            id: '2001',\n            properties: {\n              email: 'test@example.com',\n              page_views: '20', // 20 * 0.5 = 10\n              form_submissions: '5', // 5 * 2 = 10\n              last_submission_date: new Date().toISOString(),\n              lead_influence_score: '0',\n            },\n          },\n        ],\n      };\n\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(\n        testLead\n      );\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const result = await reputometroHandler(mockConfig);\n\n      // Assert\n      expect(result.topLeads[0].score).toBe(20); // 10 + 10 = 20\n      expect(result.avgScore).toBe(20);\n\n      // Verificar que se llamó update con el score correcto\n      expect(\n        mockHubSpotClient.crm.contacts.basicApi.update\n      ).toHaveBeenCalledWith(\n        '2001',\n        expect.objectContaining({\n          properties: expect.objectContaining({\n            lead_influence_score: '20',\n          }),\n        })\n      );\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle HubSpot API errors gracefully', async () => {\n      // Arrange\n      const hubspotError = new Error('HubSpot API rate limit exceeded');\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockRejectedValue(\n        hubspotError\n      );\n\n      // Act & Assert\n      await expect(reputometroHandler(mockConfig)).rejects.toThrow(\n        'HubSpot API rate limit exceeded'\n      );\n    });\n\n    it('should handle Slack API errors and continue processing', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(\n        mockLeadsData\n      );\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockRejectedValue(\n        new Error('Slack API error')\n      );\n\n      // Act\n      const result = await reputometroHandler(mockConfig);\n\n      // Assert\n      expect(result.slackMessageSent).toBe(false);\n      expect(result.totalLeads).toBeGreaterThan(0); // Processing should continue\n    });\n\n    it('should handle individual HubSpot update failures', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(\n        mockLeadsData\n      );\n      // Mock para que falle solo en algunas actualizaciones\n      mockHubSpotClient.crm.contacts.basicApi.update\n        .mockResolvedValueOnce({ id: 'updated-1' })\n        .mockRejectedValueOnce(new Error('Update failed'))\n        .mockResolvedValueOnce({ id: 'updated-3' });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const result = await reputometroHandler(mockConfig);\n\n      // Assert\n      expect(result.hubspotUpdates).toBeLessThanOrEqual(result.totalLeads); // Some updates may fail\n      expect(result.slackMessageSent).toBe(true); // Slack still works\n    });\n  });\n\n  describe('Retry Logic', () => {\n    it('should retry failed HubSpot calls with exponential backoff', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.searchApi.doSearch\n        .mockRejectedValueOnce(new Error('Temporary failure'))\n        .mockRejectedValueOnce(new Error('Temporary failure'))\n        .mockResolvedValueOnce(mockLeadsData);\n\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const result = await reputometroHandler(mockConfig);\n\n      // Assert\n      expect(\n        mockHubSpotClient.crm.contacts.searchApi.doSearch\n      ).toHaveBeenCalledTimes(3);\n      expect(result.totalLeads).toBe(3);\n    });\n\n    it('should fail after max retries exceeded', async () => {\n      // Arrange\n      const persistentError = new Error('Persistent API failure');\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockRejectedValue(\n        persistentError\n      );\n\n      // Act & Assert\n      await expect(reputometroHandler(mockConfig)).rejects.toThrow(\n        'Persistent API failure'\n      );\n      expect(\n        mockHubSpotClient.crm.contacts.searchApi.doSearch\n      ).toHaveBeenCalledTimes(3); // Default max retries\n    });\n  });\n\n  describe('Slack Block Kit Messages', () => {\n    it('should create proper Block Kit structure for reports', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(\n        mockLeadsData\n      );\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      await reputometroHandler(mockConfig);\n\n      // Assert\n      const slackCall = mockSlackClient.chat.postMessage.mock.calls[0][0];\n      expect(slackCall).toEqual(\n        expect.objectContaining({\n          channel: '#test-scoring-leads',\n          blocks: expect.arrayContaining([\n            expect.objectContaining({\n              type: 'header',\n              text: expect.objectContaining({\n                text: '⚡ Reputómetro Invisible',\n              }),\n            }),\n            expect.objectContaining({\n              type: 'section',\n              fields: expect.arrayContaining([\n                expect.objectContaining({\n                  text: expect.stringContaining('*Total:*'),\n                }),\n                expect.objectContaining({\n                  text: expect.stringContaining('*Score medio:*'),\n                }),\n              ]),\n            }),\n            expect.objectContaining({\n              type: 'section',\n              text: expect.objectContaining({\n                text: expect.stringContaining('*Top 3:*'),\n              }),\n            }),\n          ]),\n        })\n      );\n    });\n\n    it('should handle empty leads in Slack message', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue({\n        results: [],\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      await reputometroHandler(mockConfig);\n\n      // Assert\n      const slackCall = mockSlackClient.chat.postMessage.mock\n        .calls[0][0] as any;\n      const topSection = slackCall.blocks.find((block: any) =>\n        block.text?.text?.includes('*Top 3:*')\n      );\n      expect(topSection.text.text).toContain('Sin leads en esta ejecución');\n    });\n  });\n\n  describe('Performance', () => {\n    it('should complete execution within reasonable time', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(\n        mockLeadsData\n      );\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const startTime = Date.now();\n      const result = await reputometroHandler(mockConfig);\n      const actualExecutionTime = Date.now() - startTime;\n\n      // Assert\n      expect(result.executionTimeMs).toBeLessThan(10000); // Should complete in under 10 seconds\n      expect(result.executionTimeMs).toBeCloseTo(actualExecutionTime, -2); // Within 100ms accuracy\n    });\n  });\n\n  describe('Data Validation', () => {\n    it('should handle missing or invalid lead data gracefully', async () => {\n      // Arrange\n      const invalidLeadsData = {\n        results: [\n          {\n            id: '3001',\n            properties: {\n              email: 'valid@example.com', // Valid email\n              page_views: '0', // Valid number but 0\n              form_submissions: '0', // Valid number but 0\n              last_submission_date: new Date().toISOString(), // Valid date\n              lead_influence_score: '0', // Valid score but 0\n            },\n          },\n        ],\n      };\n\n      mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(\n        invalidLeadsData\n      );\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const result = await reputometroHandler(mockConfig);\n\n      // Assert\n      expect(result.totalLeads).toBe(1);\n      expect(result.topLeads[0].score).toBe(0); // Should be 0 for valid data (0 * 0.5 + 0 * 2 = 0)\n      expect(result.avgScore).toBe(0); // Average should also be 0\n    });\n  });\n});\n\ndescribe('Score Calculation Edge Cases', () => {\n  const calculateScore = (views: number, submissions: number): number => {\n    return Math.round((views * 0.5 + submissions * 2) * 100) / 100;\n  };\n\n  it('should calculate scores correctly for edge cases', () => {\n    expect(calculateScore(0, 0)).toBe(0);\n    expect(calculateScore(1, 0)).toBe(0.5);\n    expect(calculateScore(0, 1)).toBe(2);\n    expect(calculateScore(10, 5)).toBe(15); // 5 + 10 = 15\n    expect(calculateScore(100, 0)).toBe(50); // 100 * 0.5 = 50\n    expect(calculateScore(0, 50)).toBe(100); // 50 * 2 = 100\n  });\n\n  it('should handle decimal precision correctly', () => {\n    expect(calculateScore(3, 0)).toBe(1.5); // 3 * 0.5 = 1.5\n    expect(calculateScore(7, 1)).toBe(5.5); // 3.5 + 2 = 5.5\n    expect(calculateScore(13, 3)).toBe(12.5); // 6.5 + 6 = 12.5\n  });\n});\n"],"version":3}