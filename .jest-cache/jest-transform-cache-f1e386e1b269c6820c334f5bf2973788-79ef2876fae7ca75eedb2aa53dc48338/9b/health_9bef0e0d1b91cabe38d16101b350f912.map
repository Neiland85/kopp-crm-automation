{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/routes/health.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/routes/health.ts"],"sourcesContent":["import express from 'express';\nimport { Request, Response } from 'express';\n\nconst router = express.Router();\n\n/**\n * @swagger\n * /health:\n *   get:\n *     tags: [Health]\n *     summary: Verificación de salud del sistema\n *     description: |\n *       Endpoint para verificar el estado de salud de la API y sus servicios conectados.\n *\n *       **Verificaciones incluidas:**\n *       - ✅ Estado general de la API\n *       - 🔗 Conectividad con Slack\n *       - 📊 Conectividad con HubSpot\n *       - 💾 Estado de la base de datos\n *       - ⚡ Tiempo de respuesta\n *\n *       **Códigos de estado:**\n *       - `200`: Todos los servicios funcionando correctamente\n *       - `503`: Uno o más servicios no disponibles\n *     responses:\n *       200:\n *         description: Sistema funcionando correctamente\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/HealthCheck'\n *             example:\n *               status: \"ok\"\n *               timestamp: \"2024-06-29T18:00:00.000Z\"\n *               services:\n *                 slack: \"connected\"\n *                 hubspot: \"connected\"\n *                 database: \"connected\"\n *               version: \"1.0.0\"\n *               uptime: 3600\n *               memory_usage:\n *                 used: \"45.2 MB\"\n *                 total: \"512 MB\"\n *       503:\n *         description: Uno o más servicios no disponibles\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/HealthCheck'\n *             example:\n *               status: \"error\"\n *               timestamp: \"2024-06-29T18:00:00.000Z\"\n *               services:\n *                 slack: \"error\"\n *                 hubspot: \"connected\"\n *                 database: \"connected\"\n *               version: \"1.0.0\"\n *               errors:\n *                 - service: \"slack\"\n *                   message: \"Connection timeout\"\n */\nrouter.get('/health', async (req: Request, res: Response) => {\n  try {\n    const startTime = Date.now();\n\n    // Verificar servicios (mock implementation)\n    const services = {\n      slack: 'connected',\n      hubspot: 'connected',\n      database: 'connected',\n    };\n\n    const responseTime = Date.now() - startTime;\n    const memoryUsage = process.memoryUsage();\n\n    const healthCheck = {\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      services,\n      version: '1.0.0',\n      uptime: process.uptime(),\n      response_time_ms: responseTime,\n      memory_usage: {\n        used: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)} MB`,\n        total: `${Math.round(memoryUsage.heapTotal / 1024 / 1024)} MB`,\n      },\n      environment: process.env.NODE_ENV || 'development',\n    };\n\n    res.json(healthCheck);\n  } catch (error) {\n    res.status(503).json({\n      status: 'error',\n      timestamp: new Date().toISOString(),\n      error: 'Health check failed',\n      message: error instanceof Error ? error.message : 'Unknown error',\n    });\n  }\n});\n\n/**\n * @swagger\n * /health/detailed:\n *   get:\n *     tags: [Health]\n *     summary: Verificación detallada de salud del sistema\n *     description: |\n *       Endpoint que proporciona información detallada sobre el estado de todos los componentes del sistema.\n *\n *       **Incluye verificaciones de:**\n *       - 🔗 APIs externas (Slack, HubSpot, Zapier)\n *       - 💾 Bases de datos y almacenamiento\n *       - 🔑 Validación de tokens y credenciales\n *       - 📊 Métricas de rendimiento\n *       - 🧪 Estado de tests automáticos\n *\n *       > **Nota:** Este endpoint puede tomar más tiempo en responder debido a las verificaciones exhaustivas.\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Verificación detallada exitosa\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   enum: [ok, warning, error]\n *                 timestamp:\n *                   type: string\n *                   format: date-time\n *                 detailed_checks:\n *                   type: object\n *                   properties:\n *                     apis:\n *                       type: object\n *                       properties:\n *                         slack_api:\n *                           type: object\n *                           properties:\n *                             status: { type: string }\n *                             response_time_ms: { type: number }\n *                             last_check: { type: string }\n *                         hubspot_api:\n *                           type: object\n *                           properties:\n *                             status: { type: string }\n *                             response_time_ms: { type: number }\n *                             rate_limit_remaining: { type: number }\n *                     integrations:\n *                       type: object\n *                       properties:\n *                         zapier_webhooks:\n *                           type: object\n *                           properties:\n *                             active_zaps: { type: number }\n *                             last_trigger: { type: string }\n *                         google_sheets:\n *                           type: object\n *                           properties:\n *                             accessible: { type: boolean }\n *                             last_sync: { type: string }\n *             example:\n *               status: \"ok\"\n *               timestamp: \"2024-06-29T18:00:00.000Z\"\n *               detailed_checks:\n *                 apis:\n *                   slack_api:\n *                     status: \"connected\"\n *                     response_time_ms: 245\n *                     last_check: \"2024-06-29T17:59:45.000Z\"\n *                   hubspot_api:\n *                     status: \"connected\"\n *                     response_time_ms: 156\n *                     rate_limit_remaining: 95\n *                 integrations:\n *                   zapier_webhooks:\n *                     active_zaps: 12\n *                     last_trigger: \"2024-06-29T17:45:00.000Z\"\n *                   google_sheets:\n *                     accessible: true\n *                     last_sync: \"2024-06-29T17:30:00.000Z\"\n *       401:\n *         $ref: '#/components/responses/Unauthorized'\n *       503:\n *         description: Fallo en verificaciones detalladas\n */\nrouter.get('/health/detailed', async (req: Request, res: Response) => {\n  // Mock implementation for detailed health check\n  res.json({\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    detailed_checks: {\n      apis: {\n        slack_api: {\n          status: 'connected',\n          response_time_ms: 245,\n          last_check: new Date().toISOString(),\n        },\n        hubspot_api: {\n          status: 'connected',\n          response_time_ms: 156,\n          rate_limit_remaining: 95,\n        },\n      },\n      integrations: {\n        zapier_webhooks: {\n          active_zaps: 12,\n          last_trigger: new Date().toISOString(),\n        },\n        google_sheets: {\n          accessible: true,\n          last_sync: new Date().toISOString(),\n        },\n      },\n    },\n  });\n});\n\n/**\n * @swagger\n * /version:\n *   get:\n *     tags: [Health]\n *     summary: Información de versión de la API\n *     description: |\n *       Obtiene información sobre la versión actual de la API, incluyendo:\n *       - 📦 Versión de la aplicación\n *       - 🏗️ Información de build\n *       - 🕒 Timestamp de despliegue\n *       - 🔧 Versiones de dependencias críticas\n *     responses:\n *       200:\n *         description: Información de versión\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 version:\n *                   type: string\n *                   description: Versión de la aplicación\n *                 build:\n *                   type: object\n *                   properties:\n *                     number: { type: string }\n *                     timestamp: { type: string }\n *                     git_commit: { type: string }\n *                     branch: { type: string }\n *                 dependencies:\n *                   type: object\n *                   properties:\n *                     node: { type: string }\n *                     express: { type: string }\n *                     typescript: { type: string }\n *             example:\n *               version: \"1.0.0\"\n *               build:\n *                 number: \"124\"\n *                 timestamp: \"2024-06-29T15:30:00.000Z\"\n *                 git_commit: \"a1b2c3d\"\n *                 branch: \"main\"\n *               dependencies:\n *                 node: \"18.17.0\"\n *                 express: \"4.18.0\"\n *                 typescript: \"5.0.0\"\n */\nrouter.get('/version', (req: Request, res: Response) => {\n  res.json({\n    version: '1.0.0',\n    build: {\n      number: process.env.BUILD_NUMBER || 'dev',\n      timestamp: new Date().toISOString(),\n      git_commit: process.env.GIT_COMMIT || 'local',\n      branch: process.env.GIT_BRANCH || 'develop',\n    },\n    dependencies: {\n      node: process.version,\n      express: '4.18.0',\n      typescript: '5.0.0',\n    },\n    environment: process.env.NODE_ENV || 'development',\n  });\n});\n\nexport default router;\n"],"version":3}