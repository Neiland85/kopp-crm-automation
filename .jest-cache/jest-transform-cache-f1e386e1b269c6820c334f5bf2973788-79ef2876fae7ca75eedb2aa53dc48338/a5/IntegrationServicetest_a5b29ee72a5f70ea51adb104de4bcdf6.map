{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/__tests__/integration/IntegrationService.test.ts","mappings":";AAAA;;GAEG;;AAKH,6BAA6B;AAC7B,IAAI,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;AACnD,IAAI,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;AACpD,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AANhC,8EAA2E;AAC3E,8DAA2D;AAO3D,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,kBAAsC,CAAC;IAC3C,IAAI,aAA4B,CAAC;IAEjC,UAAU,CAAC,GAAG,EAAE;QACd,aAAa,GAAG,IAAI,6BAAa,EAAE,CAAC;QACpC,kBAAkB,GAAG,IAAI,uCAAkB,CAAC,aAAa,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,CAAC,kBAAkB,CAAC,CAAC,WAAW,EAAE,CAAC;YACzC,MAAM,CAAC,kBAAkB,CAAC,CAAC,cAAc,CAAC,uCAAkB,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,CAAC,OAAO,kBAAkB,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9D,MAAM,CAAC,OAAO,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtE,MAAM,CAAC,OAAO,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,uEAAuE;YACvE,MAAM,MAAM,CACV,kBAAkB,CAAC,gBAAgB,EAAE,CACtC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,CAAC,OAAO,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,+BAA+B;QACtF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,OAAO,GAAG;gBACd,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;gBACf,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;aACf,CAAC;YAEF,MAAM,CAAC,GAAG,EAAE;gBACV,kBAAkB,CAAC,kBAAkB,CAAC,OAAc,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/__tests__/integration/IntegrationService.test.ts"],"sourcesContent":["/**\n * Tests de integraciÃ³n para IntegrationService\n */\n\nimport { IntegrationService } from '../../integrations/IntegrationService';\nimport { ConfigManager } from '../../config/ConfigManager';\n\n// Mock external dependencies\njest.mock('../../integrations/ZapierSlackService');\njest.mock('../../integrations/SlackHubspotService');\njest.mock('../../utils/Logger');\n\ndescribe('Integration Service', () => {\n  let integrationService: IntegrationService;\n  let configManager: ConfigManager;\n\n  beforeEach(() => {\n    configManager = new ConfigManager();\n    integrationService = new IntegrationService(configManager);\n  });\n\n  describe('Initialization', () => {\n    it('should initialize without errors', () => {\n      expect(integrationService).toBeDefined();\n      expect(integrationService).toBeInstanceOf(IntegrationService);\n    });\n\n    it('should have proper service methods', () => {\n      expect(typeof integrationService.initialize).toBe('function');\n      expect(typeof integrationService.setupWebhookRoutes).toBe('function');\n      expect(typeof integrationService.testIntegrations).toBe('function');\n    });\n  });\n\n  describe('Test Integration Endpoint', () => {\n    it('should complete test integrations without errors', async () => {\n      // testIntegrations devuelve void, solo verificamos que no arroje error\n      await expect(\n        integrationService.testIntegrations()\n      ).resolves.not.toThrow();\n    });\n\n    it('should have testIntegrations method defined', () => {\n      expect(typeof integrationService.testIntegrations).toBe('function');\n    });\n  });\n\n  describe('Configuration', () => {\n    it('should use provided config manager', () => {\n      expect(configManager).toBeDefined();\n      expect(configManager.getEnvironment()).toBe('test'); // En tests, NODE_ENV es 'test'\n    });\n\n    it('should handle webhook route setup', () => {\n      const mockApp = {\n        post: jest.fn(),\n        get: jest.fn(),\n      };\n\n      expect(() => {\n        integrationService.setupWebhookRoutes(mockApp as any);\n      }).not.toThrow();\n    });\n  });\n});\n"],"version":3}