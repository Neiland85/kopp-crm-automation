{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/tests/googleSheetsLeadScoring.integration.test.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/tests/googleSheetsLeadScoring.integration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, jest } from '@jest/globals';\n\n// Importar las funciones de Zapier\nimport newGoogleSheetsLeadScoringTrigger from '../src/zapier/triggers/newGoogleSheetsLeadScoring';\nimport updateHubSpotExternalScoreCreate from '../src/zapier/creates/updateHubSpotExternalScore';\nimport sendHighScoreSlackAlertCreate from '../src/zapier/creates/sendHighScoreSlackAlert';\n\n// Mock para request\nconst mockRequest = jest.fn();\n\n// Mock para las utilidades comunes\njest.mock('../src/zapier/utils/common', () => ({\n  withRetry: jest.fn(),\n  logZapAction: jest.fn().mockImplementation(() => Promise.resolve()),\n}));\n\n// Importar los mocks después de la configuración\nimport { withRetry, logZapAction } from '../src/zapier/utils/common';\nconst mockWithRetry = withRetry as jest.MockedFunction<typeof withRetry>;\nconst mockLogZapAction = logZapAction as jest.MockedFunction<\n  typeof logZapAction\n>;\n\n/**\n * Test suite para la integración completa de Google Sheets Lead Scoring\n */\ndescribe('Google Sheets Lead Scoring Integration', () => {\n  const mockZapierZ = {\n    console: {\n      log: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n    },\n    errors: {\n      Error: Error,\n      RefreshAuthError: Error,\n      HaltedError: Error,\n    },\n    request: mockRequest,\n    JSON: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n    cursor: {\n      get: jest.fn().mockReturnValue(null),\n      store: jest.fn(),\n    },\n    dehydrate: jest.fn(),\n    stashFile: jest.fn(),\n  } as any;\n\n  const mockBundle = {\n    authData: {\n      hubspot_api_key: 'test-hubspot-key',\n      slack_webhook_url: 'https://hooks.slack.com/test',\n      google_access_token: 'test-google-token',\n      google_spreadsheet_id: 'test-spreadsheet-id',\n    },\n    inputData: {},\n    cleanedRequest: {},\n    rawRequest: {},\n    targetUrl: 'https://test.com',\n  } as any;\n\n  beforeAll(() => {\n    process.env.NODE_ENV = 'test';\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Configurar el mock por defecto de withRetry para que ejecute la función pasada\n    mockWithRetry.mockImplementation(async (fn: any) => {\n      // Llamar a la función original (que es z.request en la mayoría de casos)\n      return await fn();\n    });\n  });\n\n  describe('Google Sheets Trigger', () => {\n    it('should fetch new lead scoring rows from Google Sheets', async () => {\n      // Usar timestamp actual para que las filas sean consideradas \"nuevas\"\n      const currentTime = new Date();\n      const recentTime = new Date(currentTime.getTime() - 5 * 60 * 1000); // 5 minutos atrás\n\n      // Mock de respuesta de Google Sheets API\n      const mockSheetsResponse = {\n        status: 200,\n        data: {\n          values: [\n            [\n              'Email',\n              'External Score',\n              'Timestamp',\n              'Name',\n              'Company',\n              'Source',\n            ],\n            [\n              'john.doe@example.com',\n              '75',\n              recentTime.toISOString(),\n              'John Doe',\n              'Example Corp',\n              'Website',\n            ],\n            [\n              'jane.smith@example.com',\n              '45',\n              currentTime.toISOString(),\n              'Jane Smith',\n              'Test Inc',\n              'Referral',\n            ],\n          ],\n        },\n      };\n\n      (mockRequest as any).mockResolvedValueOnce(mockSheetsResponse);\n\n      const result = await newGoogleSheetsLeadScoringTrigger.operation.perform(\n        mockZapierZ,\n        mockBundle\n      );\n\n      expect(result).toHaveLength(2);\n      expect(result[0]).toMatchObject({\n        email: 'john.doe@example.com',\n        external_score: 75,\n        name: 'John Doe',\n        company: 'Example Corp',\n      });\n      expect(mockRequest).toHaveBeenCalledWith(\n        expect.objectContaining({\n          url: expect.stringContaining('sheets.googleapis.com'),\n          method: 'GET',\n          headers: expect.objectContaining({\n            Authorization: 'Bearer test-google-token',\n          }),\n        })\n      );\n    });\n\n    it('should handle empty Google Sheets response', async () => {\n      const mockEmptyResponse = {\n        status: 200,\n        data: { values: [] },\n      };\n\n      (mockRequest as any).mockResolvedValueOnce(mockEmptyResponse);\n\n      const result = await newGoogleSheetsLeadScoringTrigger.operation.perform(\n        mockZapierZ,\n        mockBundle\n      );\n\n      expect(result).toHaveLength(0);\n    });\n\n    it('should handle Google Sheets API errors', async () => {\n      (mockRequest as any).mockRejectedValueOnce(new Error('API Error'));\n\n      await expect(\n        newGoogleSheetsLeadScoringTrigger.operation.perform(\n          mockZapierZ,\n          mockBundle\n        )\n      ).rejects.toThrow('API Error');\n    });\n  });\n\n  describe('HubSpot External Score Update', () => {\n    it('should update external_score for existing contact', async () => {\n      const inputData = {\n        email: 'john.doe@example.com',\n        external_score: 75,\n      };\n\n      // Mock search response\n      const mockSearchResponse = {\n        status: 200,\n        data: {\n          results: [\n            {\n              id: '12345',\n              properties: {\n                email: 'john.doe@example.com',\n                external_score: '50',\n              },\n            },\n          ],\n        },\n      };\n\n      // Mock update response\n      const mockUpdateResponse = {\n        status: 200,\n        data: {\n          id: '12345',\n          updatedAt: '2024-01-15T10:30:00Z',\n          properties: {\n            external_score: '75',\n          },\n        },\n      };\n\n      (mockRequest as any)\n        .mockResolvedValueOnce(mockSearchResponse)\n        .mockResolvedValueOnce(mockUpdateResponse);\n\n      const bundleWithInput = { ...mockBundle, inputData };\n      const result = await updateHubSpotExternalScoreCreate.operation.perform(\n        mockZapierZ,\n        bundleWithInput\n      );\n\n      expect(result).toMatchObject({\n        id: '12345',\n        properties: {\n          email: 'john.doe@example.com',\n          external_score: '75',\n        },\n      });\n\n      expect(mockRequest).toHaveBeenCalledTimes(2);\n      expect(mockRequest).toHaveBeenNthCalledWith(\n        1,\n        expect.objectContaining({\n          url: 'https://api.hubapi.com/crm/v3/objects/contacts/search',\n          method: 'POST',\n        })\n      );\n      expect(mockRequest).toHaveBeenNthCalledWith(\n        2,\n        expect.objectContaining({\n          url: 'https://api.hubapi.com/crm/v3/objects/contacts/12345',\n          method: 'PATCH',\n        })\n      );\n    });\n\n    it('should handle contact not found error', async () => {\n      const inputData = {\n        email: 'nonexistent@example.com',\n        external_score: 75,\n      };\n\n      const mockSearchResponse = {\n        status: 200,\n        data: { results: [] },\n      };\n\n      (mockRequest as any).mockResolvedValueOnce(mockSearchResponse);\n\n      const bundleWithInput = { ...mockBundle, inputData };\n\n      await expect(\n        updateHubSpotExternalScoreCreate.operation.perform(\n          mockZapierZ,\n          bundleWithInput\n        )\n      ).rejects.toThrow(\n        'Contact with email nonexistent@example.com not found in HubSpot'\n      );\n    });\n\n    it('should validate required input fields', async () => {\n      const bundleWithInput = { ...mockBundle, inputData: {} };\n\n      await expect(\n        updateHubSpotExternalScoreCreate.operation.perform(\n          mockZapierZ,\n          bundleWithInput\n        )\n      ).rejects.toThrow('Email is required');\n    });\n  });\n\n  describe('Slack High Score Alert', () => {\n    it('should send alert for high scores (> 50)', async () => {\n      const inputData = {\n        email: 'john.doe@example.com',\n        external_score: 75,\n        name: 'John Doe',\n        company: 'Example Corp',\n      };\n\n      const mockSlackResponse = {\n        status: 200,\n        content: 'ok',\n      };\n\n      (mockRequest as any).mockResolvedValueOnce(mockSlackResponse);\n\n      const bundleWithInput = { ...mockBundle, inputData };\n      const result = await sendHighScoreSlackAlertCreate.operation.perform(\n        mockZapierZ,\n        bundleWithInput\n      );\n\n      expect(result).toMatchObject({\n        ok: true,\n        channel: '#scoring-leads',\n      });\n\n      expect(mockRequest).toHaveBeenCalledWith(\n        expect.objectContaining({\n          url: 'https://hooks.slack.com/test',\n          method: 'POST',\n          json: expect.objectContaining({\n            blocks: expect.arrayContaining([\n              expect.objectContaining({\n                type: 'header',\n                text: expect.objectContaining({\n                  text: '🚨 High Lead Score Alert',\n                }),\n              }),\n            ]),\n          }),\n        })\n      );\n    });\n\n    it('should skip alert for low scores (<= 50)', async () => {\n      const inputData = {\n        email: 'jane.smith@example.com',\n        external_score: 30,\n      };\n\n      const bundleWithInput = { ...mockBundle, inputData };\n      const result = await sendHighScoreSlackAlertCreate.operation.perform(\n        mockZapierZ,\n        bundleWithInput\n      );\n\n      expect(result).toMatchObject({\n        ok: true,\n        message: {\n          text: 'Alert skipped - score not greater than 50',\n        },\n      });\n\n      expect(mockRequest).not.toHaveBeenCalled();\n    });\n\n    it('should handle Slack webhook errors', async () => {\n      const inputData = {\n        email: 'john.doe@example.com',\n        external_score: 75,\n      };\n\n      (mockRequest as any).mockResolvedValueOnce({\n        status: 400,\n        content: 'Invalid request',\n      });\n\n      const bundleWithInput = { ...mockBundle, inputData };\n\n      await expect(\n        sendHighScoreSlackAlertCreate.operation.perform(\n          mockZapierZ,\n          bundleWithInput\n        )\n      ).rejects.toThrow('Slack webhook returned: Invalid request');\n    });\n  });\n\n  describe('End-to-End Integration Flow', () => {\n    it('should complete full workflow: Google Sheets → HubSpot → Slack', async () => {\n      // Usar timestamp actual para que las filas sean consideradas \"nuevas\"\n      const currentTime = new Date();\n\n      // 1. Simular trigger de Google Sheets\n      const mockSheetsResponse = {\n        status: 200,\n        data: {\n          values: [\n            ['Email', 'External Score', 'Timestamp', 'Name', 'Company'],\n            [\n              'john.doe@example.com',\n              '85',\n              currentTime.toISOString(),\n              'John Doe',\n              'Example Corp',\n            ],\n          ],\n        },\n      };\n\n      // 2. Mock respuestas de HubSpot\n      const mockSearchResponse = {\n        status: 200,\n        data: {\n          results: [\n            {\n              id: '12345',\n              properties: {\n                email: 'john.doe@example.com',\n                external_score: '60',\n              },\n            },\n          ],\n        },\n      };\n\n      const mockUpdateResponse = {\n        status: 200,\n        data: {\n          id: '12345',\n          updatedAt: '2024-01-15T10:30:00Z',\n          properties: { external_score: '85' },\n        },\n      };\n\n      // 3. Mock respuesta de Slack\n      const mockSlackResponse = {\n        status: 200,\n        content: 'ok',\n      };\n\n      (mockRequest as any)\n        .mockResolvedValueOnce(mockSheetsResponse) // Google Sheets\n        .mockResolvedValueOnce(mockSearchResponse) // HubSpot search\n        .mockResolvedValueOnce(mockUpdateResponse) // HubSpot update\n        .mockResolvedValueOnce(mockSlackResponse); // Slack webhook\n\n      // Ejecutar el flujo completo\n      // 1. Trigger de Google Sheets\n      const triggerResult =\n        await newGoogleSheetsLeadScoringTrigger.operation.perform(\n          mockZapierZ,\n          mockBundle\n        );\n      expect(triggerResult).toHaveLength(1);\n\n      const leadData = triggerResult[0];\n      expect(leadData.external_score).toBe(85);\n      expect(leadData.email).toBe('john.doe@example.com');\n\n      // 2. Actualizar HubSpot\n      const hubspotBundle = { ...mockBundle, inputData: leadData };\n      const hubspotResult =\n        await updateHubSpotExternalScoreCreate.operation.perform(\n          mockZapierZ,\n          hubspotBundle\n        );\n      expect(hubspotResult.properties.external_score).toBe('85');\n\n      // 3. Enviar alerta de Slack (score > 50)\n      const slackBundle = { ...mockBundle, inputData: leadData };\n      const slackResult = await sendHighScoreSlackAlertCreate.operation.perform(\n        mockZapierZ,\n        slackBundle\n      );\n      expect(slackResult.ok).toBe(true);\n\n      // Verificar que se realizaron todas las llamadas\n      expect(mockRequest).toHaveBeenCalledTimes(4);\n    });\n\n    it('should handle partial failures gracefully', async () => {\n      // Simular fallo en HubSpot pero éxito en Google Sheets\n      const mockSheetsResponse = {\n        status: 200,\n        data: {\n          values: [\n            ['Email', 'External Score'],\n            ['test@example.com', '90'],\n          ],\n        },\n      };\n\n      (mockRequest as any)\n        .mockResolvedValueOnce(mockSheetsResponse) // Google Sheets success\n        .mockRejectedValueOnce(new Error('HubSpot API Error')); // HubSpot failure\n\n      // 1. Google Sheets debería funcionar\n      const triggerResult =\n        await newGoogleSheetsLeadScoringTrigger.operation.perform(\n          mockZapierZ,\n          mockBundle\n        );\n      expect(triggerResult).toHaveLength(1);\n\n      // 2. HubSpot debería fallar\n      const hubspotBundle = { ...mockBundle, inputData: triggerResult[0] };\n      await expect(\n        updateHubSpotExternalScoreCreate.operation.perform(\n          mockZapierZ,\n          hubspotBundle\n        )\n      ).rejects.toThrow('HubSpot API Error');\n    });\n  });\n});\n"],"version":3}