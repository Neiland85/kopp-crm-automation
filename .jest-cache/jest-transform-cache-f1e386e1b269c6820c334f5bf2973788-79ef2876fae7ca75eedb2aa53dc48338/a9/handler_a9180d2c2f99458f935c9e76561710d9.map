{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zaps/reputometro/handler.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zaps/reputometro/handler.ts"],"sourcesContent":["import { Client } from '@hubspot/api-client';\nimport { WebClient, Block, KnownBlock } from '@slack/web-api';\nimport { Logger } from '../../utils/Logger';\n\n// Configurar logger espec√≠fico para Reput√≥metro\nconst logger = new Logger('reputometro');\n\n/**\n * üéØ Handler principal del Reput√≥metro Invisible\n *\n * Funcionalidades:\n * 1. Consulta HubSpot por leads activos (√∫ltima hora)\n * 2. Calcula lead_influence_score = views * 0.5 + submissions * 2\n * 3. Actualiza propiedades en HubSpot\n * 4. Env√≠a reporte Block Kit a Slack\n */\n\nexport interface ReputometroConfig {\n  hubspotApiKey: string;\n  slackBotToken: string;\n  slackSigningSecret: string;\n  slackChannel: string;\n  isEnabled: boolean;\n}\n\nexport interface LeadData {\n  id: string;\n  email: string;\n  views: number;\n  submissions: number;\n  lastSubmissionDate: string;\n  currentScore?: number;\n}\n\nexport interface CalculatedLead extends LeadData {\n  leadInfluenceScore: number;\n  scoreChange: number;\n}\n\nexport interface ReputometroResult {\n  id: string;\n  timestamp: string;\n  totalLeads: number;\n  avgScore: number;\n  topLeads: Array<{\n    email: string;\n    score: number;\n  }>;\n  slackMessageSent: boolean;\n  hubspotUpdates: number;\n  executionTimeMs: number;\n}\n\n/**\n * Retry helper con backoff exponencial\n */\nasync function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n\n      if (attempt === maxRetries) {\n        break;\n      }\n\n      const delay = baseDelay * Math.pow(2, attempt - 1);\n      logger.warn(`Reintento ${attempt}/${maxRetries} en ${delay}ms`, {\n        error: lastError.message,\n        attempt,\n        delay,\n      });\n\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n  }\n\n  throw lastError!;\n}\n\n/**\n * Obtener leads activos de HubSpot (√∫ltima hora)\n */\nasync function getActiveLeads(hubspotClient: Client): Promise<LeadData[]> {\n  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();\n\n  try {\n    logger.info('üîç Consultando HubSpot por leads activos', {\n      since: oneHourAgo,\n      component: 'hubspot-query',\n    });\n\n    const response = await retryWithBackoff(async () => {\n      return await hubspotClient.crm.contacts.searchApi.doSearch({\n        filterGroups: [\n          {\n            filters: [\n              {\n                propertyName: 'last_submission_date',\n                operator: 'GTE' as any, // HubSpot API type issue\n                value: oneHourAgo,\n              },\n            ],\n          },\n        ],\n        properties: [\n          'email',\n          'page_views',\n          'form_submissions',\n          'last_submission_date',\n          'lead_influence_score',\n        ],\n        limit: 100,\n      });\n    });\n\n    const leads: LeadData[] = response.results.map((contact) => ({\n      id: contact.id,\n      email: contact.properties.email || '',\n      views: parseInt(contact.properties.page_views || '0', 10),\n      submissions: parseInt(contact.properties.form_submissions || '0', 10),\n      lastSubmissionDate: contact.properties.last_submission_date || '',\n      currentScore: parseFloat(contact.properties.lead_influence_score || '0'),\n    }));\n\n    logger.info(`‚úÖ Encontrados ${leads.length} leads activos`, {\n      count: leads.length,\n      component: 'hubspot-query',\n    });\n\n    return leads;\n  } catch (error) {\n    logger.error('‚ùå Error consultando HubSpot', {\n      error: error instanceof Error ? error.message : String(error),\n      component: 'hubspot-query',\n    });\n    throw error;\n  }\n}\n\n/**\n * Calcular lead influence score\n * Formula: views * 0.5 + submissions * 2\n */\nfunction calculateLeadScores(leads: LeadData[]): CalculatedLead[] {\n  return leads.map((lead) => {\n    const leadInfluenceScore = lead.views * 0.5 + lead.submissions * 2;\n    const scoreChange = leadInfluenceScore - (lead.currentScore || 0);\n\n    logger.debug('üìä Score calculado para lead', {\n      email: lead.email,\n      views: lead.views,\n      submissions: lead.submissions,\n      previousScore: lead.currentScore,\n      newScore: leadInfluenceScore,\n      change: scoreChange,\n    });\n\n    return {\n      ...lead,\n      leadInfluenceScore: Math.round(leadInfluenceScore * 100) / 100, // Redondear a 2 decimales\n      scoreChange: Math.round(scoreChange * 100) / 100,\n    };\n  });\n}\n\n/**\n * Actualizar scores en HubSpot\n */\nasync function updateHubSpotScores(\n  hubspotClient: Client,\n  calculatedLeads: CalculatedLead[]\n): Promise<number> {\n  let updatedCount = 0;\n\n  logger.info('üîÑ Actualizando scores en HubSpot', {\n    totalLeads: calculatedLeads.length,\n    component: 'hubspot-update',\n  });\n\n  for (const lead of calculatedLeads) {\n    if (Math.abs(lead.scoreChange) < 0.1) {\n      // Skip if change is minimal\n      continue;\n    }\n\n    try {\n      await retryWithBackoff(async () => {\n        await hubspotClient.crm.contacts.basicApi.update(lead.id, {\n          properties: {\n            lead_influence_score: lead.leadInfluenceScore.toString(),\n            last_score_update: new Date().toISOString(),\n          },\n        });\n      });\n\n      updatedCount++;\n\n      logger.debug('‚úÖ Score actualizado', {\n        contactId: lead.id,\n        email: lead.email,\n        newScore: lead.leadInfluenceScore,\n        change: lead.scoreChange,\n      });\n    } catch (error) {\n      logger.error('‚ùå Error actualizando score', {\n        contactId: lead.id,\n        email: lead.email,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n\n  logger.info(`‚úÖ Actualizados ${updatedCount} scores en HubSpot`, {\n    updated: updatedCount,\n    total: calculatedLeads.length,\n    component: 'hubspot-update',\n  });\n\n  return updatedCount;\n}\n\n/**\n * Crear mensaje Block Kit para Slack\n */\nfunction createSlackBlocks(\n  totalLeads: number,\n  avgScore: number,\n  topLeads: CalculatedLead[]\n): (Block | KnownBlock)[] {\n  const topThree = topLeads.slice(0, 3);\n  const topEmails = topThree\n    .map((lead) => `‚Ä¢ ${lead.email} (${lead.leadInfluenceScore})`)\n    .join('\\n');\n\n  return [\n    {\n      type: 'header',\n      text: {\n        type: 'plain_text',\n        text: '‚ö° Reput√≥metro Invisible',\n        emoji: true,\n      },\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*Total:*\\n${totalLeads} leads`,\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Score medio:*\\n${avgScore}`,\n        },\n      ],\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*Top 3:*\\n${topEmails || 'Sin leads en esta ejecuci√≥n'}`,\n      },\n    },\n    {\n      type: 'context',\n      elements: [\n        {\n          type: 'mrkdwn',\n          text: `üìä Actualizado: ${new Date().toLocaleString('es-ES', { timeZone: 'America/Mexico_City' })} | ü§ñ Kopp Stadium CRM`,\n        },\n      ],\n    },\n  ];\n}\n\n/**\n * Enviar reporte a Slack\n */\nasync function sendSlackReport(\n  slackClient: WebClient,\n  channel: string,\n  totalLeads: number,\n  avgScore: number,\n  topLeads: CalculatedLead[]\n): Promise<boolean> {\n  try {\n    logger.info('üì± Enviando reporte a Slack', {\n      channel,\n      totalLeads,\n      avgScore,\n      component: 'slack-report',\n    });\n\n    const blocks = createSlackBlocks(totalLeads, avgScore, topLeads);\n\n    await retryWithBackoff(async () => {\n      await slackClient.chat.postMessage({\n        channel,\n        blocks,\n        text: `‚ö° Reput√≥metro Invisible - ${totalLeads} leads procesados`,\n      });\n    });\n\n    logger.info('‚úÖ Reporte enviado a Slack exitosamente', {\n      channel,\n      component: 'slack-report',\n    });\n\n    return true;\n  } catch (error) {\n    logger.error('‚ùå Error enviando reporte a Slack', {\n      channel,\n      error: error instanceof Error ? error.message : String(error),\n      component: 'slack-report',\n    });\n    return false;\n  }\n}\n\n/**\n * Handler principal del Reput√≥metro\n */\nexport async function reputometroHandler(\n  config: ReputometroConfig\n): Promise<ReputometroResult> {\n  const startTime = Date.now();\n  const executionId = `reputometro_${Date.now()}`;\n\n  logger.info('üéØ Iniciando Reput√≥metro Handler', {\n    executionId,\n    timestamp: new Date().toISOString(),\n    component: 'main-handler',\n  });\n\n  try {\n    // Inicializar clientes\n    const hubspotClient = new Client({ accessToken: config.hubspotApiKey });\n    const slackClient = new WebClient(config.slackBotToken);\n\n    // 1. Obtener leads activos\n    const activeLeads = await getActiveLeads(hubspotClient);\n\n    if (activeLeads.length === 0) {\n      logger.info('‚ÑπÔ∏è No hay leads activos en la √∫ltima hora', {\n        executionId,\n        component: 'main-handler',\n      });\n\n      // Enviar reporte vac√≠o a Slack\n      await sendSlackReport(slackClient, config.slackChannel, 0, 0, []);\n\n      return {\n        id: executionId,\n        timestamp: new Date().toISOString(),\n        totalLeads: 0,\n        avgScore: 0,\n        topLeads: [],\n        slackMessageSent: true,\n        hubspotUpdates: 0,\n        executionTimeMs: Date.now() - startTime,\n      };\n    }\n\n    // 2. Calcular scores\n    const calculatedLeads = calculateLeadScores(activeLeads);\n\n    // 3. Actualizar HubSpot\n    const hubspotUpdates = await updateHubSpotScores(\n      hubspotClient,\n      calculatedLeads\n    );\n\n    // 4. Preparar estad√≠sticas\n    const scores = calculatedLeads.map((lead) => lead.leadInfluenceScore);\n    const avgScore =\n      Math.round(\n        (scores.reduce((sum, score) => sum + score, 0) / scores.length) * 100\n      ) / 100;\n    const topLeads = calculatedLeads\n      .sort((a, b) => b.leadInfluenceScore - a.leadInfluenceScore)\n      .slice(0, 3);\n\n    // 5. Enviar reporte a Slack\n    const slackMessageSent = await sendSlackReport(\n      slackClient,\n      config.slackChannel,\n      calculatedLeads.length,\n      avgScore,\n      topLeads\n    );\n\n    const result: ReputometroResult = {\n      id: executionId,\n      timestamp: new Date().toISOString(),\n      totalLeads: calculatedLeads.length,\n      avgScore,\n      topLeads: topLeads.map((lead) => ({\n        email: lead.email,\n        score: lead.leadInfluenceScore,\n      })),\n      slackMessageSent,\n      hubspotUpdates,\n      executionTimeMs: Date.now() - startTime,\n    };\n\n    logger.info('üéâ Reput√≥metro Handler completado exitosamente', {\n      ...result,\n      component: 'main-handler',\n    });\n\n    return result;\n  } catch (error) {\n    const executionTimeMs = Date.now() - startTime;\n\n    logger.error('‚ùå Error en Reput√≥metro Handler', {\n      executionId,\n      error: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined,\n      executionTimeMs,\n      component: 'main-handler',\n    });\n\n    throw error;\n  }\n}\n"],"version":3}