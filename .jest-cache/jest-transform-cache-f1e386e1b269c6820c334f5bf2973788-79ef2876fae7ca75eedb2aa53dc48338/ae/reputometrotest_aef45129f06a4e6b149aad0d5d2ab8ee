50353668aba80f2807de277ab1a18b9f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies BEFORE any imports
globals_1.jest.mock('@hubspot/api-client');
globals_1.jest.mock('@slack/web-api');
globals_1.jest.mock('../../src/utils/Logger');
const handler_1 = require("../../src/zaps/reputometro/handler");
const Logger_1 = require("../../src/utils/Logger");
/**
 * 🧪 Tests del Reputómetro Invisible
 *
 * Cobertura:
 * 1. Handler principal con datos mock
 * 2. Cálculo de scores
 * 3. Integración HubSpot (mocked)
 * 4. Integración Slack (mocked)
 * 5. Manejo de errores
 * 6. Retry con backoff exponencial
 */
const mockHubSpotClient = {
    crm: {
        contacts: {
            searchApi: {
                doSearch: globals_1.jest.fn(),
            },
            basicApi: {
                update: globals_1.jest.fn(),
            },
        },
    },
};
const mockSlackClient = {
    chat: {
        postMessage: globals_1.jest.fn(),
    },
};
const mockConfig = {
    hubspotApiKey: 'test-hubspot-key',
    slackBotToken: 'test-slack-token',
    slackSigningSecret: 'test-slack-secret',
    slackChannel: '#test-scoring-leads',
    isEnabled: true,
};
const mockLeadsData = {
    results: [
        {
            id: '1001',
            properties: {
                email: 'lead1@empresa.com',
                page_views: '10',
                form_submissions: '2',
                last_submission_date: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 min ago
                lead_influence_score: '3.0',
            },
        },
        {
            id: '1002',
            properties: {
                email: 'lead2@startup.com',
                page_views: '15',
                form_submissions: '3',
                last_submission_date: new Date(Date.now() - 45 * 60 * 1000).toISOString(), // 45 min ago
                lead_influence_score: '5.5',
            },
        },
        {
            id: '1003',
            properties: {
                email: 'lead3@acme.com',
                page_views: '8',
                form_submissions: '1',
                last_submission_date: new Date(Date.now() - 20 * 60 * 1000).toISOString(), // 20 min ago
                lead_influence_score: '2.0',
            },
        },
    ],
};
(0, globals_1.describe)('Reputómetro Invisible', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        // Mock HubSpot Client constructor
        globals_1.jest
            .mocked(require('@hubspot/api-client').Client)
            .mockImplementation(() => mockHubSpotClient);
        // Mock Slack WebClient constructor
        globals_1.jest
            .mocked(require('@slack/web-api').WebClient)
            .mockImplementation(() => mockSlackClient);
        // Mock Logger
        const mockLogger = {
            info: globals_1.jest.fn(),
            error: globals_1.jest.fn(),
            warn: globals_1.jest.fn(),
            debug: globals_1.jest.fn(),
        };
        globals_1.jest.mocked(Logger_1.Logger).mockImplementation(() => mockLogger);
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.resetAllMocks();
    });
    (0, globals_1.describe)('Handler Principal', () => {
        (0, globals_1.it)('should process leads successfully with valid data', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(mockLeadsData);
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({
                ok: true,
                ts: '123456789',
            });
            // Act
            const result = await (0, handler_1.reputometroHandler)(mockConfig);
            // Assert
            (0, globals_1.expect)(result).toEqual({
                id: globals_1.expect.stringMatching(/^reputometro_\d+$/),
                timestamp: globals_1.expect.any(String),
                totalLeads: 3,
                avgScore: globals_1.expect.any(Number),
                topLeads: globals_1.expect.arrayContaining([
                    globals_1.expect.objectContaining({
                        email: globals_1.expect.any(String),
                        score: globals_1.expect.any(Number),
                    }),
                ]),
                slackMessageSent: true,
                hubspotUpdates: globals_1.expect.any(Number),
                executionTimeMs: globals_1.expect.any(Number),
            });
            (0, globals_1.expect)(mockHubSpotClient.crm.contacts.searchApi.doSearch).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                filterGroups: globals_1.expect.arrayContaining([
                    globals_1.expect.objectContaining({
                        filters: globals_1.expect.arrayContaining([
                            globals_1.expect.objectContaining({
                                propertyName: 'last_submission_date',
                                operator: 'GTE',
                            }),
                        ]),
                    }),
                ]),
            }));
            (0, globals_1.expect)(mockSlackClient.chat.postMessage).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                channel: '#test-scoring-leads',
                blocks: globals_1.expect.any(Array),
                text: globals_1.expect.stringContaining('leads procesados'),
            }));
        });
        (0, globals_1.it)('should handle empty leads gracefully', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue({
                results: [],
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({
                ok: true,
                ts: '123456789',
            });
            // Act
            const result = await (0, handler_1.reputometroHandler)(mockConfig);
            // Assert
            (0, globals_1.expect)(result).toEqual({
                id: globals_1.expect.stringMatching(/^reputometro_\d+$/),
                timestamp: globals_1.expect.any(String),
                totalLeads: 0,
                avgScore: 0,
                topLeads: [],
                slackMessageSent: true,
                hubspotUpdates: 0,
                executionTimeMs: globals_1.expect.any(Number),
            });
            (0, globals_1.expect)(mockSlackClient.chat.postMessage).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                channel: '#test-scoring-leads',
                text: globals_1.expect.stringContaining('0 leads procesados'),
            }));
        });
        (0, globals_1.it)('should calculate lead influence scores correctly', async () => {
            // Arrange
            const testLead = {
                results: [
                    {
                        id: '2001',
                        properties: {
                            email: 'test@example.com',
                            page_views: '20', // 20 * 0.5 = 10
                            form_submissions: '5', // 5 * 2 = 10
                            last_submission_date: new Date().toISOString(),
                            lead_influence_score: '0',
                        },
                    },
                ],
            };
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(testLead);
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const result = await (0, handler_1.reputometroHandler)(mockConfig);
            // Assert
            (0, globals_1.expect)(result.topLeads[0].score).toBe(20); // 10 + 10 = 20
            (0, globals_1.expect)(result.avgScore).toBe(20);
            // Verificar que se llamó update con el score correcto
            (0, globals_1.expect)(mockHubSpotClient.crm.contacts.basicApi.update).toHaveBeenCalledWith('2001', globals_1.expect.objectContaining({
                properties: globals_1.expect.objectContaining({
                    lead_influence_score: '20',
                }),
            }));
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle HubSpot API errors gracefully', async () => {
            // Arrange
            const hubspotError = new Error('HubSpot API rate limit exceeded');
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockRejectedValue(hubspotError);
            // Act & Assert
            await (0, globals_1.expect)((0, handler_1.reputometroHandler)(mockConfig)).rejects.toThrow('HubSpot API rate limit exceeded');
        });
        (0, globals_1.it)('should handle Slack API errors and continue processing', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(mockLeadsData);
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockRejectedValue(new Error('Slack API error'));
            // Act
            const result = await (0, handler_1.reputometroHandler)(mockConfig);
            // Assert
            (0, globals_1.expect)(result.slackMessageSent).toBe(false);
            (0, globals_1.expect)(result.totalLeads).toBeGreaterThan(0); // Processing should continue
        });
        (0, globals_1.it)('should handle individual HubSpot update failures', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(mockLeadsData);
            // Mock para que falle solo en algunas actualizaciones
            mockHubSpotClient.crm.contacts.basicApi.update
                .mockResolvedValueOnce({ id: 'updated-1' })
                .mockRejectedValueOnce(new Error('Update failed'))
                .mockResolvedValueOnce({ id: 'updated-3' });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const result = await (0, handler_1.reputometroHandler)(mockConfig);
            // Assert
            (0, globals_1.expect)(result.hubspotUpdates).toBeLessThanOrEqual(result.totalLeads); // Some updates may fail
            (0, globals_1.expect)(result.slackMessageSent).toBe(true); // Slack still works
        });
    });
    (0, globals_1.describe)('Retry Logic', () => {
        (0, globals_1.it)('should retry failed HubSpot calls with exponential backoff', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.searchApi.doSearch
                .mockRejectedValueOnce(new Error('Temporary failure'))
                .mockRejectedValueOnce(new Error('Temporary failure'))
                .mockResolvedValueOnce(mockLeadsData);
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const result = await (0, handler_1.reputometroHandler)(mockConfig);
            // Assert
            (0, globals_1.expect)(mockHubSpotClient.crm.contacts.searchApi.doSearch).toHaveBeenCalledTimes(3);
            (0, globals_1.expect)(result.totalLeads).toBe(3);
        });
        (0, globals_1.it)('should fail after max retries exceeded', async () => {
            // Arrange
            const persistentError = new Error('Persistent API failure');
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockRejectedValue(persistentError);
            // Act & Assert
            await (0, globals_1.expect)((0, handler_1.reputometroHandler)(mockConfig)).rejects.toThrow('Persistent API failure');
            (0, globals_1.expect)(mockHubSpotClient.crm.contacts.searchApi.doSearch).toHaveBeenCalledTimes(3); // Default max retries
        });
    });
    (0, globals_1.describe)('Slack Block Kit Messages', () => {
        (0, globals_1.it)('should create proper Block Kit structure for reports', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(mockLeadsData);
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            await (0, handler_1.reputometroHandler)(mockConfig);
            // Assert
            const slackCall = mockSlackClient.chat.postMessage.mock.calls[0][0];
            (0, globals_1.expect)(slackCall).toEqual(globals_1.expect.objectContaining({
                channel: '#test-scoring-leads',
                blocks: globals_1.expect.arrayContaining([
                    globals_1.expect.objectContaining({
                        type: 'header',
                        text: globals_1.expect.objectContaining({
                            text: '⚡ Reputómetro Invisible',
                        }),
                    }),
                    globals_1.expect.objectContaining({
                        type: 'section',
                        fields: globals_1.expect.arrayContaining([
                            globals_1.expect.objectContaining({
                                text: globals_1.expect.stringContaining('*Total:*'),
                            }),
                            globals_1.expect.objectContaining({
                                text: globals_1.expect.stringContaining('*Score medio:*'),
                            }),
                        ]),
                    }),
                    globals_1.expect.objectContaining({
                        type: 'section',
                        text: globals_1.expect.objectContaining({
                            text: globals_1.expect.stringContaining('*Top 3:*'),
                        }),
                    }),
                ]),
            }));
        });
        (0, globals_1.it)('should handle empty leads in Slack message', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue({
                results: [],
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            await (0, handler_1.reputometroHandler)(mockConfig);
            // Assert
            const slackCall = mockSlackClient.chat.postMessage.mock
                .calls[0][0];
            const topSection = slackCall.blocks.find((block) => block.text?.text?.includes('*Top 3:*'));
            (0, globals_1.expect)(topSection.text.text).toContain('Sin leads en esta ejecución');
        });
    });
    (0, globals_1.describe)('Performance', () => {
        (0, globals_1.it)('should complete execution within reasonable time', async () => {
            // Arrange
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(mockLeadsData);
            mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({
                id: 'updated',
            });
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const startTime = Date.now();
            const result = await (0, handler_1.reputometroHandler)(mockConfig);
            const actualExecutionTime = Date.now() - startTime;
            // Assert
            (0, globals_1.expect)(result.executionTimeMs).toBeLessThan(10000); // Should complete in under 10 seconds
            (0, globals_1.expect)(result.executionTimeMs).toBeCloseTo(actualExecutionTime, -2); // Within 100ms accuracy
        });
    });
    (0, globals_1.describe)('Data Validation', () => {
        (0, globals_1.it)('should handle missing or invalid lead data gracefully', async () => {
            // Arrange
            const invalidLeadsData = {
                results: [
                    {
                        id: '3001',
                        properties: {
                            email: 'valid@example.com', // Valid email
                            page_views: '0', // Valid number but 0
                            form_submissions: '0', // Valid number but 0
                            last_submission_date: new Date().toISOString(), // Valid date
                            lead_influence_score: '0', // Valid score but 0
                        },
                    },
                ],
            };
            mockHubSpotClient.crm.contacts.searchApi.doSearch.mockResolvedValue(invalidLeadsData);
            mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });
            // Act
            const result = await (0, handler_1.reputometroHandler)(mockConfig);
            // Assert
            (0, globals_1.expect)(result.totalLeads).toBe(1);
            (0, globals_1.expect)(result.topLeads[0].score).toBe(0); // Should be 0 for valid data (0 * 0.5 + 0 * 2 = 0)
            (0, globals_1.expect)(result.avgScore).toBe(0); // Average should also be 0
        });
    });
});
(0, globals_1.describe)('Score Calculation Edge Cases', () => {
    const calculateScore = (views, submissions) => {
        return Math.round((views * 0.5 + submissions * 2) * 100) / 100;
    };
    (0, globals_1.it)('should calculate scores correctly for edge cases', () => {
        (0, globals_1.expect)(calculateScore(0, 0)).toBe(0);
        (0, globals_1.expect)(calculateScore(1, 0)).toBe(0.5);
        (0, globals_1.expect)(calculateScore(0, 1)).toBe(2);
        (0, globals_1.expect)(calculateScore(10, 5)).toBe(15); // 5 + 10 = 15
        (0, globals_1.expect)(calculateScore(100, 0)).toBe(50); // 100 * 0.5 = 50
        (0, globals_1.expect)(calculateScore(0, 50)).toBe(100); // 50 * 2 = 100
    });
    (0, globals_1.it)('should handle decimal precision correctly', () => {
        (0, globals_1.expect)(calculateScore(3, 0)).toBe(1.5); // 3 * 0.5 = 1.5
        (0, globals_1.expect)(calculateScore(7, 1)).toBe(5.5); // 3.5 + 2 = 5.5
        (0, globals_1.expect)(calculateScore(13, 3)).toBe(12.5); // 6.5 + 6 = 12.5
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,