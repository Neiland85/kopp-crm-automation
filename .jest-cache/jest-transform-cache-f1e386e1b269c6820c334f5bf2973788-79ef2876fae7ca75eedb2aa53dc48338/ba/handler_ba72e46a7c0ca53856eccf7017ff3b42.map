{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zaps/hot-leads/handler.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zaps/hot-leads/handler.ts"],"sourcesContent":["import { Client } from '@hubspot/api-client';\nimport { WebClient, Block, KnownBlock } from '@slack/web-api';\nimport { Logger } from '../../utils/Logger';\n\n// Configurar logger espec√≠fico para Hot Leads\nconst logger = new Logger('hot-leads');\n\n/**\n * üö® Handler principal de Hot Leads Detection\n *\n * Funcionalidades:\n * 1. Actualiza lead_status = 'Hot Lead' en HubSpot\n * 2. Env√≠a alerta inmediata a Slack #hot-leads\n * 3. Maneja errores con reintentos exponenciales\n */\n\nexport interface HotLeadsConfig {\n  hubspotApiKey: string;\n  slackBotToken: string;\n  slackSigningSecret: string;\n  slackChannel: string;\n  hotLeadThreshold: number;\n  isEnabled: boolean;\n}\n\nexport interface HotLeadTriggerData {\n  contactId: string;\n  email: string;\n  leadInfluenceScore: number;\n  previousScore?: number;\n  timestamp: string;\n  hubspotPortalId: string;\n}\n\nexport interface HotLeadsResult {\n  id: string;\n  timestamp: string;\n  contactId: string;\n  email: string;\n  previousScore: number;\n  newScore: number;\n  statusUpdated: boolean;\n  slackMessageSent: boolean;\n  executionTimeMs: number;\n  error?: string;\n  skipped?: boolean;\n  reason?: string;\n}\n\n/**\n * Retry helper con backoff exponencial\n */\nasync function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n\n      if (attempt === maxRetries) {\n        break;\n      }\n\n      const delay = baseDelay * Math.pow(2, attempt - 1);\n      logger.warn(\n        `Reintento Hot Leads ${attempt}/${maxRetries} en ${delay}ms`,\n        {\n          error: lastError.message,\n          attempt,\n          delay,\n        }\n      );\n\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n  }\n\n  throw lastError!;\n}\n\n/**\n * Actualizar lead_status en HubSpot\n */\nasync function updateHubSpotLeadStatus(\n  hubspotClient: Client,\n  contactId: string,\n  email: string\n): Promise<boolean> {\n  try {\n    logger.info('üîÑ Actualizando lead_status en HubSpot', {\n      contactId,\n      email,\n      newStatus: 'Hot Lead',\n    });\n\n    await retryWithBackoff(async () => {\n      await hubspotClient.crm.contacts.basicApi.update(contactId, {\n        properties: {\n          lead_status: 'Hot Lead',\n          last_hot_lead_detection: new Date().toISOString(),\n          hot_lead_trigger_score: '40+',\n        },\n      });\n    });\n\n    logger.info('‚úÖ Lead status actualizado en HubSpot', { contactId, email });\n    return true;\n  } catch (error) {\n    logger.error('‚ùå Error actualizando HubSpot lead status', {\n      error: error instanceof Error ? error.message : error,\n      contactId,\n      email,\n    });\n    return false;\n  }\n}\n\n/**\n * Crear mensaje Block Kit para Slack\n */\nfunction createHotLeadSlackMessage(\n  triggerData: HotLeadTriggerData,\n  statusUpdated: boolean\n): (Block | KnownBlock)[] {\n  const scoreChange = triggerData.previousScore\n    ? `${triggerData.previousScore} ‚Üí ${triggerData.leadInfluenceScore}`\n    : `${triggerData.leadInfluenceScore}`;\n\n  return [\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: 'üö® *Hot Lead Detectado*',\n      },\n    },\n    {\n      type: 'divider',\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*Usuario:*\\n${triggerData.email}`,\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Score:*\\n${scoreChange}`,\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Status:*\\n${statusUpdated ? '‚úÖ Actualizado' : '‚ùå Error'}`,\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Acci√≥n:*\\nSeguimiento inmediato`,\n        },\n      ],\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `üéØ *Recomendaci√≥n:* Este lead ha alcanzado un score de ${triggerData.leadInfluenceScore}, indicando alto inter√©s. Contactar inmediatamente para maximizar conversi√≥n.`,\n      },\n    },\n    {\n      type: 'actions',\n      elements: [\n        {\n          type: 'button',\n          text: {\n            type: 'plain_text',\n            text: 'üëÄ Ver en HubSpot',\n          },\n          url: `https://app.hubspot.com/contacts/portal/contact/${triggerData.contactId}/`,\n          action_id: 'view_hubspot',\n        },\n        {\n          type: 'button',\n          text: {\n            type: 'plain_text',\n            text: 'üìû Contactar Ahora',\n          },\n          action_id: 'contact_now',\n          style: 'primary',\n        },\n      ],\n    },\n    {\n      type: 'context',\n      elements: [\n        {\n          type: 'mrkdwn',\n          text: `‚è∞ Detectado: ${new Date(triggerData.timestamp).toLocaleString('es-MX')} | üÜî Contact: ${triggerData.contactId}`,\n        },\n      ],\n    },\n  ];\n}\n\n/**\n * Enviar mensaje a Slack\n */\nasync function sendSlackHotLeadAlert(\n  slackClient: WebClient,\n  config: HotLeadsConfig,\n  triggerData: HotLeadTriggerData,\n  statusUpdated: boolean\n): Promise<boolean> {\n  try {\n    logger.info('üí¨ Enviando alerta Hot Lead a Slack', {\n      channel: config.slackChannel,\n      email: triggerData.email,\n      score: triggerData.leadInfluenceScore,\n    });\n\n    const blocks = createHotLeadSlackMessage(triggerData, statusUpdated);\n\n    await retryWithBackoff(async () => {\n      await slackClient.chat.postMessage({\n        channel: config.slackChannel,\n        text: `üö® Hot Lead Detectado: ${triggerData.email} (Score: ${triggerData.leadInfluenceScore})`,\n        blocks: blocks,\n        unfurl_links: false,\n        unfurl_media: false,\n      });\n    });\n\n    logger.info('‚úÖ Alerta Hot Lead enviada a Slack', {\n      channel: config.slackChannel,\n      email: triggerData.email,\n    });\n\n    return true;\n  } catch (error) {\n    logger.error('‚ùå Error enviando alerta a Slack', {\n      error: error instanceof Error ? error.message : error,\n      channel: config.slackChannel,\n      email: triggerData.email,\n    });\n    return false;\n  }\n}\n\n/**\n * üéØ Handler principal de Hot Leads\n */\nexport async function hotLeadsHandler(\n  config: HotLeadsConfig,\n  triggerData: HotLeadTriggerData\n): Promise<HotLeadsResult> {\n  const startTime = Date.now();\n  const executionId = `hot-lead-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n  logger.info('üö® Iniciando procesamiento Hot Lead', {\n    id: executionId,\n    contactId: triggerData.contactId,\n    email: triggerData.email,\n    score: triggerData.leadInfluenceScore,\n    previousScore: triggerData.previousScore,\n  });\n\n  // Inicializar clientes\n  const hubspotClient = new Client({ accessToken: config.hubspotApiKey });\n  const slackClient = new WebClient(config.slackBotToken);\n\n  let statusUpdated = false;\n  let slackMessageSent = false;\n\n  try {\n    // 1. Actualizar lead_status en HubSpot\n    statusUpdated = await updateHubSpotLeadStatus(\n      hubspotClient,\n      triggerData.contactId,\n      triggerData.email\n    );\n\n    // 2. Enviar alerta a Slack\n    slackMessageSent = await sendSlackHotLeadAlert(\n      slackClient,\n      config,\n      triggerData,\n      statusUpdated\n    );\n\n    const result: HotLeadsResult = {\n      id: executionId,\n      timestamp: new Date().toISOString(),\n      contactId: triggerData.contactId,\n      email: triggerData.email,\n      previousScore: triggerData.previousScore || 0,\n      newScore: triggerData.leadInfluenceScore,\n      statusUpdated,\n      slackMessageSent,\n      executionTimeMs: Date.now() - startTime,\n    };\n\n    logger.info('‚úÖ Hot Lead procesado completamente', {\n      id: executionId,\n      email: triggerData.email,\n      statusUpdated,\n      slackMessageSent,\n      executionTime: result.executionTimeMs,\n    });\n\n    return result;\n  } catch (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : 'Error desconocido';\n\n    logger.error('‚ùå Error procesando Hot Lead', {\n      id: executionId,\n      error: errorMessage,\n      contactId: triggerData.contactId,\n      email: triggerData.email,\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n\n    throw new Error(`Error procesando Hot Lead: ${errorMessage}`);\n  }\n}\n"],"version":3}