{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/creates/updateHubSpotExternalScore.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/creates/updateHubSpotExternalScore.ts"],"sourcesContent":["import { ZapierCreate, ZapierZ, ZapierBundle } from '../types';\nimport { withRetry, logZapAction } from '../utils/common';\n\n/**\n * Interface para la respuesta de actualización de HubSpot\n */\ninterface HubSpotUpdateResponse {\n  id: string;\n  properties: {\n    email: string;\n    external_score: string;\n    lastmodifieddate: string;\n  };\n  updatedAt: string;\n}\n\n/**\n * Actualiza el external_score de un contacto en HubSpot\n */\nconst updateHubSpotExternalScore = async (\n  z: ZapierZ,\n  bundle: ZapierBundle\n): Promise<HubSpotUpdateResponse> => {\n  const { email, external_score } = bundle.inputData;\n\n  if (!email) {\n    throw new Error('Email is required');\n  }\n\n  if (external_score === undefined || external_score === null) {\n    throw new Error('External score is required');\n  }\n\n  const apiKey = bundle.authData.hubspot_api_key;\n  const scoreValue = parseInt(external_score.toString());\n\n  try {\n    // Primero buscar el contacto por email\n    const searchRequest = {\n      url: 'https://api.hubapi.com/crm/v3/objects/contacts/search',\n      method: 'POST' as const,\n      headers: {\n        Authorization: `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      json: {\n        filterGroups: [\n          {\n            filters: [\n              {\n                propertyName: 'email',\n                operator: 'EQ',\n                value: email,\n              },\n            ],\n          },\n        ],\n        properties: ['email', 'external_score', 'firstname', 'lastname'],\n        limit: 1,\n      },\n    };\n\n    const searchResponse = await withRetry(() => z.request(searchRequest), 3);\n    const searchData = searchResponse.data;\n\n    if (!searchData.results || searchData.results.length === 0) {\n      throw new Error(`Contact with email ${email} not found in HubSpot`);\n    }\n\n    const contactId = searchData.results[0].id;\n    const currentContact = searchData.results[0];\n\n    // Actualizar el contacto con el nuevo external_score\n    const updateRequest = {\n      url: `https://api.hubapi.com/crm/v3/objects/contacts/${contactId}`,\n      method: 'PATCH' as const,\n      headers: {\n        Authorization: `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      json: {\n        properties: {\n          external_score: scoreValue.toString(),\n        },\n      },\n    };\n\n    const updateResponse = await withRetry(() => z.request(updateRequest), 3);\n    const updateData = updateResponse.data;\n\n    // Preparar respuesta\n    const result: HubSpotUpdateResponse = {\n      id: updateData.id,\n      properties: {\n        email: email,\n        external_score: scoreValue.toString(),\n        lastmodifieddate: updateData.updatedAt,\n      },\n      updatedAt: updateData.updatedAt,\n    };\n\n    // Log de la acción exitosa\n    await logZapAction(z, {\n      action: 'update_hubspot_external_score',\n      timestamp: new Date().toISOString(),\n      success: true,\n      data: {\n        contact_id: contactId,\n        email: email,\n        external_score: scoreValue,\n        previous_score: currentContact.properties?.external_score || 'not set',\n      },\n    });\n\n    z.console.log(\n      `Successfully updated external_score for contact ${email} to ${scoreValue}`\n    );\n    return result;\n  } catch (error: any) {\n    // Log del error\n    await logZapAction(z, {\n      action: 'update_hubspot_external_score',\n      timestamp: new Date().toISOString(),\n      success: false,\n      error: error.message || 'Unknown error',\n      data: {\n        email: email,\n        external_score: scoreValue,\n      },\n    });\n\n    z.console.error('Error updating HubSpot external score:', error);\n    throw error;\n  }\n};\n\n/**\n * Configuración del create para actualizar external_score en HubSpot\n */\nconst create: ZapierCreate = {\n  key: 'update_hubspot_external_score',\n  noun: 'HubSpot External Score Update',\n  display: {\n    label: 'Update HubSpot Contact External Score',\n    description:\n      'Updates the external_score property of a HubSpot contact identified by email',\n    important: true,\n  },\n  operation: {\n    perform: updateHubSpotExternalScore,\n    inputFields: [\n      {\n        key: 'email',\n        label: 'Contact Email',\n        type: 'string',\n        required: true,\n        helpText: 'The email address of the contact to update',\n      },\n      {\n        key: 'external_score',\n        label: 'External Score',\n        type: 'integer',\n        required: true,\n        helpText: 'The external score value to set for the contact',\n      },\n    ],\n    sample: {\n      id: '12345',\n      properties: {\n        email: 'john.doe@example.com',\n        external_score: '75',\n        lastmodifieddate: '2024-01-15T10:30:00Z',\n      },\n      updatedAt: '2024-01-15T10:30:00Z',\n    },\n    outputFields: [\n      { key: 'id', label: 'Contact ID', type: 'string' },\n      { key: 'properties.email', label: 'Email', type: 'string' },\n      {\n        key: 'properties.external_score',\n        label: 'External Score',\n        type: 'string',\n      },\n      {\n        key: 'properties.lastmodifieddate',\n        label: 'Last Modified Date',\n        type: 'datetime',\n      },\n      { key: 'updatedAt', label: 'Updated At', type: 'datetime' },\n    ],\n  },\n};\n\nexport default create;\n"],"version":3}