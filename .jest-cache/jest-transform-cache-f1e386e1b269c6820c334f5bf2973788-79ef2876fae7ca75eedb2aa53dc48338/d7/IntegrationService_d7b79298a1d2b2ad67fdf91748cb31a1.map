{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/integrations/IntegrationService.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/integrations/IntegrationService.ts"],"sourcesContent":["import { ZapierSlackService } from './ZapierSlackService';\nimport { SlackHubspotService } from './SlackHubspotService';\nimport { Logger } from '../utils/Logger';\nimport { ConfigManager } from '../config/ConfigManager';\nimport express, { Request, Response } from 'express';\n\n/**\n * Servicio principal de integraci√≥n\n * Orquesta las integraciones entre Slack, Zapier y Hubspot\n */\nexport class IntegrationService {\n  private zapierSlackService: ZapierSlackService;\n  private slackHubspotService: SlackHubspotService;\n  private logger: Logger;\n  private config: ConfigManager;\n\n  constructor(config: ConfigManager) {\n    this.config = config;\n    this.logger = new Logger('IntegrationService');\n    this.zapierSlackService = new ZapierSlackService(config);\n    this.slackHubspotService = new SlackHubspotService(config);\n  }\n\n  /**\n   * Inicializa todas las integraciones\n   */\n  async initialize(): Promise<void> {\n    try {\n      this.logger.info('üîó Inicializando servicios de integraci√≥n...');\n\n      // Configurar webhooks de Slack\n      await this.zapierSlackService.setupSlackWebhooks();\n\n      // Configurar listeners de eventos de Slack\n      await this.slackHubspotService.setupSlackEventListeners();\n\n      this.logger.info(\n        '‚úÖ Servicios de integraci√≥n inicializados correctamente'\n      );\n    } catch (error) {\n      this.logger.error(\n        '‚ùå Error inicializando servicios de integraci√≥n:',\n        { error }\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Configura las rutas de webhooks para Express\n   */\n  setupWebhookRoutes(app: express.Application): void {\n    // Webhook para recibir datos de Zapier\n    app.post(\n      '/webhooks/zapier',\n      async (req: Request, res: Response): Promise<void> => {\n        try {\n          await this.zapierSlackService.handleZapierWebhook(req.body);\n          res.status(200).json({ success: true });\n        } catch (error) {\n          this.logger.error('Error procesando webhook de Zapier:', { error });\n          res.status(500).json({ error: 'Error interno del servidor' });\n        }\n      }\n    );\n\n    // Webhook para eventos de Slack\n    app.post(\n      '/webhooks/slack',\n      async (req: Request, res: Response): Promise<void> => {\n        try {\n          const { type, challenge, event } = req.body;\n\n          // Verificaci√≥n de URL para Slack\n          if (type === 'url_verification') {\n            res.status(200).send(challenge);\n            return;\n          }\n\n          // Procesar eventos de mensajes\n          if (type === 'event_callback' && event?.type === 'message') {\n            await this.slackHubspotService.syncChannelMessagesToHubspot(\n              event.channel,\n              event\n            );\n          }\n\n          res.status(200).json({ success: true });\n        } catch (error) {\n          this.logger.error('Error procesando webhook de Slack:', { error });\n          res.status(500).json({ error: 'Error interno del servidor' });\n        }\n      }\n    );\n\n    // Webhook para eventos de Hubspot\n    app.post(\n      '/webhooks/hubspot',\n      async (req: Request, res: Response): Promise<void> => {\n        try {\n          const events = req.body;\n\n          for (const event of events) {\n            if (\n              event.subscriptionType === 'contact.propertyChange' &&\n              event.propertyName === 'lifecyclestage'\n            ) {\n              // Obtener datos del contacto desde Hubspot\n              const contactData = await this.getHubspotContactData(\n                event.objectId\n              );\n\n              if (contactData) {\n                await this.slackHubspotService.notifyStageAdvancement({\n                  email: contactData.properties.email,\n                  name: `${contactData.properties.firstname || ''} ${contactData.properties.lastname || ''}`.trim(),\n                  previousStage: event.propertyValue.previousValue || 'unknown',\n                  newStage: event.propertyValue.value,\n                  hubspotContactId: event.objectId.toString(),\n                });\n              }\n            }\n          }\n\n          res.status(200).json({ success: true });\n        } catch (error) {\n          this.logger.error('Error procesando webhook de Hubspot:', { error });\n          res.status(500).json({ error: 'Error interno del servidor' });\n        }\n      }\n    );\n\n    this.logger.info('üåê Rutas de webhooks configuradas');\n  }\n\n  /**\n   * Obtiene datos de un contacto de Hubspot\n   */\n  private async getHubspotContactData(contactId: string): Promise<any> {\n    try {\n      const axios = require('axios');\n      const response = await axios.get(\n        `https://api.hubapi.com/crm/v3/objects/contacts/${contactId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${process.env.HUBSPOT_API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n          params: {\n            properties: 'email,firstname,lastname,lifecyclestage',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      this.logger.error(\n        'Error obteniendo datos del contacto de Hubspot:',\n        { error }\n      );\n      return null;\n    }\n  }\n\n  /**\n   * M√©todo de utilidad para testing manual de integraciones\n   */\n  async testIntegrations(): Promise<void> {\n    try {\n      this.logger.info('üß™ Ejecutando tests de integraci√≥n...');\n\n      // Test de Zapier ‚Üí Slack\n      await this.zapierSlackService.notifyRitualSilencioso({\n        name: 'Test Usuario',\n        email: 'test@example.com',\n        ritual_silencioso: true,\n        hubspot_contact_id: '12345',\n      });\n\n      // Test de Slack ‚Üí Hubspot (simulado)\n      await this.slackHubspotService.notifyStageAdvancement({\n        email: 'test@example.com',\n        name: 'Test Usuario',\n        previousStage: 'lead',\n        newStage: 'customer',\n        hubspotContactId: '12345',\n      });\n\n      this.logger.info('‚úÖ Tests de integraci√≥n completados');\n    } catch (error) {\n      this.logger.error('‚ùå Error en tests de integraci√≥n:', { error });\n    }\n  }\n}\n"],"version":3}