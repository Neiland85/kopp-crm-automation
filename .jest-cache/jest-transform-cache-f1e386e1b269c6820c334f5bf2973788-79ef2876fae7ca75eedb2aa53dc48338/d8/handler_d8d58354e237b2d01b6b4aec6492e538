37ac391f6cb828ac88cc12e239894076
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hotLeadsHandler = hotLeadsHandler;
const api_client_1 = require("@hubspot/api-client");
const web_api_1 = require("@slack/web-api");
const Logger_1 = require("../../utils/Logger");
// Configurar logger espec√≠fico para Hot Leads
const logger = new Logger_1.Logger('hot-leads');
/**
 * Retry helper con backoff exponencial
 */
async function retryWithBackoff(fn, maxRetries = 3, baseDelay = 1000) {
    let lastError;
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            return await fn();
        }
        catch (error) {
            lastError = error;
            if (attempt === maxRetries) {
                break;
            }
            const delay = baseDelay * Math.pow(2, attempt - 1);
            logger.warn(`Reintento Hot Leads ${attempt}/${maxRetries} en ${delay}ms`, {
                error: lastError.message,
                attempt,
                delay,
            });
            await new Promise((resolve) => setTimeout(resolve, delay));
        }
    }
    throw lastError;
}
/**
 * Actualizar lead_status en HubSpot
 */
async function updateHubSpotLeadStatus(hubspotClient, contactId, email) {
    try {
        logger.info('üîÑ Actualizando lead_status en HubSpot', {
            contactId,
            email,
            newStatus: 'Hot Lead',
        });
        await retryWithBackoff(async () => {
            await hubspotClient.crm.contacts.basicApi.update(contactId, {
                properties: {
                    lead_status: 'Hot Lead',
                    last_hot_lead_detection: new Date().toISOString(),
                    hot_lead_trigger_score: '40+',
                },
            });
        });
        logger.info('‚úÖ Lead status actualizado en HubSpot', { contactId, email });
        return true;
    }
    catch (error) {
        logger.error('‚ùå Error actualizando HubSpot lead status', {
            error: error instanceof Error ? error.message : error,
            contactId,
            email,
        });
        return false;
    }
}
/**
 * Crear mensaje Block Kit para Slack
 */
function createHotLeadSlackMessage(triggerData, statusUpdated) {
    const scoreChange = triggerData.previousScore
        ? `${triggerData.previousScore} ‚Üí ${triggerData.leadInfluenceScore}`
        : `${triggerData.leadInfluenceScore}`;
    return [
        {
            type: 'section',
            text: {
                type: 'mrkdwn',
                text: 'üö® *Hot Lead Detectado*',
            },
        },
        {
            type: 'divider',
        },
        {
            type: 'section',
            fields: [
                {
                    type: 'mrkdwn',
                    text: `*Usuario:*\n${triggerData.email}`,
                },
                {
                    type: 'mrkdwn',
                    text: `*Score:*\n${scoreChange}`,
                },
                {
                    type: 'mrkdwn',
                    text: `*Status:*\n${statusUpdated ? '‚úÖ Actualizado' : '‚ùå Error'}`,
                },
                {
                    type: 'mrkdwn',
                    text: `*Acci√≥n:*\nSeguimiento inmediato`,
                },
            ],
        },
        {
            type: 'section',
            text: {
                type: 'mrkdwn',
                text: `üéØ *Recomendaci√≥n:* Este lead ha alcanzado un score de ${triggerData.leadInfluenceScore}, indicando alto inter√©s. Contactar inmediatamente para maximizar conversi√≥n.`,
            },
        },
        {
            type: 'actions',
            elements: [
                {
                    type: 'button',
                    text: {
                        type: 'plain_text',
                        text: 'üëÄ Ver en HubSpot',
                    },
                    url: `https://app.hubspot.com/contacts/portal/contact/${triggerData.contactId}/`,
                    action_id: 'view_hubspot',
                },
                {
                    type: 'button',
                    text: {
                        type: 'plain_text',
                        text: 'üìû Contactar Ahora',
                    },
                    action_id: 'contact_now',
                    style: 'primary',
                },
            ],
        },
        {
            type: 'context',
            elements: [
                {
                    type: 'mrkdwn',
                    text: `‚è∞ Detectado: ${new Date(triggerData.timestamp).toLocaleString('es-MX')} | üÜî Contact: ${triggerData.contactId}`,
                },
            ],
        },
    ];
}
/**
 * Enviar mensaje a Slack
 */
async function sendSlackHotLeadAlert(slackClient, config, triggerData, statusUpdated) {
    try {
        logger.info('üí¨ Enviando alerta Hot Lead a Slack', {
            channel: config.slackChannel,
            email: triggerData.email,
            score: triggerData.leadInfluenceScore,
        });
        const blocks = createHotLeadSlackMessage(triggerData, statusUpdated);
        await retryWithBackoff(async () => {
            await slackClient.chat.postMessage({
                channel: config.slackChannel,
                text: `üö® Hot Lead Detectado: ${triggerData.email} (Score: ${triggerData.leadInfluenceScore})`,
                blocks: blocks,
                unfurl_links: false,
                unfurl_media: false,
            });
        });
        logger.info('‚úÖ Alerta Hot Lead enviada a Slack', {
            channel: config.slackChannel,
            email: triggerData.email,
        });
        return true;
    }
    catch (error) {
        logger.error('‚ùå Error enviando alerta a Slack', {
            error: error instanceof Error ? error.message : error,
            channel: config.slackChannel,
            email: triggerData.email,
        });
        return false;
    }
}
/**
 * üéØ Handler principal de Hot Leads
 */
async function hotLeadsHandler(config, triggerData) {
    const startTime = Date.now();
    const executionId = `hot-lead-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    logger.info('üö® Iniciando procesamiento Hot Lead', {
        id: executionId,
        contactId: triggerData.contactId,
        email: triggerData.email,
        score: triggerData.leadInfluenceScore,
        previousScore: triggerData.previousScore,
    });
    // Inicializar clientes
    const hubspotClient = new api_client_1.Client({ accessToken: config.hubspotApiKey });
    const slackClient = new web_api_1.WebClient(config.slackBotToken);
    let statusUpdated = false;
    let slackMessageSent = false;
    try {
        // 1. Actualizar lead_status en HubSpot
        statusUpdated = await updateHubSpotLeadStatus(hubspotClient, triggerData.contactId, triggerData.email);
        // 2. Enviar alerta a Slack
        slackMessageSent = await sendSlackHotLeadAlert(slackClient, config, triggerData, statusUpdated);
        const result = {
            id: executionId,
            timestamp: new Date().toISOString(),
            contactId: triggerData.contactId,
            email: triggerData.email,
            previousScore: triggerData.previousScore || 0,
            newScore: triggerData.leadInfluenceScore,
            statusUpdated,
            slackMessageSent,
            executionTimeMs: Date.now() - startTime,
        };
        logger.info('‚úÖ Hot Lead procesado completamente', {
            id: executionId,
            email: triggerData.email,
            statusUpdated,
            slackMessageSent,
            executionTime: result.executionTimeMs,
        });
        return result;
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
        logger.error('‚ùå Error procesando Hot Lead', {
            id: executionId,
            error: errorMessage,
            contactId: triggerData.contactId,
            email: triggerData.email,
            stack: error instanceof Error ? error.stack : undefined,
        });
        throw new Error(`Error procesando Hot Lead: ${errorMessage}`);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,