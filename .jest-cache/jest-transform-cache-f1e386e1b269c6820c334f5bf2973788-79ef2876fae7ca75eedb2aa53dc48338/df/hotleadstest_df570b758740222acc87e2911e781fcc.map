{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/tests/zaps/hot-leads/hot-leads.test.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/tests/zaps/hot-leads/hot-leads.test.ts"],"sourcesContent":["import {\n  jest,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  afterEach,\n} from '@jest/globals';\nimport { hotLeadsHandler } from '../../../src/zaps/hot-leads/handler';\nimport { Logger } from '../../../src/utils/Logger';\n\n// Mock de dependencias\njest.mock('@hubspot/api-client');\njest.mock('@slack/web-api');\njest.mock('../../../src/utils/Logger');\n\n/**\n * 🧪 Tests de Hot Leads Detection\n *\n * Cobertura:\n * 1. Handler principal con datos mock\n * 2. Actualización de lead_status en HubSpot\n * 3. Envío de alertas a Slack\n * 4. Manejo de errores\n * 5. Retry con backoff exponencial\n * 6. Validación de threshold\n */\n\nconst mockHubSpotClient = {\n  crm: {\n    contacts: {\n      basicApi: {\n        update: jest.fn() as jest.MockedFunction<any>,\n      },\n    },\n  },\n};\n\nconst mockSlackClient = {\n  chat: {\n    postMessage: jest.fn() as jest.MockedFunction<any>,\n  },\n};\n\nconst mockConfig = {\n  hubspotApiKey: 'test-hubspot-key',\n  slackBotToken: 'test-slack-token',\n  slackSigningSecret: 'test-slack-secret',\n  slackChannel: '#test-hot-leads',\n  hotLeadThreshold: 40,\n  isEnabled: true,\n};\n\nconst mockTriggerData = {\n  contactId: '12345',\n  email: 'test@example.com',\n  leadInfluenceScore: 45,\n  previousScore: 30,\n  timestamp: '2025-06-29T20:46:15.123Z',\n  hubspotPortalId: 'portal123',\n};\n\n// Configurar mocks\nbeforeEach(() => {\n  jest.clearAllMocks();\n\n  // Mock HubSpot Client constructor\n  jest\n    .mocked(require('@hubspot/api-client').Client)\n    .mockImplementation(() => mockHubSpotClient);\n\n  // Mock Slack WebClient constructor\n  jest\n    .mocked(require('@slack/web-api').WebClient)\n    .mockImplementation(() => mockSlackClient);\n\n  // Mock Logger\n  const mockLogger = {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n  };\n  jest.mocked(Logger).mockImplementation(() => mockLogger as any);\n});\n\nafterEach(() => {\n  jest.resetAllMocks();\n});\n\ndescribe('Hot Leads Handler', () => {\n  describe('Procesamiento exitoso', () => {\n    it('should process hot lead successfully', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({\n        ok: true,\n        ts: '123456789',\n      });\n\n      // Act\n      const result = await hotLeadsHandler(mockConfig, mockTriggerData);\n\n      // Assert\n      expect(result).toMatchObject({\n        contactId: '12345',\n        email: 'test@example.com',\n        previousScore: 30,\n        newScore: 45,\n        statusUpdated: true,\n        slackMessageSent: true,\n      });\n      expect(result.executionTimeMs).toBeGreaterThan(0);\n      expect(result.id).toMatch(/^hot-lead-/);\n    });\n\n    it('should update HubSpot contact properties correctly', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      await hotLeadsHandler(mockConfig, mockTriggerData);\n\n      // Assert\n      expect(\n        mockHubSpotClient.crm.contacts.basicApi.update\n      ).toHaveBeenCalledWith('12345', {\n        properties: {\n          lead_status: 'Hot Lead',\n          last_hot_lead_detection: expect.any(String),\n          hot_lead_trigger_score: '40+',\n        },\n      });\n    });\n\n    it('should send correct Slack message format', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      await hotLeadsHandler(mockConfig, mockTriggerData);\n\n      // Assert\n      const slackCall = mockSlackClient.chat.postMessage.mock.calls[0][0];\n      expect(slackCall.channel).toBe('#test-hot-leads');\n      expect(slackCall.text).toContain('🚨 Hot Lead Detectado');\n      expect(slackCall.text).toContain('test@example.com');\n      expect(slackCall.text).toContain('45');\n      expect(slackCall.blocks).toBeDefined();\n      expect(slackCall.blocks.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Manejo de errores', () => {\n    it('should handle HubSpot API errors gracefully', async () => {\n      // Arrange\n      const hubspotError = new Error('HubSpot API error');\n      mockHubSpotClient.crm.contacts.basicApi.update.mockRejectedValue(\n        hubspotError\n      );\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const result = await hotLeadsHandler(mockConfig, mockTriggerData);\n\n      // Assert\n      expect(result.statusUpdated).toBe(false);\n      expect(result.slackMessageSent).toBe(true);\n    });\n\n    it('should handle Slack API errors gracefully', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockRejectedValue(\n        new Error('Slack API error')\n      );\n\n      // Act\n      const result = await hotLeadsHandler(mockConfig, mockTriggerData);\n\n      // Assert\n      expect(result.statusUpdated).toBe(true);\n      expect(result.slackMessageSent).toBe(false);\n    });\n\n    it('should handle gracefully when both HubSpot and Slack fail', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.basicApi.update.mockRejectedValue(\n        new Error('HubSpot error')\n      );\n      mockSlackClient.chat.postMessage.mockRejectedValue(\n        new Error('Slack error')\n      );\n\n      // Act\n      const result = await hotLeadsHandler(mockConfig, mockTriggerData);\n\n      // Assert\n      expect(result.statusUpdated).toBe(false);\n      expect(result.slackMessageSent).toBe(false);\n      expect(result.contactId).toBe(mockTriggerData.contactId);\n      expect(result.email).toBe(mockTriggerData.email);\n    });\n  });\n\n  describe('Retry Logic', () => {\n    it('should retry HubSpot operations with exponential backoff', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.basicApi.update\n        .mockRejectedValueOnce(new Error('Temporary failure'))\n        .mockRejectedValueOnce(new Error('Temporary failure'))\n        .mockResolvedValueOnce({ id: 'updated' });\n\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const result = await hotLeadsHandler(mockConfig, mockTriggerData);\n\n      // Assert\n      expect(\n        mockHubSpotClient.crm.contacts.basicApi.update\n      ).toHaveBeenCalledTimes(3);\n      expect(result.statusUpdated).toBe(true);\n    });\n\n    it('should fail after maximum retry attempts', async () => {\n      // Arrange\n      const persistentError = new Error('Persistent failure');\n      mockHubSpotClient.crm.contacts.basicApi.update.mockRejectedValue(\n        persistentError\n      );\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const result = await hotLeadsHandler(mockConfig, mockTriggerData);\n\n      // Assert\n      expect(\n        mockHubSpotClient.crm.contacts.basicApi.update\n      ).toHaveBeenCalledTimes(3); // Default max retries\n      expect(result.statusUpdated).toBe(false);\n      expect(result.contactId).toBe(mockTriggerData.contactId);\n      expect(result.email).toBe(mockTriggerData.email);\n    });\n  });\n\n  describe('Slack Message Content', () => {\n    it('should include all required fields in Slack message', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      await hotLeadsHandler(mockConfig, mockTriggerData);\n\n      // Assert\n      const slackCall = mockSlackClient.chat.postMessage.mock\n        .calls[0][0] as any;\n      const messageText = JSON.stringify(slackCall.blocks);\n\n      expect(messageText).toContain('🚨 *Hot Lead Detectado*');\n      expect(messageText).toContain('test@example.com');\n      expect(messageText).toContain('30 → 45');\n      expect(messageText).toContain('Seguimiento inmediato');\n      expect(messageText).toContain('Ver en HubSpot');\n      expect(messageText).toContain('Contactar Ahora');\n    });\n\n    it('should handle cases without previous score', async () => {\n      // Arrange\n      const triggerDataWithoutPreviousScore = {\n        ...mockTriggerData,\n        previousScore: undefined,\n      };\n\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      await hotLeadsHandler(mockConfig, triggerDataWithoutPreviousScore);\n\n      // Assert\n      const slackCall = mockSlackClient.chat.postMessage.mock\n        .calls[0][0] as any;\n      const messageText = JSON.stringify(slackCall.blocks);\n\n      expect(messageText).toContain('45');\n      expect(messageText).not.toContain('→');\n    });\n  });\n\n  describe('Performance', () => {\n    it('should complete execution within reasonable time', async () => {\n      // Arrange\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const startTime = Date.now();\n      const result = await hotLeadsHandler(mockConfig, mockTriggerData);\n      const actualExecutionTime = Date.now() - startTime;\n\n      // Assert\n      expect(result.executionTimeMs).toBeLessThan(actualExecutionTime + 100);\n      expect(result.executionTimeMs).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Data Validation', () => {\n    it('should handle missing or invalid trigger data', async () => {\n      // Arrange\n      const invalidTriggerData = {\n        contactId: '',\n        email: '',\n        leadInfluenceScore: NaN,\n        previousScore: undefined,\n        timestamp: '',\n        hubspotPortalId: '',\n      };\n\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const result = await hotLeadsHandler(mockConfig, invalidTriggerData);\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.contactId).toBe('');\n      expect(result.email).toBe('');\n    });\n\n    it('should handle edge case scores', async () => {\n      // Arrange\n      const edgeCaseTriggerData = {\n        ...mockTriggerData,\n        leadInfluenceScore: 999,\n        previousScore: 0,\n      };\n\n      mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n        id: 'updated',\n      });\n      mockSlackClient.chat.postMessage.mockResolvedValue({ ok: true });\n\n      // Act\n      const result = await hotLeadsHandler(mockConfig, edgeCaseTriggerData);\n\n      // Assert\n      expect(result.newScore).toBe(999);\n      expect(result.previousScore).toBe(0);\n    });\n  });\n});\n\ndescribe('Hot Leads Integration', () => {\n  it('should properly integrate with HubSpot and Slack APIs', async () => {\n    // Arrange\n    mockHubSpotClient.crm.contacts.basicApi.update.mockResolvedValue({\n      id: '12345',\n      properties: {\n        lead_status: 'Hot Lead',\n        last_hot_lead_detection: expect.any(String),\n      },\n    });\n\n    mockSlackClient.chat.postMessage.mockResolvedValue({\n      ok: true,\n      ts: '123456789',\n      channel: '#test-hot-leads',\n    });\n\n    // Act\n    const result = await hotLeadsHandler(mockConfig, mockTriggerData);\n\n    // Assert\n    expect(result.statusUpdated).toBe(true);\n    expect(result.slackMessageSent).toBe(true);\n    expect(\n      mockHubSpotClient.crm.contacts.basicApi.update\n    ).toHaveBeenCalledTimes(1);\n    expect(mockSlackClient.chat.postMessage).toHaveBeenCalledTimes(1);\n  });\n});\n"],"version":3}