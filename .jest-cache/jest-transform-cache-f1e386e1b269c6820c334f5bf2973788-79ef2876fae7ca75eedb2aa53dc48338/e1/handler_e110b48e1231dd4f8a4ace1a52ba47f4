46ad61becae18cc273508d5264582d73
"use strict";
/**
 * üí´ Dropout Positivo Handler
 *
 * L√≥gica principal para procesar contacts con engagement bajo
 * y aplicar boost de reactivaci√≥n.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropoutPositivoHandler = void 0;
const axios_1 = __importDefault(require("axios"));
const Logger_1 = require("../../utils/Logger");
const logger = new Logger_1.Logger('dropout-positivo');
/**
 * Handler principal para el procesamiento de Dropout Positivo
 */
const dropoutPositivoHandler = async (config) => {
    const executionId = `dropout-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    const scoreBoost = config.scoreBoost || 30;
    const thresholdDays = config.thresholdDays || 7;
    logger.info('üí´ Iniciando procesamiento Dropout Positivo', {
        id: executionId,
        contactId: config.contactId,
        email: config.email,
        scoreBoost,
        thresholdDays,
    });
    try {
        // 1. Obtener informaci√≥n actual del contact
        const contactInfo = await getHubSpotContact(config.contactId, config.hubspotApiKey);
        const currentScore = parseInt(contactInfo.lead_influence_score || '0');
        const lastEngagement = config.lastEngagementDate || contactInfo.last_engagement_date;
        const daysSinceEngagement = calculateDaysSinceEngagement(lastEngagement);
        logger.info('üìä Informaci√≥n del contact', {
            contactId: config.contactId,
            currentScore,
            lastEngagement,
            daysSinceEngagement,
        });
        // 2. Verificar si cumple con el threshold
        if (daysSinceEngagement < thresholdDays) {
            logger.info('‚è≠Ô∏è Contact no cumple threshold, saltando procesamiento', {
                daysSinceEngagement,
                thresholdDays,
            });
            return {
                id: executionId,
                contactId: config.contactId,
                email: config.email,
                lastEngagementDate: lastEngagement,
                daysSinceEngagement,
                previousScore: currentScore,
                newScore: currentScore,
                slackMessageId: '',
                processedAt: new Date().toISOString(),
                success: false,
            };
        }
        // 3. Aplicar boost de score en HubSpot
        const newScore = currentScore + scoreBoost;
        await updateHubSpotContactScore(config.contactId, newScore, config.hubspotApiKey);
        logger.info('üîÑ Score actualizado en HubSpot', {
            contactId: config.contactId,
            previousScore: currentScore,
            newScore,
            boost: scoreBoost,
        });
        // 4. Enviar mensaje a Slack
        const slackMessageId = await sendDropoutSlackMessage({
            email: config.email,
            newScore,
            previousScore: currentScore,
            daysSinceEngagement,
            slackChannel: config.slackChannel,
            slackBotToken: config.slackBotToken,
        });
        logger.info('üí¨ Mensaje enviado a Slack', {
            messageId: slackMessageId,
            channel: config.slackChannel,
        });
        const result = {
            id: executionId,
            contactId: config.contactId,
            email: config.email,
            lastEngagementDate: lastEngagement,
            daysSinceEngagement,
            previousScore: currentScore,
            newScore,
            slackMessageId,
            processedAt: new Date().toISOString(),
            success: true,
        };
        logger.info('‚úÖ Dropout Positivo procesado exitosamente', result);
        return result;
    }
    catch (error) {
        logger.error('‚ùå Error en procesamiento Dropout Positivo', {
            error: error instanceof Error ? error.message : String(error),
            stack: error instanceof Error ? error.stack : undefined,
            contactId: config.contactId,
            executionId,
        });
        throw error;
    }
};
exports.dropoutPositivoHandler = dropoutPositivoHandler;
/**
 * Obtener informaci√≥n del contact desde HubSpot
 */
async function getHubSpotContact(contactId, apiKey, retries = 3) {
    const url = `https://api.hubapi.com/crm/v3/objects/contacts/${contactId}`;
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            const response = await axios_1.default.get(url, {
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                    'Content-Type': 'application/json',
                },
                params: {
                    properties: 'email,lead_influence_score,last_engagement_date,firstname,lastname',
                },
            });
            return response.data.properties;
        }
        catch (error) {
            if (attempt === retries) {
                logger.error('‚ùå Error obteniendo contact de HubSpot despu√©s de todos los reintentos', {
                    contactId,
                    attempt,
                    error: error instanceof Error ? error.message : String(error),
                });
                throw error;
            }
            const delay = Math.pow(2, attempt) * 1000; // Backoff exponencial
            logger.warn(`Reintento ${attempt}/${retries} en ${delay}ms`, {
                contactId,
                error: error instanceof Error ? error.message : String(error),
            });
            await new Promise((resolve) => setTimeout(resolve, delay));
        }
    }
    throw new Error('Error inesperado en getHubSpotContact');
}
/**
 * Actualizar score del contact en HubSpot
 */
async function updateHubSpotContactScore(contactId, newScore, apiKey, retries = 3) {
    const url = `https://api.hubapi.com/crm/v3/objects/contacts/${contactId}`;
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            await axios_1.default.patch(url, {
                properties: {
                    lead_influence_score: newScore.toString(),
                    last_dropout_boost_date: new Date().toISOString(),
                    dropout_boost_applied: 'true',
                },
            }, {
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                    'Content-Type': 'application/json',
                },
            });
            return;
        }
        catch (error) {
            if (attempt === retries) {
                logger.error('‚ùå Error actualizando contact en HubSpot despu√©s de todos los reintentos', {
                    contactId,
                    newScore,
                    attempt,
                    error: error instanceof Error ? error.message : String(error),
                });
                throw error;
            }
            const delay = Math.pow(2, attempt) * 1000;
            logger.warn(`Reintento actualizaci√≥n HubSpot ${attempt}/${retries} en ${delay}ms`, {
                contactId,
                newScore,
                error: error instanceof Error ? error.message : String(error),
            });
            await new Promise((resolve) => setTimeout(resolve, delay));
        }
    }
}
/**
 * Enviar mensaje de dropout positivo a Slack
 */
async function sendDropoutSlackMessage(config, retries = 3) {
    const message = {
        channel: config.slackChannel,
        blocks: [
            {
                type: 'section',
                text: {
                    type: 'mrkdwn',
                    text: `üí´ *Dropout Emocional Positivo*\n\n` +
                        `*Usuario:* ${config.email}\n` +
                        `*Score:* ${config.previousScore} ‚Üí *${config.newScore}* (+${config.newScore - config.previousScore})\n` +
                        `*D√≠as sin engagement:* ${config.daysSinceEngagement}\n` +
                        `*Acci√≥n:* Reengagement aplicado\n\n` +
                        `üöÄ Este usuario ha sido reactivado con un boost de score para fomentar el re-engagement.`,
                },
            },
            {
                type: 'context',
                elements: [
                    {
                        type: 'mrkdwn',
                        text: `‚è∞ ${new Date().toLocaleString('es-ES', { timeZone: 'Europe/Madrid' })} CET`,
                    },
                ],
            },
        ],
    };
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            const response = await axios_1.default.post('https://slack.com/api/chat.postMessage', message, {
                headers: {
                    Authorization: `Bearer ${config.slackBotToken}`,
                    'Content-Type': 'application/json',
                },
            });
            if (!response.data.ok) {
                throw new Error(`Slack API error: ${response.data.error}`);
            }
            return response.data.ts;
        }
        catch (error) {
            if (attempt === retries) {
                logger.error('‚ùå Error enviando mensaje a Slack despu√©s de todos los reintentos', {
                    channel: config.slackChannel,
                    attempt,
                    error: error instanceof Error ? error.message : String(error),
                });
                throw error;
            }
            const delay = Math.pow(2, attempt) * 1000;
            logger.warn(`Reintento Slack ${attempt}/${retries} en ${delay}ms`, {
                channel: config.slackChannel,
                error: error instanceof Error ? error.message : String(error),
            });
            await new Promise((resolve) => setTimeout(resolve, delay));
        }
    }
    throw new Error('Error inesperado en sendDropoutSlackMessage');
}
/**
 * Calcular d√≠as desde el √∫ltimo engagement
 */
function calculateDaysSinceEngagement(lastEngagementDate) {
    if (!lastEngagementDate) {
        return 999; // Si no tiene fecha, asumimos muchos d√≠as
    }
    const lastDate = new Date(lastEngagementDate);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - lastDate.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,