{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/triggers/pageView.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/zapier/triggers/pageView.ts"],"sourcesContent":["import {\n  HubSpotPageView,\n  ZapierTrigger,\n  ZapierZ,\n  ZapierBundle,\n} from '../types';\nimport { withRetry, logZapAction } from '../utils/common';\n\n/**\n * Obtiene las nuevas vistas de página de HubSpot\n */\nconst getNewPageViews = async (\n  z: ZapierZ,\n  bundle: ZapierBundle\n): Promise<HubSpotPageView[]> => {\n  const apiKey = bundle.authData.hubspot_api_key;\n\n  // Calcular timestamp para obtener solo vistas recientes\n  const since = new Date();\n  since.setMinutes(since.getMinutes() - 15); // Últimos 15 minutos\n  const sinceTimestamp = since.getTime();\n\n  const url = `https://api.hubapi.com/events/v3/events`;\n\n  const request = {\n    url,\n    method: 'GET' as const,\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    },\n    params: {\n      limit: 100,\n      eventType: 'pe91000001_pageview',\n      occurredAfter: sinceTimestamp.toString(),\n    },\n  };\n\n  try {\n    const response = await withRetry(() => z.request(request), 3);\n    const pageViews = response.data?.results || [];\n\n    // Log de la acción\n    await logZapAction(z, {\n      action: 'trigger_new_page_view',\n      timestamp: new Date().toISOString(),\n      success: true,\n      data: {\n        page_views_count: pageViews.length,\n        since_timestamp: sinceTimestamp,\n      },\n    });\n\n    // Transformar datos para Zapier\n    return pageViews.map((pageView: any) => ({\n      id: pageView.id || `${pageView.objectId}_${pageView.occurredAt}`,\n      portal_id:\n        pageView.portalId || bundle.authData.hubspot_api_key.split('.')[0],\n      email: pageView.email,\n      page_url:\n        pageView.properties?.hs_url || pageView.properties?.page_url || '',\n      page_title:\n        pageView.properties?.hs_page_title ||\n        pageView.properties?.page_title ||\n        '',\n      timestamp: pageView.occurredAt || new Date().toISOString(),\n      session_id: pageView.properties?.hs_session_id,\n      visitor_id: pageView.properties?.hs_visitor_id || pageView.objectId,\n      raw_data: pageView,\n    }));\n  } catch (error: any) {\n    // Log del error\n    await logZapAction(z, {\n      action: 'trigger_new_page_view',\n      timestamp: new Date().toISOString(),\n      success: false,\n      error: error.message || 'Unknown error',\n      data: {\n        since_timestamp: sinceTimestamp,\n      },\n    });\n\n    z.console.error('Error fetching page views:', error);\n    throw error;\n  }\n};\n\n/**\n * Configuración del trigger para nuevas vistas de página\n */\nconst trigger: ZapierTrigger = {\n  key: 'new_page_view',\n  noun: 'Page View',\n  display: {\n    label: 'New Page View',\n    description: 'Triggers when a new page view occurs in HubSpot',\n    important: false,\n  },\n  operation: {\n    type: 'polling',\n    perform: getNewPageViews,\n    sample: {\n      id: 'sample-pageview-123',\n      portal_id: '12345678',\n      email: 'visitor@example.com',\n      page_url: 'https://example.com/about',\n      page_title: 'About Us - Example Company',\n      timestamp: '2024-01-15T10:30:00Z',\n      session_id: 'session-abc123',\n      visitor_id: 'visitor-def456',\n    },\n    outputFields: [\n      { key: 'id', label: 'Page View ID', type: 'string' },\n      { key: 'portal_id', label: 'Portal ID', type: 'string' },\n      { key: 'email', label: 'Visitor Email', type: 'string' },\n      { key: 'page_url', label: 'Page URL', type: 'string' },\n      { key: 'page_title', label: 'Page Title', type: 'string' },\n      { key: 'timestamp', label: 'Timestamp', type: 'datetime' },\n      { key: 'session_id', label: 'Session ID', type: 'string' },\n      { key: 'visitor_id', label: 'Visitor ID', type: 'string' },\n    ],\n  },\n};\n\nexport default trigger;\n"],"version":3}