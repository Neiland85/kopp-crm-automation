{"file":"/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/__tests__/unit/ConfigManager.test.ts","mappings":"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","names":[],"sources":["/Users/estudio/Projects/GitHub/MICROSERVICIOS/kopp-stadium-crm_slack-hubspot-zappier-notion/kopp-crm-automation/src/__tests__/unit/ConfigManager.test.ts"],"sourcesContent":["/**\n * Tests unitarios para ConfigManager\n */\n\nimport { ConfigManager } from '../../config/ConfigManager';\n\ndescribe('ConfigManager', () => {\n  let configManager: ConfigManager;\n\n  beforeEach(() => {\n    // Limpiar variables de entorno\n    delete process.env.NODE_ENV;\n    configManager = new ConfigManager();\n  });\n\n  describe('get', () => {\n    it('should return configuration value for valid key', () => {\n      const appName = configManager.get('app.name');\n      expect(appName).toBe('Kopp CRM Automation');\n    });\n\n    it('should return default value when key does not exist', () => {\n      const nonExistent = configManager.get('non.existent.key', 'default');\n      expect(nonExistent).toBe('default');\n    });\n\n    it('should return undefined when key does not exist and no default provided', () => {\n      const nonExistent = configManager.get('non.existent.key');\n      expect(nonExistent).toBeUndefined();\n    });\n  });\n\n  describe('getEnvironment', () => {\n    it('should return current environment', () => {\n      const env = configManager.getEnvironment();\n      expect(env).toBe('development');\n    });\n\n    it('should return production when NODE_ENV is production', () => {\n      process.env.NODE_ENV = 'production';\n      const prodConfigManager = new ConfigManager();\n      const env = prodConfigManager.getEnvironment();\n      expect(env).toBe('production');\n    });\n  });\n\n  describe('isProduction', () => {\n    it('should return false for development environment', () => {\n      expect(configManager.isProduction()).toBe(false);\n    });\n\n    it('should return true when NODE_ENV is production', () => {\n      process.env.NODE_ENV = 'production';\n      const prodConfigManager = new ConfigManager();\n      expect(prodConfigManager.isProduction()).toBe(true);\n    });\n  });\n\n  describe('isDevelopment', () => {\n    it('should return true for development environment', () => {\n      expect(configManager.isDevelopment()).toBe(true);\n    });\n\n    it('should return false when NODE_ENV is production', () => {\n      process.env.NODE_ENV = 'production';\n      const prodConfigManager = new ConfigManager();\n      expect(prodConfigManager.isDevelopment()).toBe(false);\n    });\n  });\n});\n"],"version":3}