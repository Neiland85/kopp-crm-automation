import * as cron from 'node-cron';
import dotenv from 'dotenv';
import { reputometroHandler, ReputometroConfig } from './handler';
import { Logger } from '../../utils/Logger';

// Cargar variables de entorno
dotenv.config();

// Configurar logger espec√≠fico
const logger = new Logger('reputometro-index');

/**
 * üéØ Reput√≥metro Invisible - Zapier CLI Integration
 *
 * Automatizaci√≥n avanzada que ejecuta cada 5 minutos para:
 * 1. Consultar HubSpot por leads activos (√∫ltima hora)
 * 2. Calcular lead_influence_score basado en actividad
 * 3. Actualizar propiedades en HubSpot
 * 4. Enviar reporte autom√°tico a Slack
 *
 * Stack: TypeScript + Zapier CLI + HubSpot API + Slack API + Node-Cron
 */

// Configuraci√≥n del cron job
const CRON_SCHEDULE = '*/5 * * * *'; // Cada 5 minutos
const TIMEZONE = 'America/Mexico_City'; // Timezone Kopp Stadium

/**
 * Configuraci√≥n principal del Reput√≥metro
 */
const config: ReputometroConfig = {
  hubspotApiKey: process.env.HUBSPOT_API_KEY || '',
  slackBotToken: process.env.SLACK_BOT_TOKEN || '',
  slackSigningSecret: process.env.SLACK_SIGNING_SECRET || '',
  slackChannel: '#scoring-leads',
  isEnabled: process.env.REPUTOMETRO_ENABLED === 'true',
};

/**
 * Validar configuraci√≥n requerida
 */
function validateConfig(): boolean {
  const required = ['hubspotApiKey', 'slackBotToken', 'slackSigningSecret'];
  const missing = required.filter(
    (key) => !config[key as keyof ReputometroConfig]
  );

  if (missing.length > 0) {
    logger.error('Reput√≥metro: Configuraci√≥n incompleta', {
      missing,
      component: 'reputometro-config',
    });
    return false;
  }

  return true;
}

/**
 * Funci√≥n principal del trigger de Zapier
 */
export const reputometroTrigger = async () => {
  try {
    logger.info('üéØ Iniciando Reput√≥metro Invisible', {
      timestamp: new Date().toISOString(),
      component: 'reputometro-trigger',
    });

    // Validar configuraci√≥n
    if (!validateConfig()) {
      throw new Error('Configuraci√≥n del Reput√≥metro incompleta');
    }

    // Ejecutar handler principal
    const result = await reputometroHandler(config);

    logger.info('‚úÖ Reput√≥metro ejecutado exitosamente', {
      result,
      component: 'reputometro-trigger',
    });

    return [result];
  } catch (error) {
    logger.error('‚ùå Error en Reput√≥metro', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      component: 'reputometro-trigger',
    });

    throw error;
  }
};

/**
 * Configuraci√≥n del cron job para ejecuci√≥n autom√°tica
 */
export function initializeReputometroCron(): void {
  if (!config.isEnabled) {
    logger.info('‚è∏Ô∏è Reput√≥metro deshabilitado', {
      component: 'reputometro-cron',
    });
    return;
  }

  if (!validateConfig()) {
    logger.error(
      '‚ùå No se puede inicializar Reput√≥metro: configuraci√≥n inv√°lida',
      {
        component: 'reputometro-cron',
      }
    );
    return;
  }

  logger.info('üöÄ Iniciando Reput√≥metro Cron Job', {
    schedule: CRON_SCHEDULE,
    timezone: TIMEZONE,
    channel: config.slackChannel,
    component: 'reputometro-cron',
  });

  // Programar ejecuci√≥n cada 5 minutos
  cron.schedule(
    CRON_SCHEDULE,
    async () => {
      try {
        logger.info('‚è∞ Ejecutando Reput√≥metro programado', {
          timestamp: new Date().toISOString(),
          component: 'reputometro-cron',
        });

        const result = await reputometroHandler(config);

        logger.info('‚úÖ Reput√≥metro programado completado', {
          result,
          component: 'reputometro-cron',
        });
      } catch (error) {
        logger.error('‚ùå Error en Reput√≥metro programado', {
          error: error instanceof Error ? error.message : String(error),
          component: 'reputometro-cron',
        });
      }
    },
    {
      timezone: TIMEZONE,
    }
  );

  logger.info('üìÖ Cron job del Reput√≥metro iniciado exitosamente', {
    component: 'reputometro-cron',
  });
}

/**
 * Definici√≥n del Zap para Zapier Platform
 */
export const reputometroZap = {
  key: 'reputometro_invisible',
  noun: 'Reput√≥metro',
  display: {
    label: 'üéØ Reput√≥metro Invisible',
    description:
      'Automatizaci√≥n de lead scoring cada 5 minutos con reporting a Slack',
    important: true,
  },
  operation: {
    type: 'polling',
    perform: reputometroTrigger,
    sample: {
      id: 'reputometro_' + Date.now(),
      timestamp: new Date().toISOString(),
      total_leads: 25,
      avg_score: 7.2,
      top_leads: [
        { email: 'ejemplo@empresa.com', score: 9.5 },
        { email: 'lead@startup.com', score: 8.7 },
        { email: 'contact@acme.com', score: 8.2 },
      ],
      slack_message_sent: true,
    },
  },
};

/**
 * Funci√≥n de utilidad para testing manual
 */
export async function runReputometroManual(): Promise<void> {
  logger.info('üß™ Ejecutando Reput√≥metro en modo manual', {
    component: 'reputometro-manual',
  });

  try {
    if (!validateConfig()) {
      throw new Error('Configuraci√≥n inv√°lida para ejecuci√≥n manual');
    }

    const result = await reputometroHandler(config);

    console.log('üéâ Reput√≥metro manual completado:');
    console.log(JSON.stringify(result, null, 2));
  } catch (error) {
    console.error('‚ùå Error en ejecuci√≥n manual:', error);
    throw error;
  }
}

// Exportar configuraci√≥n para tests
export { config, validateConfig };

// Inicializar autom√°ticamente si no estamos en modo test
if (process.env.NODE_ENV !== 'test' && process.env.NODE_ENV !== 'development') {
  initializeReputometroCron();
}
