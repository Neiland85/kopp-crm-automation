name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint:check
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Report test results to Slack
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TEST_CHANNEL: '#kopp-crm-tests'
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_SERVER_URL: ${{ github.server_url }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_RUN_ID: ${{ github.run_id }}
      run: node scripts/slackTestReport.js

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        
    - name: Report QA results to Slack
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_QA_CHANNEL: '#kopp-crm-qa'
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_SERVER_URL: ${{ github.server_url }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_RUN_ID: ${{ github.run_id }}
      run: node scripts/qaReport.js

    - name: Notify deployment success
      if: success()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"channel":"#anuncios-kopp","username":"Deploy Bot","icon_emoji":":rocket:","text":"üöÄ Deployment exitoso a producci√≥n","attachments":[{"color":"#36a64f","title":"'${GITHUB_REPOSITORY}' deployed","title_link":"'${GITHUB_SERVER_URL}'/'${GITHUB_REPOSITORY}'/actions/runs/'${GITHUB_RUN_ID}'","fields":[{"title":"Environment","value":"Production","short":true},{"title":"Commit","value":"'${GITHUB_SHA:0:8}'","short":true}],"footer":"GitHub Actions","ts":'$(date +%s)'}]}' \
          $SLACK_WEBHOOK_URL

    - name: Notify deployment failure
      if: failure()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"channel":"#anuncios-kopp","username":"Deploy Bot","icon_emoji":":x:","text":"‚ùå Deployment fall√≥","attachments":[{"color":"#ff0000","title":"'${GITHUB_REPOSITORY}' deployment failed","title_link":"'${GITHUB_SERVER_URL}'/'${GITHUB_REPOSITORY}'/actions/runs/'${GITHUB_RUN_ID}'","fields":[{"title":"Environment","value":"Production","short":true},{"title":"Commit","value":"'${GITHUB_SHA:0:8}'","short":true}],"footer":"GitHub Actions","ts":'$(date +%s)'}]}' \
          $SLACK_WEBHOOK_URL
